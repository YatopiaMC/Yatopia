From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Sat, 31 Oct 2020 19:32:26 -0500
Subject: [PATCH] AirplaneLite Data Structs

Airplane Lite
Copyright (C) 2020 Technove LLC

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

diff --git a/src/main/java/gg/airplane/structs/ChunkMapMap.java b/src/main/java/gg/airplane/structs/ChunkMapMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..938d7a6ee430d19109d3c8b5cf5f5318d7de4136
--- /dev/null
+++ b/src/main/java/gg/airplane/structs/ChunkMapMap.java
@@ -0,0 +1,545 @@
+package gg.airplane.structs;
+
+import com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy;
+import it.unimi.dsi.fastutil.longs.Long2ObjectFunction;
+import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectSortedMap;
+import it.unimi.dsi.fastutil.longs.LongComparator;
+import it.unimi.dsi.fastutil.longs.LongSortedSet;
+import it.unimi.dsi.fastutil.objects.AbstractObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.ObjectSortedSet;
+import net.minecraft.server.PlayerChunk;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.function.BiFunction;
+import java.util.function.Function;
+import java.util.function.IntSupplier;
+import java.util.function.LongFunction;
+
+/**
+ * This class is bad, in fact I'm rather embarrassed to be pushing it.
+ * <p>
+ * However it represents well the updating/visible chunk maps for PlayerChunkMap,
+ * while supporting concurrent operations and no copying.
+ * <p>
+ * If some dumb plugin needs a method that's unimplemented, I guess it'll need to be
+ * implemented in the future. As well, no internal code appears to take advantage of
+ * the fact that this should be a LinkedMap, so I'm going to ignore that for the sake
+ * of performance until it becomes an issue.
+ */
+public class ChunkMapMap extends ConcLong2ObjectOpenHashMap<ChunkMapMap.ChunkMapChunk> {
+    public static class ChunkMapChunk {
+        public PlayerChunk updating;
+        public PlayerChunk visible;
+        public final long key;
+
+        public ChunkMapChunk(PlayerChunk updating, PlayerChunk visible, long key) {
+            this.updating = updating;
+            this.visible = visible;
+            this.key = key;
+        }
+    }
+
+    private class FakeChunkMap extends Long2ObjectLinkedOpenHashMapFastCopy<PlayerChunk> {
+        private final IntSupplier getSize;
+        private final Long2ObjectFunction<PlayerChunk> getChunk;
+        private final Function<ChunkMapChunk, PlayerChunk> fromParent;
+
+        private FakeChunkMap(IntSupplier getSize, Long2ObjectFunction<PlayerChunk> getChunk, Function<ChunkMapChunk, PlayerChunk> fromParent) {
+            this.getSize = getSize;
+            this.getChunk = getChunk;
+            this.fromParent = fromParent;
+        }
+
+        @Override
+        public void putAll(Map<? extends Long, ? extends PlayerChunk> m) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk put(long k, PlayerChunk playerChunk) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk remove(long k) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk removeFirst() {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk removeLast() {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk getAndMoveToFirst(long k) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk getAndMoveToLast(long k) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk putAndMoveToFirst(long k, PlayerChunk playerChunk) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk putAndMoveToLast(long k, PlayerChunk playerChunk) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk get(long k) {
+            return this.getChunk.get(k);
+        }
+
+        @Override
+        public boolean containsKey(long k) {
+            return this.getChunk.get(k) != null;
+        }
+
+        @Override
+        public boolean containsValue(Object v) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public PlayerChunk getOrDefault(long k, PlayerChunk defaultValue) {
+            PlayerChunk actual = this.get(k);
+            if (actual == null) {
+                return defaultValue;
+            }
+            return actual;
+        }
+
+        @Override
+        public PlayerChunk putIfAbsent(long k, PlayerChunk playerChunk) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public boolean remove(long k, Object v) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public boolean replace(long k, PlayerChunk oldValue, PlayerChunk playerChunk) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk replace(long k, PlayerChunk playerChunk) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk computeIfAbsent(long k, LongFunction<? extends PlayerChunk> mappingFunction) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk computeIfPresent(long k, BiFunction<? super Long, ? super PlayerChunk, ? extends PlayerChunk> remappingFunction) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk compute(long k, BiFunction<? super Long, ? super PlayerChunk, ? extends PlayerChunk> remappingFunction) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public PlayerChunk merge(long k, PlayerChunk playerChunk, BiFunction<? super PlayerChunk, ? super PlayerChunk, ? extends PlayerChunk> remappingFunction) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public void clear() {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public int size() {
+            return this.getSize.getAsInt();
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return this.getSize.getAsInt() == 0;
+        }
+
+        @Override
+        protected void fixPointers(int i) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        protected void fixPointers(int s, int d) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public long firstLongKey() {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public long lastLongKey() {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public Long2ObjectSortedMap<PlayerChunk> tailMap(long from) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public Long2ObjectSortedMap<PlayerChunk> headMap(long to) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public Long2ObjectSortedMap<PlayerChunk> subMap(long from, long to) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public LongComparator comparator() {
+            throw new UnsupportedOperationException();
+        }
+
+        private final FastSortedEntrySet<PlayerChunk> entrySet = new FastSortedEntrySet<PlayerChunk>() {
+            @Override
+            public ObjectBidirectionalIterator<Entry<PlayerChunk>> fastIterator() {
+                return new ObjectBidirectionalIterator<Entry<PlayerChunk>>() {
+                    @Override
+                    public Entry<PlayerChunk> previous() {
+                        throw new UnsupportedOperationException();
+                    }
+
+                    @Override
+                    public boolean hasPrevious() {
+                        throw new UnsupportedOperationException();
+                    }
+
+                    private Entry<PlayerChunk> next;
+                    private final ObjectIterator<Entry<ChunkMapChunk>> iterator = ChunkMapMap.this.long2ObjectEntrySet().iterator();
+
+                    {
+                        calculateNext();
+                    }
+
+                    private void calculateNext() {
+                        while (iterator.hasNext()) {
+                            Entry<ChunkMapChunk> next = iterator.next();
+                            PlayerChunk applied = fromParent.apply(next.getValue());
+                            if (applied != null) {
+                                this.next = new Entry<PlayerChunk>() {
+                                    @Override
+                                    public long getLongKey() {
+                                        return next.getLongKey();
+                                    }
+
+                                    @Override
+                                    public PlayerChunk getValue() {
+                                        return applied;
+                                    }
+
+                                    @Override
+                                    public PlayerChunk setValue(PlayerChunk playerChunk) {
+                                        throw new UnsupportedOperationException();
+                                    }
+                                };
+                                return;
+                            }
+                        }
+                        this.next = null;
+                    }
+
+                    @Override
+                    public boolean hasNext() {
+                        return this.next != null;
+                    }
+
+                    @Override
+                    public Entry<PlayerChunk> next() {
+                        Entry<PlayerChunk> next = this.next;
+                        this.calculateNext();
+                        return next;
+                    }
+                };
+            }
+
+            @Override
+            public ObjectBidirectionalIterator<Entry<PlayerChunk>> fastIterator(Entry<PlayerChunk> entry) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public ObjectBidirectionalIterator<Entry<PlayerChunk>> iterator(Entry<PlayerChunk> playerChunkEntry) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public ObjectBidirectionalIterator<Entry<PlayerChunk>> iterator() {
+                return this.fastIterator();
+            }
+
+            @Override
+            public ObjectSortedSet<Entry<PlayerChunk>> subSet(Entry<PlayerChunk> playerChunkEntry, Entry<PlayerChunk> k1) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public ObjectSortedSet<Entry<PlayerChunk>> headSet(Entry<PlayerChunk> playerChunkEntry) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public ObjectSortedSet<Entry<PlayerChunk>> tailSet(Entry<PlayerChunk> playerChunkEntry) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public Comparator<? super Entry<PlayerChunk>> comparator() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public Entry<PlayerChunk> first() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public Entry<PlayerChunk> last() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public int size() {
+                return FakeChunkMap.this.size();
+            }
+
+            @Override
+            public boolean isEmpty() {
+                return FakeChunkMap.this.isEmpty();
+            }
+
+            @Override
+            public boolean contains(Object o) {
+                if (!(o instanceof Long2ObjectMap.Entry)) {
+                    return false;
+                }
+                Long2ObjectMap.Entry entry = (Entry) o;
+
+                return Objects.equals(FakeChunkMap.this.get(entry.getLongKey()), entry.getValue());
+            }
+
+            @Override
+            public Object[] toArray() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public <T> T[] toArray(T[] ts) {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public boolean add(Entry<PlayerChunk> playerChunkEntry) {
+                throw new UnsupportedOperationException("Updating visible Chunks");
+            }
+
+            @Override
+            public boolean remove(Object o) {
+                throw new UnsupportedOperationException("Updating visible Chunks");
+            }
+
+            @Override
+            public boolean containsAll(Collection<?> collection) {
+                for (Object o : collection) {
+                    if (!(o instanceof Long2ObjectMap.Entry)) {
+                        return false;
+                    }
+                    Long2ObjectMap.Entry entry = (Entry) o;
+
+                    if (!Objects.equals(FakeChunkMap.this.get(entry.getLongKey()), entry.getValue())) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+
+            @Override
+            public boolean addAll(Collection<? extends Entry<PlayerChunk>> collection) {
+                throw new UnsupportedOperationException("Updating visible Chunks");
+            }
+
+            @Override
+            public boolean removeAll(Collection<?> collection) {
+                throw new UnsupportedOperationException("Updating visible Chunks");
+            }
+
+            @Override
+            public boolean retainAll(Collection<?> collection) {
+                throw new UnsupportedOperationException("Updating visible Chunks");
+            }
+
+            @Override
+            public void clear() {
+                throw new UnsupportedOperationException("Updating visible Chunks");
+            }
+        };
+
+        @Override
+        public FastSortedEntrySet<PlayerChunk> long2ObjectEntrySet() {
+            return this.entrySet;
+        }
+
+        @Override
+        public LongSortedSet keySet() {
+            throw new UnsupportedOperationException(); // todo harder to implement because we aren't actually sorted
+        }
+
+        private final ObjectCollection<PlayerChunk> values = new AbstractObjectCollection<PlayerChunk>() {
+            @Override
+            public ObjectIterator<PlayerChunk> iterator() {
+                return new ObjectIterator<PlayerChunk>() {
+                    private PlayerChunk next;
+                    private final ObjectIterator<Entry<ChunkMapChunk>> iterator = ChunkMapMap.this.long2ObjectEntrySet().iterator();
+
+                    {
+                        calculateNext();
+                    }
+
+                    private void calculateNext() {
+                        while (iterator.hasNext()) {
+                            Entry<ChunkMapChunk> next = iterator.next();
+                            PlayerChunk applied = fromParent.apply(next.getValue());
+                            if (applied != null) {
+                                this.next = applied;
+                                return;
+                            }
+                        }
+                        this.next = null;
+                    }
+
+                    @Override
+                    public boolean hasNext() {
+                        return this.next != null;
+                    }
+
+                    @Override
+                    public PlayerChunk next() {
+                        PlayerChunk next = this.next;
+                        this.calculateNext();
+                        return next;
+                    }
+                };
+            }
+
+            @Override
+            public int size() {
+                return FakeChunkMap.this.size();
+            }
+        };
+
+        @Override
+        public ObjectCollection<PlayerChunk> values() {
+            return this.values;
+        }
+
+        @Override
+        public boolean trim() {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public boolean trim(int n) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        protected void rehash(int newN) {
+            throw new UnsupportedOperationException("Updating visible Chunks");
+        }
+
+        @Override
+        public int hashCode() {
+            return ChunkMapMap.this.hashCode();
+        }
+    }
+
+    private final AtomicInteger updatingCount = new AtomicInteger();
+    private final AtomicInteger visibleCount = new AtomicInteger();
+
+    private final Long2ObjectLinkedOpenHashMap<PlayerChunk> updatingMap = new FakeChunkMap(this.updatingCount::get, l -> {
+        ChunkMapChunk chunkMapChunk = this.get(l);
+        return chunkMapChunk == null ? null : chunkMapChunk.updating;
+    }, parent -> parent.updating);
+    private final Long2ObjectLinkedOpenHashMap<PlayerChunk> visibleMap = new FakeChunkMap(this.visibleCount::get, l -> {
+        ChunkMapChunk chunkMapChunk = this.get(l);
+        return chunkMapChunk == null ? null : chunkMapChunk.visible;
+    }, parent -> parent.visible);
+
+    public Long2ObjectLinkedOpenHashMap<PlayerChunk> getUpdatingMap() {
+        return updatingMap;
+    }
+
+    public Long2ObjectLinkedOpenHashMap<PlayerChunk> getVisibleMap() {
+        return visibleMap;
+    }
+
+    private final List<ChunkMapChunk> updating = new ArrayList<>();
+
+    public void addUpdatingChunk(long key, PlayerChunk updatingChunk) {
+        ChunkMapChunk chunkMapChunk = this.computeIfAbsent(key, k -> new ChunkMapChunk(null, null, key));
+        chunkMapChunk.updating = updatingChunk;
+        synchronized (this.updating) {
+            this.updating.add(chunkMapChunk);
+        }
+    }
+
+    public PlayerChunk removeUpdatingChunk(long key) {
+        final ChunkMapChunk[] previous = new ChunkMapChunk[1];
+        this.computeIfPresent(key, (BiFunction<? super Long, ? super ChunkMapChunk, ? extends ChunkMapChunk>) (k, existing) -> {
+            previous[0] = existing;
+            ChunkMapChunk newChunk = new ChunkMapChunk(null, existing.visible, key);
+            synchronized (this.updating) {
+                this.updating.add(newChunk);
+            }
+            return newChunk;
+        });
+        return previous[0] == null ? null : previous[0].updating;
+    }
+
+    public void transfer() {
+        synchronized (this.updating) {
+            for (ChunkMapChunk chunkMapChunk : this.updating) {
+                if (chunkMapChunk.updating == null) {
+                    this.remove(chunkMapChunk.key);
+                } else {
+                    chunkMapChunk.visible = chunkMapChunk.updating;
+                }
+            }
+            this.updating.clear();
+        }
+    }
+}
diff --git a/src/main/java/gg/airplane/structs/ConcLong2ObjectOpenHashMap.java b/src/main/java/gg/airplane/structs/ConcLong2ObjectOpenHashMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..c4cc688932c8624ed474e2099745086297ff33c9
--- /dev/null
+++ b/src/main/java/gg/airplane/structs/ConcLong2ObjectOpenHashMap.java
@@ -0,0 +1,421 @@
+package gg.airplane.structs;
+
+import it.unimi.dsi.fastutil.HashCommon;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.longs.LongArrayList;
+import it.unimi.dsi.fastutil.longs.LongIterator;
+import it.unimi.dsi.fastutil.longs.LongList;
+import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.objects.ObjectCollection;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.function.BiFunction;
+import java.util.function.LongConsumer;
+import java.util.function.LongFunction;
+
+/**
+ * This class is getting a lil messy, but it uses static buckets to
+ * support concurrent access/modification of a larger map.
+ */
+public class ConcLong2ObjectOpenHashMap<V> extends Long2ObjectOpenHashMap<V> {
+    private static class LongBucket<V> extends Long2ObjectOpenHashMap<V> {
+        public LongBucket(int expectedSize, float capacity) {
+            super(expectedSize, capacity);
+        }
+
+        public LongBucket(LongBucket<V> toClone) {
+            super(toClone);
+        }
+
+        @Override
+        public synchronized final V put(long key, V value) {
+            return super.put(key, value);
+        }
+
+        @Override
+        public synchronized final V putIfAbsent(long key, V value) {
+            return super.putIfAbsent(key, value);
+        }
+
+        @Override
+        public synchronized final V remove(long key) {
+            return super.remove(key);
+        }
+
+        @Override
+        public synchronized final V get(long key) {
+            return super.get(key);
+        }
+
+        @Override
+        public synchronized final boolean containsKey(long key) {
+            return super.containsKey(key);
+        }
+
+        public synchronized final void forEach(ConsumeFunction<V> consumer) {
+            LongSet longs = this.keySet();
+            longs.forEach((LongConsumer) l -> {
+                consumer.consume(l, super.get(l));
+            });
+        }
+
+        @Override
+        public synchronized final V compute(long key, BiFunction<? super Long, ? super V, ? extends V> remappingFunction) {
+            return super.compute(key, remappingFunction);
+        }
+
+        @Override
+        public synchronized V computeIfAbsent(long k, LongFunction<? extends V> mappingFunction) {
+            return super.computeIfAbsent(k, mappingFunction);
+        }
+
+        @Override
+        public synchronized V computeIfPresent(long k, BiFunction<? super Long, ? super V, ? extends V> remappingFunction) {
+            return super.computeIfPresent(k, remappingFunction);
+        }
+
+        public synchronized boolean removeIf(RemoveIfFunction<V> function) {
+            LongSet longs = this.keySet();
+            LongIterator iterator = longs.iterator();
+            boolean removed = false;
+            while (iterator.hasNext()) {
+                long key = iterator.nextLong();
+                if (function.remove(key, super.get(key))) {
+                    iterator.remove();
+                    removed = true;
+                }
+            }
+            return removed;
+        }
+
+        @Override
+        public synchronized final void clear() {
+            super.clear();
+        }
+
+        @Override
+        public synchronized int hashCode() {
+            return super.hashCode();
+        }
+
+        @Override
+        public synchronized LongBucket<V> clone() {
+            return new LongBucket<>(this);
+        }
+    }
+
+    private final int bucketCount = HashCommon.nextPowerOfTwo(Runtime.getRuntime().availableProcessors() * 32); // todo need to redo tests on different processors
+    private final int mask = this.bucketCount - 1;
+    private final LongBucket<V>[] buckets = new LongBucket[this.bucketCount];
+
+    public ConcLong2ObjectOpenHashMap() {
+        this(16, 0.75f);
+    }
+
+    public ConcLong2ObjectOpenHashMap(int expectedSize, float capacity) {
+        for (int i = 0; i < this.bucketCount; i++) {
+            this.buckets[i] = new LongBucket<>(Math.max(12, expectedSize / bucketCount), capacity);
+        }
+    }
+
+    public ConcLong2ObjectOpenHashMap(ConcLong2ObjectOpenHashMap<V> toCopy) {
+        for (int i = 0; i < this.bucketCount; i++) {
+            this.buckets[i] = toCopy.buckets[i].clone();
+        }
+    }
+
+    @Override
+    public final V put(long key, V value) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(key) & this.mask)].put(key, value);
+    }
+
+    @Override
+    public final V putIfAbsent(long key, V value) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(key) & this.mask)].putIfAbsent(key, value);
+    }
+
+    @Override
+    public final V remove(long key) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(key) & this.mask)].remove(key);
+    }
+
+    @Override
+    public final V get(long key) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(key) & this.mask)].get(key);
+    }
+
+    @Override
+    public final boolean containsKey(long key) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(key) & this.mask)].containsKey(key);
+    }
+
+    public interface ConsumeFunction<V> {
+        void consume(long key, V value);
+    }
+
+    public final void forEach(ConsumeFunction<V> consumer) {
+        for (int i = 0; i < this.bucketCount; i++) {
+            this.buckets[i].forEach(consumer);
+        }
+    }
+
+    public interface RemoveIfFunction<V> {
+        boolean remove(long key, V value);
+    }
+
+    public final boolean removeIf(RemoveIfFunction<V> function) {
+        boolean removed = false;
+        for (int i = 0; i < this.bucketCount; i++) {
+            if (this.buckets[i].removeIf(function)) {
+                removed = true;
+            }
+        }
+        return removed;
+    }
+
+    @Override
+    public final V compute(long key, BiFunction<? super Long, ? super V, ? extends V> remappingFunction) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(key) & this.mask)].compute(key, remappingFunction);
+    }
+
+    @Override
+    public final int size() {
+        int size = 0;
+        for (int i = 0; i < this.bucketCount; i++) {
+            size += this.buckets[i].size();
+        }
+        return size;
+    }
+
+    @Override
+    public final boolean isEmpty() {
+        return this.size() == 0;
+    }
+
+    @Override
+    public void putAll(Map<? extends Long, ? extends V> m) {
+        for (Map.Entry<? extends Long, ? extends V> entry : m.entrySet()) {
+            this.put(entry.getKey(), entry.getValue());
+        }
+    }
+
+    @Override
+    public boolean containsValue(Object v) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public V getOrDefault(long k, V defaultValue) {
+        if (!this.containsKey(k)) {
+            return defaultValue;
+        }
+        return this.get(k);
+    }
+
+    @Override
+    public boolean remove(long k, Object v) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public boolean replace(long k, V oldValue, V v) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public V replace(long k, V v) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public V computeIfAbsent(long k, LongFunction<? extends V> mappingFunction) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(k) & this.mask)].computeIfAbsent(k, mappingFunction);
+    }
+
+    @Override
+    public V computeIfPresent(long k, BiFunction<? super Long, ? super V, ? extends V> remappingFunction) {
+        return this.buckets[(int) Math.abs(HashCommon.mix(k) & this.mask)].computeIfPresent(k, remappingFunction);
+    }
+
+    @Override
+    public V merge(long k, V v, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void clear() {
+        for (int i = 0; i < this.bucketCount; i++) {
+            this.buckets[i].clear();
+        }
+    }
+
+    private class EntrySet implements FastEntrySet<V> {
+        @Override
+        public ObjectIterator<Entry<V>> fastIterator() {
+            // yikes...
+            return new ObjectIterator<Entry<V>>() {
+                private final LongList keys;
+                private final List<V> values;
+
+                private int index = 0;
+
+                {
+                    this.keys = new LongArrayList(ConcLong2ObjectOpenHashMap.this.size());
+                    this.values = new ArrayList<>(keys.size());
+
+                    ConcLong2ObjectOpenHashMap.this.forEach((ConsumeFunction<V>) (k, v) -> {
+                        this.keys.add(k);
+                        this.values.add(v);
+                    });
+                }
+
+                @Override
+                public boolean hasNext() {
+                    return index < this.keys.size();
+                }
+
+                @Override
+                public Entry<V> next() {
+                    long key = this.keys.getLong(this.index);
+                    V value = this.values.get(this.index);
+                    Entry<V> entry = new Entry<V>() {
+                        @Override
+                        public long getLongKey() {
+                            return key;
+                        }
+
+                        @Override
+                        public V getValue() {
+                            return value;
+                        }
+
+                        @Override
+                        public V setValue(V v) {
+                            throw new UnsupportedOperationException();
+                        }
+                    };
+                    this.index++;
+                    return entry;
+                }
+            };
+        }
+
+        @Override
+        public int size() {
+            return ConcLong2ObjectOpenHashMap.this.size();
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return ConcLong2ObjectOpenHashMap.this.isEmpty();
+        }
+
+        @Override
+        public boolean contains(Object o) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public ObjectIterator<Entry<V>> iterator() {
+            return this.fastIterator();
+        }
+
+        @Override
+        public Object[] toArray() {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public <T> T[] toArray(T[] ts) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public boolean add(Entry<V> vEntry) {
+            return ConcLong2ObjectOpenHashMap.this.put(vEntry.getLongKey(), vEntry.getValue()) != vEntry.getValue();
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public boolean containsAll(Collection<?> collection) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public boolean addAll(Collection<? extends Entry<V>> collection) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public boolean removeAll(Collection<?> collection) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public boolean retainAll(Collection<?> collection) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public void clear() {
+            ConcLong2ObjectOpenHashMap.this.clear();
+        }
+    }
+
+    private FastEntrySet<V> entries;
+
+    @Override
+    public FastEntrySet<V> long2ObjectEntrySet() {
+        if (this.entries == null) {
+            this.entries = new EntrySet();
+        }
+        return this.entries;
+    }
+
+    @Override
+    public LongSet keySet() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ObjectCollection<V> values() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public boolean trim() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public boolean trim(int n) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    protected void rehash(int newN) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public ConcLong2ObjectOpenHashMap<V> clone() {
+        return new ConcLong2ObjectOpenHashMap<>(this);
+    }
+
+    @Override
+    public int hashCode() {
+        int code = 0;
+        for (int i = 0; i < this.bucketCount; i++) {
+            code ^= this.buckets[i].hashCode();
+        }
+        return code;
+    }
+}
