From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fluse1367 <18399629+fluse1367@users.noreply.github.com>
Date: Sun, 17 Jan 2021 13:57:24 +0100
Subject: [PATCH] Entity Tracking


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 21712a6691e00ffaf523f084da6ce5659fc98be9..fe40a4efdb8e47884609cf8cedcf3f9e74cefb77 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -236,6 +236,7 @@ public class TimingsExport extends Thread {
                 pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null))
                 , pair("yatopia", mapAsJSON(Bukkit.spigot().getYatopiaConfig(), null)) // Yatopia - add config to timings report
                 // Purpur end
+                , pair("entity-tracking", mapAsJSON(Bukkit.spigot().getEntityTrackingConfig(), null)) // Entity Tracking Config
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/me/fluse1367/entitytracking/EntityTrackingConfig.java b/src/main/java/me/fluse1367/entitytracking/EntityTrackingConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..0534e1362182b3abe0c54ada2e4174bc3185c929
--- /dev/null
+++ b/src/main/java/me/fluse1367/entitytracking/EntityTrackingConfig.java
@@ -0,0 +1,295 @@
+package me.fluse1367.entitytracking;
+
+import com.destroystokyo.paper.util.SneakyThrow;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.EntityTypes;
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+
+public final class EntityTrackingConfig {
+
+    public static final String CONFIG_HEADER = "Configuration file for custom entity tracking.";
+    public static final int CURRENT_CONFIG_VERSION = 1;
+
+    private static final Object[] EMPTY = new Object[0];
+
+    private static File configFile;
+    public static YamlConfiguration config;
+    private static int configVersion;
+    public static boolean createWorldSections = true;
+
+    public static void init(final File file) {
+        EntityTrackingConfig.configFile = file;
+        final YamlConfiguration config = new YamlConfiguration();
+        config.options().header(CONFIG_HEADER);
+        config.options().copyDefaults(true);
+
+        if (!file.exists()) {
+            try {
+                file.createNewFile();
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failure to create custom entity tracking", ex);
+            }
+        } else {
+            try {
+                config.load(file);
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Failure to load custom entity tracking", ex);
+                SneakyThrow.sneaky(ex); /* Rethrow, this is critical */
+                throw new RuntimeException(ex); // unreachable
+            }
+        }
+
+        EntityTrackingConfig.load(config);
+    }
+
+    public static void load(final YamlConfiguration config) {
+        EntityTrackingConfig.config = config;
+        EntityTrackingConfig.configVersion = EntityTrackingConfig.getInt("config-version-please-do-not-modify-me", CURRENT_CONFIG_VERSION);
+        EntityTrackingConfig.set("config-version-please-do-not-modify-me", CURRENT_CONFIG_VERSION);
+
+        for (final Method method : EntityTrackingConfig.class.getDeclaredMethods()) {
+            if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                    !Modifier.isPrivate(method.getModifiers()) || !Modifier.isStatic(method.getModifiers())) {
+                continue;
+            }
+
+            try {
+                method.setAccessible(true);
+                method.invoke(null, EMPTY);
+            } catch (final Exception ex) {
+                SneakyThrow.sneaky(ex); /* Rethrow, this is critical */
+                throw new RuntimeException(ex); // unreachable
+            }
+        }
+
+        /* We re-save to add new options */
+        try {
+            config.save(EntityTrackingConfig.configFile);
+        } catch (final Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Unable to save custom entity tracking", ex);
+        }
+    }
+
+    static void set(final String path, final Object value) {
+        EntityTrackingConfig.config.set(path, value);
+    }
+
+    static boolean getBoolean(final String path, final boolean dfl) {
+        EntityTrackingConfig.config.addDefault(path, Boolean.valueOf(dfl));
+        return EntityTrackingConfig.config.getBoolean(path, dfl);
+    }
+
+    static int getInt(final String path, final int dfl) {
+        EntityTrackingConfig.config.addDefault(path, Integer.valueOf(dfl));
+        return EntityTrackingConfig.config.getInt(path, dfl);
+    }
+
+    static long getLong(final String path, final long dfl) {
+        EntityTrackingConfig.config.addDefault(path, Long.valueOf(dfl));
+        return EntityTrackingConfig.config.getLong(path, dfl);
+    }
+
+    static double getDouble(final String path, final double dfl) {
+        EntityTrackingConfig.config.addDefault(path, Double.valueOf(dfl));
+        return EntityTrackingConfig.config.getDouble(path, dfl);
+    }
+
+    static String getString(final String path, final String dfl) {
+        EntityTrackingConfig.config.addDefault(path, dfl);
+        return EntityTrackingConfig.config.getString(path, dfl);
+    }
+
+    public static boolean tickWorldsInParallel;
+
+    /**
+     * if tickWorldsInParallel == true, then this value is used as a default only for worlds
+     */
+    public static int tickThreads;
+
+    /*
+    private static void worldticking() {
+        tickWorldsInParallel = EternityConfig.getBoolean("tick-worlds-in-parallel", false);
+        tickThreads = EternityConfig.getInt("server-tick-threads", 1); // will be 4 in the future
+    }*/
+
+    /* overrides for entity tracking ranges */
+    public static ImmutableMap<MinecraftKey, Integer> specificTrackingRanges;
+
+    private static void specificTrackingRanges() {
+        Map<MinecraftKey, Integer> map = new HashMap<>();
+
+        for (MinecraftKey mk : EntityTypes.getEntityNameList()) {
+            int range = getInt("specific-entity-tracking-ranges.".concat(mk.getKey()), -1);
+            if (range < 0) // disable override
+                continue;
+
+            map.put(mk, range);
+        }
+
+        specificTrackingRanges = ImmutableMap.copyOf(map);
+    }
+
+    public static final class WorldConfig {
+
+        public final String worldName;
+        public String configPath;
+        ConfigurationSection worldDefaults;
+
+        public WorldConfig(final String worldName) {
+            this.worldName = worldName;
+            this.init();
+        }
+
+        public void init() {
+            this.worldDefaults = EntityTrackingConfig.config.getConfigurationSection("world-settings.default");
+            if (this.worldDefaults == null) {
+                this.worldDefaults = EntityTrackingConfig.config.createSection("world-settings.default");
+            }
+
+            String worldSectionPath = EntityTrackingConfig.configVersion < 1 ? this.worldName : "world-settings.".concat(this.worldName);
+            ConfigurationSection section = EntityTrackingConfig.config.getConfigurationSection(worldSectionPath);
+            this.configPath = worldSectionPath;
+            if (EntityTrackingConfig.createWorldSections) {
+                if (section == null) {
+                    section = EntityTrackingConfig.config.createSection(worldSectionPath);
+                }
+                EntityTrackingConfig.config.set(worldSectionPath, section);
+            }
+
+            this.load();
+        }
+
+        public void load() {
+            for (final Method method : WorldConfig.class.getDeclaredMethods()) {
+                if (method.getReturnType() != void.class || method.getParameterCount() != 0 ||
+                        !Modifier.isPrivate(method.getModifiers()) || Modifier.isStatic(method.getModifiers())) {
+                    continue;
+                }
+
+                try {
+                    method.setAccessible(true);
+                    method.invoke(this, EMPTY);
+                } catch (final Exception ex) {
+                    SneakyThrow.sneaky(ex); /* Rethrow, this is critical */
+                    throw new RuntimeException(ex); // unreachable
+                }
+            }
+
+            if (EntityTrackingConfig.configVersion < 1) {
+                ConfigurationSection oldSection = EntityTrackingConfig.config.getConfigurationSection(this.worldName);
+                EntityTrackingConfig.config.set("world-settings.".concat(this.worldName), oldSection);
+                EntityTrackingConfig.config.set(this.worldName, null);
+            }
+
+            /* We re-save to add new options */
+            try {
+                EntityTrackingConfig.config.save(EntityTrackingConfig.configFile);
+            } catch (final Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Unable to save custom entity tracking", ex);
+            }
+        }
+
+        /**
+         * update world defaults for the specified path, but also sets this world's config value for the path
+         * if it exists
+         */
+        void set(final String path, final Object val) {
+            final ConfigurationSection config = EntityTrackingConfig.config.getConfigurationSection(this.configPath);
+            this.worldDefaults.set(path, val);
+            if (config != null && config.get(path) != null) {
+                config.set(path, val);
+            }
+        }
+
+        boolean getBoolean(final String path, final boolean dfl) {
+            final ConfigurationSection config = EntityTrackingConfig.config.getConfigurationSection(this.configPath);
+            this.worldDefaults.addDefault(path, Boolean.valueOf(dfl));
+            if (EntityTrackingConfig.configVersion < 1) {
+                if (config != null && config.getBoolean(path) == dfl) {
+                    config.set(path, null);
+                }
+            }
+            return config == null ? this.worldDefaults.getBoolean(path) : config.getBoolean(path, this.worldDefaults.getBoolean(path));
+        }
+
+        int getInt(final String path, final int dfl) {
+            final ConfigurationSection config = EntityTrackingConfig.config.getConfigurationSection(this.configPath);
+            this.worldDefaults.addDefault(path, Integer.valueOf(dfl));
+            if (EntityTrackingConfig.configVersion < 1) {
+                if (config != null && config.getInt(path) == dfl) {
+                    config.set(path, null);
+                }
+            }
+            return config == null ? this.worldDefaults.getInt(path) : config.getInt(path, this.worldDefaults.getInt(path));
+        }
+
+        long getLong(final String path, final long dfl) {
+            final ConfigurationSection config = EntityTrackingConfig.config.getConfigurationSection(this.configPath);
+            this.worldDefaults.addDefault(path, Long.valueOf(dfl));
+            if (EntityTrackingConfig.configVersion < 1) {
+                if (config != null && config.getLong(path) == dfl) {
+                    config.set(path, null);
+                }
+            }
+            return config == null ? this.worldDefaults.getLong(path) : config.getLong(path, this.worldDefaults.getLong(path));
+        }
+
+        double getDouble(final String path, final double dfl) {
+            final ConfigurationSection config = EntityTrackingConfig.config.getConfigurationSection(this.configPath);
+            this.worldDefaults.addDefault(path, Double.valueOf(dfl));
+            if (EntityTrackingConfig.configVersion < 1) {
+                if (config != null && config.getDouble(path) == dfl) {
+                    config.set(path, null);
+                }
+            }
+            return config == null ? this.worldDefaults.getDouble(path) : config.getDouble(path, this.worldDefaults.getDouble(path));
+        }
+
+        String getString(final String path, final String dfl) {
+            final ConfigurationSection config = EntityTrackingConfig.config.getConfigurationSection(this.configPath);
+            this.worldDefaults.addDefault(path, dfl);
+            return config == null ? this.worldDefaults.getString(path) : config.getString(path, this.worldDefaults.getString(path));
+        }
+
+        /**
+         * ignored if {@link EntityTrackingConfig#tickWorldsInParallel} == false
+         */
+        public int threads;
+
+        /*
+        private void worldthreading() {
+            final int threads = this.getInt("tick-threads", -1);
+            this.threads = threads == -1 ? EternityConfig.tickThreads : threads;
+        }*/
+
+        public ImmutableMap<MinecraftKey, Integer> specificTrackingRanges;
+
+        private void perWorldSpecificTrackingRanges() {
+            final String path = "spawn-limits";
+
+            Map<MinecraftKey, Integer> map = new HashMap<>();
+
+            for (MinecraftKey mk : EntityTypes.getEntityNameList()) {
+                int range =  getInt("specific-entity-tracking-ranges.".concat(mk.getKey()), -1);
+                if (range < 0) // disable override
+                    continue;
+
+                map.put(mk, range);
+            }
+
+            specificTrackingRanges = ImmutableMap.copyOf(map);
+        }
+
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/me/fluse1367/entitytracking/TrackingRange.java b/src/main/java/me/fluse1367/entitytracking/TrackingRange.java
new file mode 100644
index 0000000000000000000000000000000000000000..bab146128ad74dcdc259c008b3f9f078d09da02a
--- /dev/null
+++ b/src/main/java/me/fluse1367/entitytracking/TrackingRange.java
@@ -0,0 +1,23 @@
+package me.fluse1367.entitytracking;
+
+import net.minecraft.server.Entity;
+import net.minecraft.server.MinecraftKey;
+
+import java.util.Map;
+import java.util.Optional;
+
+public class TrackingRange {
+    public static Optional<Integer> getTrackingRange(Entity entity) {
+        MinecraftKey mk = entity.getMinecraftKey();
+
+        Map<MinecraftKey, Integer> worldMap = entity.world.entityTrackingConfig.specificTrackingRanges;
+        if(worldMap.containsKey(mk))
+            return Optional.of(worldMap.get(mk));
+
+        Map<MinecraftKey, Integer> map = EntityTrackingConfig.specificTrackingRanges;
+
+        if(!map.containsKey(mk))
+            return Optional.empty();
+        return Optional.of(map.get(mk));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 2473eb88ec7be3f4935debe04eeabcc0815b3233..dd05b5f18bbe45a593a2763dd4ac87b6cc53ca75 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -179,6 +179,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         // Paper end
         com.tuinity.tuinity.config.TuinityConfig.init((java.io.File) options.valueOf("tuinity-settings")); // Tuinity - Server Config
+        me.fluse1367.entitytracking.EntityTrackingConfig.init((java.io.File) options.valueOf("entity-tracking-settings")); // Entity Tracking
 
         // Yatopia start
         try {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 581b675fae4ca8a3d774f4353d1e58fc31b557c7..f5d106634e9942321cdf9dc0aeeffdddc5155e85 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -960,6 +960,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
                 PaperJvmChecker.checkJvm(); // Paper jvm version nag
                 com.tuinity.tuinity.config.TuinityConfig.createWorldSections = false; // Tuinity - don't let plugin created worlds fill our config
+                me.fluse1367.entitytracking.EntityTrackingConfig.createWorldSections = false; // Entity Tracking - don't let plugin created worlds fill our config
                 org.spigotmc.WatchdogThread.tick(); // Paper
                 org.spigotmc.WatchdogThread.hasStarted = true; // Paper
                 Arrays.fill( recentTps, 20 );
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 5759d5e472c089b57ffe9a94c617459ebce77547..9c41dda4ae0dead1b5290d149630eaf803aa1e0b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -97,6 +97,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     public final com.tuinity.tuinity.config.TuinityConfig.WorldConfig tuinityConfig; // Tuinity - Server Config
     public final net.pl3x.purpur.PurpurWorldConfig purpurConfig; // Purpur
     public final de.minebench.origami.OrigamiConfig.WorldConfig origamiConfig; // Origami - World config
+    public final me.fluse1367.entitytracking.EntityTrackingConfig.WorldConfig entityTrackingConfig; // Entity Tracking
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPosition lastPhysicsProblem; // Spigot
@@ -159,6 +160,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         this.tuinityConfig = new com.tuinity.tuinity.config.TuinityConfig.WorldConfig(((WorldDataServer)worlddatamutable).getName()); // Tuinity - Server Config
         this.purpurConfig = new net.pl3x.purpur.PurpurWorldConfig((((WorldDataServer)worlddatamutable).getName())); // Purpur
         this.origamiConfig = new de.minebench.origami.OrigamiConfig.WorldConfig(((WorldDataServer)worlddatamutable).getName()); // Origami
+        this.entityTrackingConfig = new me.fluse1367.entitytracking.EntityTrackingConfig.WorldConfig(((WorldDataServer)worlddatamutable).getName()); // Entity Tracking Config
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this, executor) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 201d84401114864ab2f9665bda3fe09c30cc7107..2ab0206b1dcffd824fd3c8f742d29ea3495f2181 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -865,6 +865,7 @@ public final class CraftServer implements Server {
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
         de.minebench.origami.OrigamiConfig.init((File) console.options.valueOf("origami-settings")); // Origami
         org.yatopiamc.yatopia.server.YatopiaConfig.init((File) console.options.valueOf("yatopia-settings")); // Yatopia
+        me.fluse1367.entitytracking.EntityTrackingConfig.init((File) console.options.valueOf("entity-tracking-settings")); // Entity Tracking
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -902,6 +903,7 @@ public final class CraftServer implements Server {
             world.tuinityConfig.init(); // Tuinity - Server Config
             world.purpurConfig.init(); // Purpur
             world.origamiConfig.init(); // Origami
+            world.entityTrackingConfig.init(); // Entity Tracking
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 605b7477dfce17c5d9752fd48a71098739e3f4c2..eab84ecefa80ae575b84fd33cec87d68e104e167 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -170,6 +170,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Yatopia end
 
+                // Entity Tracking start
+                acceptsAll(asList("entity-tracking", "entity-tracking-settings"), "File for entity tracking settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("entity-trackings.yml"))
+                        .describedAs("Yml file");
+                // Entity Tracking end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
index 5cfe16ef8c5a7b4405efa58b8fc532e14353f88d..69bc9085bc37e1f2b1b43facb6cfe46f1f8649fd 100644
--- a/src/main/java/org/spigotmc/TrackingRange.java
+++ b/src/main/java/org/spigotmc/TrackingRange.java
@@ -10,6 +10,8 @@ import net.minecraft.server.EntityItemFrame;
 import net.minecraft.server.EntityPainting;
 import net.minecraft.server.EntityPlayer;
 
+import java.util.Optional;
+
 public class TrackingRange
 {
 
@@ -23,6 +25,12 @@ public class TrackingRange
      */
     public static int getEntityTrackingRange(Entity entity, int defaultRange)
     {
+        // Entity Tracking start
+        Optional<Integer> range = me.fluse1367.entitytracking.TrackingRange.getTrackingRange(entity);
+        if (range.isPresent())
+            return range.get();
+        // Entity Tracking end
+
         if (entity instanceof EntityEnderDragon) return defaultRange; // Paper - enderdragon is exempt
         SpigotWorldConfig config = entity.world.spigotConfig;
         if ( entity instanceof EntityPlayer )
