From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivan Pekov <ivan@mrivanplays.com>
Date: Tue, 6 Oct 2020 15:10:12 +0300
Subject: [PATCH] Optimize advancement loading

Removed some object allocations and reduced loops

diff --git a/src/main/java/net/minecraft/advancements/Advancement.java b/src/main/java/net/minecraft/advancements/Advancement.java
index 97479cacc2a3f7850df8647f78d7dbb5710ae27b..59cbb085bad5ab4d98d2a196c9b15dc58ce6d9df 100644
--- a/src/main/java/net/minecraft/advancements/Advancement.java
+++ b/src/main/java/net/minecraft/advancements/Advancement.java
@@ -81,6 +81,7 @@ public class Advancement {
         return this.display;
     }
 
+    public final AdvancementRewards getRewards() { return d(); } // Yatopia - OBFHELPER
     public AdvancementRewards d() {
         return this.rewards;
     }
diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index b81a0e1c3ff3d749b6bbd9efdbc7823d1c631b8e..3185d89d97823e85d2c3eb5236eb85f4e40b6067 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -179,11 +179,16 @@ public class AdvancementDataPlayer {
                         throw new JsonParseException("Found null for advancements");
                     }
 
+                    /* // Yatopia start - streams no good
                     Stream<Entry<MinecraftKey, AdvancementProgress>> stream = map.entrySet().stream().sorted(Comparator.comparing(Entry::getValue));
                     Iterator iterator = ((List) stream.collect(Collectors.toList())).iterator();
 
                     while (iterator.hasNext()) {
                         Entry<MinecraftKey, AdvancementProgress> entry = (Entry) iterator.next();
+                     */
+                    Entry<MinecraftKey, AdvancementProgress>[] entries = map.entrySet().toArray(new Entry[0]);
+                    java.util.Arrays.sort(entries, Entry.comparingByValue());
+                    for (Entry<MinecraftKey, AdvancementProgress> entry : entries) { // Yatopia end
                         Advancement advancement = advancementdataworld.a((MinecraftKey) entry.getKey());
 
                         if (advancement == null) {
@@ -221,11 +226,37 @@ public class AdvancementDataPlayer {
             }
         }
 
+        /* // Yatopia start
         this.c(advancementdataworld);
         this.c();
         this.b(advancementdataworld);
+         */
+        loadAdvancements(advancementdataworld);
+        // Yatopia end
     }
 
+    // Yatopia start - reduce overload by post io load of advancements
+    // this combines c(AdvancementDataWorld), c() and b(AdvancementDataWorld) into 1 method
+    // the changes done: loops thru all the advancements only once, does not create an additional list
+    // and does not loop thru the additional list, does not create an additional set when checking for progress and
+    // does not additionally loop thru it
+    private void loadAdvancements(AdvancementDataWorld serverAdvancementManager) {
+        for (Advancement advancement : serverAdvancementManager.getAdvancements()) {
+            if (advancement.getCriteria().isEmpty()) {
+                grantCriteria(advancement, "");
+                advancement.getRewards().a(player); // todo: too lazy to import AdvancementRewards for an obfhelper
+            }
+            AdvancementProgress progress = getProgress(advancement);
+            if (progress.isDone()) {
+                this.j.add(advancement);
+                updateVisibility(advancement);
+                continue; // Do not double check isDone
+            }
+            beginTrackingNoIsDone(advancement, progress);
+        }
+    }
+    // Yatopia end
+
     public void b() {
         if (org.spigotmc.SpigotConfig.disableAdvancementSaving) return; // Spigot
         Map<MinecraftKey, AdvancementProgress> map = Maps.newHashMap();
@@ -357,6 +388,11 @@ public class AdvancementDataPlayer {
         AdvancementProgress advancementprogress = this.getProgress(advancement);
 
         if (!advancementprogress.isDone()) {
+            // Yatopia start - beginTrackig with no isDone check
+            beginTrackingNoIsDone(advancement, advancementprogress);
+        }
+    }
+    private void beginTrackingNoIsDone(Advancement advancement, AdvancementProgress advancementprogress) {
             Iterator iterator = advancement.getCriteria().entrySet().iterator();
 
             while (iterator.hasNext()) {
@@ -376,7 +412,7 @@ public class AdvancementDataPlayer {
                 }
             }
 
-        }
+        //} // Yatopia end
     }
 
     private void d(Advancement advancement) {
@@ -471,6 +507,7 @@ public class AdvancementDataPlayer {
         this.data.put(advancement, advancementprogress);
     }
 
+    private final void updateVisibility(Advancement advancement) { e(advancement); } // Yatopia
     private void e(Advancement advancement) {
         // Paper start
         e(advancement, IterationEntryPoint.ROOT);
