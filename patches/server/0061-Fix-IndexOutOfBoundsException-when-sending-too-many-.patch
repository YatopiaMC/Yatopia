From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivan Pekov <ivan@mrivanplays.com>
Date: Tue, 29 Sep 2020 19:25:49 +0300
Subject: [PATCH] Fix IndexOutOfBoundsException when sending too many changes


diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index f43193c1090238f2241b878120247d1b3d0d4e57..a7783944e8e4ee2a164aa19b3cc342252bc84ee2 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -182,6 +182,7 @@ public class PacketDataSerializer extends ByteBuf {
         return i;
     }
 
+    public final long readVarLong() { return j(); } // Yatopia - OBFHELPER
     public long j() {
         long i = 0L;
         int j = 0;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
index f260459d70053ffd17952aebf3e0410666f9bcd0..e99385bce0967c9bc3917986c5bb8b3829f45366 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
@@ -17,6 +17,8 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
     public PacketPlayOutMultiBlockChange(SectionPosition sectionposition, ShortSet shortset, ChunkSection chunksection, boolean flag) {
         this.a = sectionposition;
         this.d = flag;
+        // Yatopia start - replace logic
+        /*
         this.a(shortset.size());
         int i = 0;
 
@@ -26,12 +28,29 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
             this.b[i] = short0;
             this.c[i] = (chunksection != null) ? chunksection.getType(SectionPosition.a(short0), SectionPosition.b(short0), SectionPosition.c(short0)) : Blocks.AIR.getBlockData(); // CraftBukkit - SPIGOT-6076, Mojang bug when empty chunk section notified
         }
+         */
+        short[] shortArray = shortset.toShortArray();
+        b = new short[shortset.size()];
+        c = new IBlockData[shortset.size()];
+        for (int i = 0; i < shortArray.length; i++) {
+            short s = shortArray[i];
+            b[i] = s;
+            if (chunksection != null) {
+                c[i] = chunksection.getType(SectionPosition.a(s), SectionPosition.b(s), SectionPosition.c(s));
+            } else {
+                c[i] = Blocks.AIR.getBlockData();
+            }
+        }
+        // Yatopia end
 
     }
 
+
     private void a(int i) {
+        /* // Yatopia start
         this.b = new short[i];
         this.c = new IBlockData[i];
+         */ // Yatopia end
     }
 
     @Override
@@ -40,6 +59,8 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
         this.d = packetdataserializer.readBoolean();
         int i = packetdataserializer.i();
 
+        // Yatopia start - replaced logic
+        /*
         this.a(i);
 
         for (int j = 0; j < this.b.length; ++j) {
@@ -48,6 +69,15 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
             this.b[j] = (short) ((int) (k & 4095L));
             this.c[j] = (IBlockData) Block.REGISTRY_ID.fromId((int) (k >>> 12));
         }
+         */
+        b = new short[i];
+        c = new IBlockData[i];
+        for (int j = 0; j < i; j++) {
+            long k = packetdataserializer.readVarLong();
+            b[j] = (short) ((int) (k & 4095L));
+            c[j] = Block.REGISTRY_ID.fromId((int) (k >>> 12));
+        }
+        // Yatopia end
 
     }
 
