From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: tr7zw <tr7zw@live.de>
Date: Fri, 31 Jul 2020 21:25:13 -0500
Subject: [PATCH] Add option for only players to have collisions with


diff --git a/src/main/java/de/tr7zw/yapfa/YapfaConfig.java b/src/main/java/de/tr7zw/yapfa/YapfaConfig.java
index e63d54b5179fe518536431e4d48c829b44b16013..03bde517b6077ebeac0cce55de9e86d731ea17fa 100644
--- a/src/main/java/de/tr7zw/yapfa/YapfaConfig.java
+++ b/src/main/java/de/tr7zw/yapfa/YapfaConfig.java
@@ -206,4 +206,8 @@ public class YapfaConfig {
 	disableEntityCollisionboxes = getBoolean("settings.disableEntityCollisionboxes", false);
     }
 
+    public static boolean onlyPlayerCollisions = false;
+    private static void onlyPlayerCollisions() {
+        onlyPlayerCollisions = getBoolean("settings.onlyPlayerCollisions", false);
+        }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index d0842b0f140a1a9ced9fe69f732db9ad4e554c7b..51edae7ae89738de5b6507363df2017ceb86ec62 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -2835,40 +2835,46 @@ public abstract class EntityLiving extends Entity {
         if (i <= 0 && world.paperConfig.maxCollisionsPerEntity <= 0) {
             return;
         }
-        // Paper - end don't run getEntities if we're not going to use its result
+        // Tuinity - end don't run getEntities if we're not going to use its result
+	// YAPFA start
         // Tuinity start - reduce memory allocation from collideNearby
         List<Entity> list = com.tuinity.tuinity.util.CachedLists.getTempGetEntitiesList();
-        this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this), list);
         try {
-        // Tuinity end - reduce memory allocation from collideNearby
-
-        if (!list.isEmpty()) {
-            // Paper - move up
-            int j;
-
-            if (i > 0 && list.size() > i - 1 && this.random.nextInt(4) == 0) {
-                j = 0;
-
-                for (int k = 0; k < list.size(); ++k) {
-                    if (!((Entity) list.get(k)).isPassenger()) {
-                        ++j;
-                    }
-                }
-
-                if (j > i - 1) {
-                    this.damageEntity(DamageSource.CRAMMING, 6.0F);
-                }
-            }
-
-            numCollisions = Math.max(0, numCollisions - world.paperConfig.maxCollisionsPerEntity); // Paper
-            for (j = 0; j < list.size() && numCollisions < world.paperConfig.maxCollisionsPerEntity; ++j) { // Paper
-                Entity entity = (Entity) list.get(j);
-                entity.numCollisions++; // Paper
-                numCollisions++; // Paper
-
-                this.C(entity);
-            }
-        }
+	        if(de.tr7zw.yapfa.YapfaConfig.onlyPlayerCollisions) {
+	            this.world.getEntities(this, this.getBoundingBox(), entity -> entity.getEntityType() == EntityTypes.PLAYER, list);
+	        } else {
+	            this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this), list);
+	        }
+	        // Tuinity end - reduce memory allocation from collideNearby
+	        // YAPFA end
+
+	        if (!list.isEmpty()) {
+	            // Paper - move up
+	            int j;
+
+	            if (i > 0 && list.size() > i - 1 && this.random.nextInt(4) == 0) {
+	                j = 0;
+
+	                for (int k = 0; k < list.size(); ++k) {
+	                    if (!((Entity) list.get(k)).isPassenger()) {
+	                        ++j;
+	                    }
+	                }
+
+	                if (j > i - 1) {
+	                    this.damageEntity(DamageSource.CRAMMING, 6.0F);
+	                }
+	            }
+
+	            numCollisions = Math.max(0, numCollisions - world.paperConfig.maxCollisionsPerEntity); // Paper
+	            for (j = 0; j < list.size() && numCollisions < world.paperConfig.maxCollisionsPerEntity; ++j) { // Paper
+	                Entity entity = (Entity) list.get(j);
+	                entity.numCollisions++; // Paper
+	                numCollisions++; // Paper
+
+	                this.C(entity);
+	            }
+	        }
         } finally { // Tuinity start - reduce memory allocation from collideNearby
             com.tuinity.tuinity.util.CachedLists.returnTempGetEntitiesList(list);
         } // Tuinity end - reduce memory allocation from collideNearby
