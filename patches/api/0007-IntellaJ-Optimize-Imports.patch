From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bud Gidiere <sgidiere@gmail.com>
Date: Sat, 8 Aug 2020 18:11:46 -0500
Subject: [PATCH] IntellaJ Optimize Imports

Do not try to update this. Just rebuild it.

diff --git a/src/main/java/co/aikar/timings/FullServerTickHandler.java b/src/main/java/co/aikar/timings/FullServerTickHandler.java
index dfaa266ff53e43ad48dc5a5a5657fe70600f539a..6a7276d37a903a3254bf02864ebdaa6cad41fba8 100644
--- a/src/main/java/co/aikar/timings/FullServerTickHandler.java
+++ b/src/main/java/co/aikar/timings/FullServerTickHandler.java
@@ -1,10 +1,10 @@
 package co.aikar.timings;
 
-import static co.aikar.timings.TimingsManager.*;
-
 import org.bukkit.Bukkit;
 import org.jetbrains.annotations.NotNull;
 
+import static co.aikar.timings.TimingsManager.*;
+
 public class FullServerTickHandler extends TimingHandler {
     private static final TimingIdentifier IDENTITY = new TimingIdentifier("Minecraft", "Full Server Tick", null);
     final TimingData minuteData;
diff --git a/src/main/java/co/aikar/timings/TimedEventExecutor.java b/src/main/java/co/aikar/timings/TimedEventExecutor.java
index 4e6e1b8e8aeb07e34536941d2cbfc25e5cfa6c27..c23ba7dac929662ebe58bf7fd8376c9a13629082 100644
--- a/src/main/java/co/aikar/timings/TimedEventExecutor.java
+++ b/src/main/java/co/aikar/timings/TimedEventExecutor.java
@@ -29,11 +29,11 @@ import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
 import org.bukkit.plugin.EventExecutor;
 import org.bukkit.plugin.Plugin;
-
-import java.lang.reflect.Method;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.reflect.Method;
+
 public class TimedEventExecutor implements EventExecutor {
 
     private final EventExecutor executor;
diff --git a/src/main/java/co/aikar/timings/TimingData.java b/src/main/java/co/aikar/timings/TimingData.java
index a5d13a1e44edb861f45c83a9b4309fbf799d407d..3ae8a7f792d26d6daaf8687c8e99d38dbb9480a2 100644
--- a/src/main/java/co/aikar/timings/TimingData.java
+++ b/src/main/java/co/aikar/timings/TimingData.java
@@ -23,9 +23,10 @@
  */
 package co.aikar.timings;
 
-import java.util.List;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 import static co.aikar.util.JSONUtil.toArray;
 
 /**
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 199789d56d22fcb1b77ebd56805cc28aa5a5ab0a..cf0c249edf83e80aaa98d230abfc4866c0412f51 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -25,6 +25,9 @@ package co.aikar.timings;
 
 import co.aikar.util.LoadingIntMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayDeque;
 import java.util.Deque;
@@ -32,10 +35,6 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.bukkit.Bukkit;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
 class TimingHandler implements Timing {
 
     private static AtomicInteger idPool = new AtomicInteger(1);
diff --git a/src/main/java/co/aikar/timings/TimingHistory.java b/src/main/java/co/aikar/timings/TimingHistory.java
index 203cda0f9a4dea4f28a21ea9ee8db7a7369842e3..6460637a354c8b39401e03ec2ac76db27e7ea2cb 100644
--- a/src/main/java/co/aikar/timings/TimingHistory.java
+++ b/src/main/java/co/aikar/timings/TimingHistory.java
@@ -24,6 +24,8 @@
 package co.aikar.timings;
 
 import co.aikar.timings.TimingHistory.RegionData.RegionId;
+import co.aikar.util.LoadingMap;
+import co.aikar.util.MRUMapCache;
 import com.google.common.base.Function;
 import com.google.common.collect.Sets;
 import org.bukkit.Bukkit;
@@ -34,18 +36,12 @@ import org.bukkit.block.BlockState;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
-import co.aikar.util.LoadingMap;
-import co.aikar.util.MRUMapCache;
-
-import java.lang.management.ManagementFactory;
-import java.util.Collection;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.management.ManagementFactory;
+import java.util.*;
+
 import static co.aikar.timings.TimingsManager.FULL_SERVER_TICK;
 import static co.aikar.timings.TimingsManager.MINUTE_REPORTS;
 import static co.aikar.util.JSONUtil.*;
diff --git a/src/main/java/co/aikar/timings/TimingHistoryEntry.java b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
index 86d5ac6bd0d7d0003688761aceb3f3343575319f..ba61030cb48a17b19f7cd87940825b4bbb455b6c 100644
--- a/src/main/java/co/aikar/timings/TimingHistoryEntry.java
+++ b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
@@ -24,9 +24,9 @@
 package co.aikar.timings;
 
 import com.google.common.base.Function;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.List;
-import org.jetbrains.annotations.NotNull;
 
 import static co.aikar.util.JSONUtil.toArrayMapper;
 
diff --git a/src/main/java/co/aikar/timings/TimingIdentifier.java b/src/main/java/co/aikar/timings/TimingIdentifier.java
index df142a89b8c43acb81eb383eac0ef048a1f49a6e..73b21cce092a694dfb8240e2bccd38c576f63bd4 100644
--- a/src/main/java/co/aikar/timings/TimingIdentifier.java
+++ b/src/main/java/co/aikar/timings/TimingIdentifier.java
@@ -24,16 +24,12 @@
 package co.aikar.timings;
 
 import co.aikar.util.LoadingMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
+import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * <p>Used as a basis for fast HashMap key comparisons for the Timing Map.</p>
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index da76e1aaee1dee794e38ddd4e0a28e0071e90bbf..e8e33d9e4b743084e881bb53d0e6d12394bede22 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -30,12 +30,12 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.command.CommandSender;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.List;
 import java.util.Queue;
 import java.util.logging.Level;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 @SuppressWarnings({"UnusedDeclaration", "WeakerAccess", "SameParameterValue"})
 public final class Timings {
diff --git a/src/main/java/co/aikar/timings/TimingsCommand.java b/src/main/java/co/aikar/timings/TimingsCommand.java
index f7c2245a310a084367ff25db539b3c967d5cb141..07a1e449b8b205e3285daa2c3223a87a30c2a912 100644
--- a/src/main/java/co/aikar/timings/TimingsCommand.java
+++ b/src/main/java/co/aikar/timings/TimingsCommand.java
@@ -29,11 +29,10 @@ import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.defaults.BukkitCommand;
 import org.bukkit.util.StringUtil;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.ArrayList;
 import java.util.List;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 
 public class TimingsCommand extends BukkitCommand {
diff --git a/src/main/java/co/aikar/timings/TimingsManager.java b/src/main/java/co/aikar/timings/TimingsManager.java
index ef824d701c97cad8b31e76ad98c94fc4367a7eda..bdc419426588f7b8b31370c4e4f62f0b4893626f 100644
--- a/src/main/java/co/aikar/timings/TimingsManager.java
+++ b/src/main/java/co/aikar/timings/TimingsManager.java
@@ -30,15 +30,14 @@ import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.java.PluginClassLoader;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Level;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public final class TimingsManager {
     static final Map<TimingIdentifier, TimingHandler> TIMING_MAP = LoadingMap.of(
diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java
index 8c49d67e2656dcac0758c0908897736b49435bf8..b990887db3a96193ba24d065ef667916e69a7b47 100644
--- a/src/main/java/co/aikar/timings/TimingsReportListener.java
+++ b/src/main/java/co/aikar/timings/TimingsReportListener.java
@@ -7,11 +7,11 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.command.MessageCommandSender;
 import org.bukkit.command.RemoteConsoleCommandSender;
-
-import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 @SuppressWarnings("WeakerAccess")
 public class TimingsReportListener implements MessageCommandSender {
     private final List<CommandSender> senders;
diff --git a/src/main/java/co/aikar/util/Counter.java b/src/main/java/co/aikar/util/Counter.java
index 80155072d1004e34e04342d434cf7d75f0b7e29d..ecc5ec682f888374fb6216ff9844934a47bfcd46 100644
--- a/src/main/java/co/aikar/util/Counter.java
+++ b/src/main/java/co/aikar/util/Counter.java
@@ -1,11 +1,11 @@
 package co.aikar.util;
 
 import com.google.common.collect.ForwardingMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.HashMap;
 import java.util.Map;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public class Counter <T> extends ForwardingMap<T, Long> {
     private final Map<T, Long> counts = new HashMap<>();
diff --git a/src/main/java/co/aikar/util/JSONUtil.java b/src/main/java/co/aikar/util/JSONUtil.java
index 190bf0598442c89c2a1c93ad7c8c1a29797304ae..7b0cf8a89d65f175df47a7dff0aa800ef91bc95c 100644
--- a/src/main/java/co/aikar/util/JSONUtil.java
+++ b/src/main/java/co/aikar/util/JSONUtil.java
@@ -5,10 +5,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.json.simple.JSONArray;
-import org.json.simple.JSONObject;
 
-import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
diff --git a/src/main/java/co/aikar/util/LoadingMap.java b/src/main/java/co/aikar/util/LoadingMap.java
index aedbb03321886cb267879d7994653e447b485f6a..43b2c68faa3fe379e4554d5f4d427795bfdb2673 100644
--- a/src/main/java/co/aikar/util/LoadingMap.java
+++ b/src/main/java/co/aikar/util/LoadingMap.java
@@ -23,18 +23,13 @@
  */
 package co.aikar.util;
 
-import com.google.common.base.Preconditions;
-import java.lang.reflect.Constructor;
-import java.util.AbstractMap;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.IdentityHashMap;
-import java.util.Map;
-import java.util.Set;
-import java.util.function.Function;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.reflect.Constructor;
+import java.util.*;
+import java.util.function.Function;
+
 /**
  * Allows you to pass a Loader function that when a key is accessed that doesn't exists,
  * automatically loads the entry into the map by calling the loader Function.
diff --git a/src/main/java/co/aikar/util/MRUMapCache.java b/src/main/java/co/aikar/util/MRUMapCache.java
index 5989ee21297935651b0edd44b8239e655eaef1d9..40aebdd0cc726a26c5ef1b486d05c4f2f022cdb9 100644
--- a/src/main/java/co/aikar/util/MRUMapCache.java
+++ b/src/main/java/co/aikar/util/MRUMapCache.java
@@ -23,12 +23,13 @@
  */
 package co.aikar.util;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.AbstractMap;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Implements a Most Recently Used cache in front of a backing map, to quickly access the last accessed result.
diff --git a/src/main/java/com/destroystokyo/paper/ClientOption.java b/src/main/java/com/destroystokyo/paper/ClientOption.java
index 9dad814cf51bc59ec5dfbf14474fea6557de38aa..266f19d5c1cae13d7aac8b20cc169348a43026c1 100644
--- a/src/main/java/com/destroystokyo/paper/ClientOption.java
+++ b/src/main/java/com/destroystokyo/paper/ClientOption.java
@@ -1,8 +1,7 @@
 package com.destroystokyo.paper;
 
-import org.jetbrains.annotations.NotNull;
-
 import org.bukkit.inventory.MainHand;
+import org.jetbrains.annotations.NotNull;
 
 public final class ClientOption<T> {
 
diff --git a/src/main/java/com/destroystokyo/paper/HeightmapType.java b/src/main/java/com/destroystokyo/paper/HeightmapType.java
index 709e44ea1b14ab6917501c928e689cc6cbdf4bb4..f7ab13cd5f34928a4534366291f9b0f8a0f54309 100644
--- a/src/main/java/com/destroystokyo/paper/HeightmapType.java
+++ b/src/main/java/com/destroystokyo/paper/HeightmapType.java
@@ -1,6 +1,8 @@
 package com.destroystokyo.paper;
 
-import org.bukkit.*;
+import org.bukkit.HeightMap;
+import org.bukkit.Location;
+import org.bukkit.World;
 
 /**
  * Enumeration of different heightmap types maintained by the server. Generally using these maps is much faster
diff --git a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
index 53c36e30e8f500c9bf58e6b12585d44cc5c9e9e2..551598e2869607c4008a15d63a71895214863502 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
@@ -13,6 +13,8 @@ import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -21,8 +23,6 @@ import java.util.Set;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public class MaterialSetTag implements Tag<Material> {
 
diff --git a/src/main/java/com/destroystokyo/paper/NamespacedTag.java b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
index 28f3fda950999a9c964a3608042ca60567ae1d6a..edff8763a3e1612b3e046176b88c6d716910c773 100644
--- a/src/main/java/com/destroystokyo/paper/NamespacedTag.java
+++ b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
@@ -1,11 +1,12 @@
 package com.destroystokyo.paper;
 
 import com.google.common.base.Preconditions;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Locale;
 import java.util.UUID;
 import java.util.regex.Pattern;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a String based key pertaining to a tagged entry. Consists of two components - a namespace
diff --git a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
index 06f1602f5b327705f726d0a99dd6b95e1554d382..d5d2fa20ed54e4989d0120c9239d3b54b7985a3b 100644
--- a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
+++ b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
@@ -7,11 +7,11 @@ import org.bukkit.Particle;
 import org.bukkit.World;
 import org.bukkit.entity.Player;
 import org.bukkit.util.NumberConversions;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Collection;
 import java.util.List;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Helps prepare a particle to be sent to players.
diff --git a/src/main/java/com/destroystokyo/paper/Title.java b/src/main/java/com/destroystokyo/paper/Title.java
index 4fe18540f77143ee7cd7e94d3aa279ae744289e4..edb162532a1e958e95f7142150fe0a0208f4aaac 100644
--- a/src/main/java/com/destroystokyo/paper/Title.java
+++ b/src/main/java/com/destroystokyo/paper/Title.java
@@ -2,14 +2,11 @@ package com.destroystokyo.paper;
 
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
-
 import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import static com.google.common.base.Preconditions.checkArgument;
-import static com.google.common.base.Preconditions.checkNotNull;
-import static com.google.common.base.Preconditions.checkState;
+import static com.google.common.base.Preconditions.*;
 
 /**
  * Represents a title to may be sent to a {@link Player}.
diff --git a/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java b/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
index e2a6f9c3881ff9d7373ac30e60009200432555aa..b4df01be1c0b81331b1472070b6cdae65d1bbe40 100644
--- a/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
+++ b/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
@@ -3,11 +3,11 @@ package com.destroystokyo.paper.entity;
 import org.bukkit.Location;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Mob;
-
-import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Handles pathfinding operations for an Entity
  */
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/Goal.java b/src/main/java/com/destroystokyo/paper/entity/ai/Goal.java
index c57c5416c88e2070a082403ab0dda9d7f08d2a57..ffe307d1159d16d595fac6cee829cfabdddde75a 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/Goal.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/Goal.java
@@ -1,11 +1,10 @@
 package com.destroystokyo.paper.entity.ai;
 
+import org.bukkit.entity.Mob;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.EnumSet;
 
-import org.bukkit.entity.Mob;
-
 /**
  * Represents an AI goal of an entity
  */
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
index 9cd98c6fcfa3eb439d9013ef76ef4661175a0e5a..9e1bea85d467af759ce19bc4e8841c80810ebb00 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
@@ -1,14 +1,12 @@
 package com.destroystokyo.paper.entity.ai;
 
 import com.google.common.base.Objects;
-
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Mob;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.StringJoiner;
 
-import org.bukkit.NamespacedKey;
-import org.bukkit.entity.Mob;
-
 /**
  *
  * Used to identify a Goal. Consists of a {@link NamespacedKey} and the type of mob the goal can be applied to
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoals.java b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoals.java
index e21f7574763dd4f13794f91bbef192ef66a8f5e9..50049eddf64cb559da852272d177c03c62685050 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoals.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoals.java
@@ -1,12 +1,11 @@
 package com.destroystokyo.paper.entity.ai;
 
+import org.bukkit.entity.Mob;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.Collection;
 
-import org.bukkit.entity.Mob;
-
 /**
  * Represents a part of the "brain" of a mob. It tracks all tasks (running or not), allows adding and removing goals
  */
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java b/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java
index d7f1b2c84aebe8ed04084b9249ed08d5e52a6ecd..9824514ab806669405e0a6d168027d22100a3e4c 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/VanillaGoal.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.entity.ai;
 
 import com.destroystokyo.paper.entity.RangedEntity;
-
 import org.bukkit.NamespacedKey;
 import org.bukkit.entity.*;
 
diff --git a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
index 1cc9ef255df888cb7dd7f7f2c5014e818d1be613..d94fe15ecebbf9ad2fe711c8c3c81ccdcbf641d0 100644
--- a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
+++ b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
@@ -1,9 +1,10 @@
 package com.destroystokyo.paper.entity.villager;
 
 import com.google.common.base.Preconditions;
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * A reputation score for a player on a villager.
  */
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
index 118c7b6772a52c250649af2a9286f483f43da385..87c79e7e60ebd288ad2b097d9bbaca243b525745 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
@@ -6,11 +6,11 @@ import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
-
-import java.util.Collection;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+
 /**
  * Fired when a DragonFireball collides with a block/entity and spawns an AreaEffectCloud
  */
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
index f530a3d9314e17d1da896cac633f6a422258d9a9..84ee5904b450d0b7e024039875d8a18cf10b03aa 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
@@ -24,10 +24,8 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Enderman;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
index 806112a8b5a7ce31166675f5b074ceaf42e364b6..bed4727417f57337b1f2f5b09e3c7efbbc01e635 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
@@ -1,9 +1,7 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Enderman;
-import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
index 07660202e41ee86f1b66bad3335cf6fe126e7f9c..a8c4c1cee9ed97523458e21995dd2a87818c4ca7 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Entity;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
index e5dbbd660409bae0d3b96e83390511d3a423a52e..d23773d9013bfa4da085b91669e39768fb6e8800 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Entity;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
index 3b725a489008d333630af166d2be5fc48168a6b9..ed3a6e3280f1bcfc8bd6d03b3b3b5c14ba164f9d 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
@@ -5,11 +5,10 @@ import org.bukkit.entity.Entity;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
-import org.bukkit.event.entity.EntityEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Collections;
-import org.jetbrains.annotations.NotNull;
 
 /**
  *  Fired when lightning strikes an entity
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
index 112a0dbf522b8e74ce882678434923814e6b187f..1a89870e118aae3fd7c0b7f218c14f51083d1946 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
@@ -2,7 +2,6 @@ package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
index 5b28e9b1daba7834af67dbc193dd656bedd9a994..80d5c32d40ad75b95d842c90e73ebcc00bbeb8fe 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -1,9 +1,5 @@
 package com.destroystokyo.paper.event.executor;
 
-import java.lang.invoke.MethodHandle;
-import java.lang.invoke.MethodHandles;
-import java.lang.reflect.Method;
-
 import com.destroystokyo.paper.util.SneakyThrow;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
@@ -11,6 +7,10 @@ import org.bukkit.event.Listener;
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.reflect.Method;
+
 public class MethodHandleEventExecutor implements EventExecutor {
     private final Class<? extends Event> eventClass;
     private final MethodHandle handle;
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
index c83672427324bd068ed52916f700b68446a226f6..e7e7c039366f8871ea5dee92de5a40d03048e967 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -1,20 +1,18 @@
 package com.destroystokyo.paper.event.executor;
 
-import java.lang.invoke.MethodHandle;
-import java.lang.invoke.MethodHandles;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-
 import com.destroystokyo.paper.util.SneakyThrow;
 import com.google.common.base.Preconditions;
-
-import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
 public class StaticMethodHandleEventExecutor implements EventExecutor {
     private final Class<? extends Event> eventClass;
     private final MethodHandle handle;
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
index b6e7d8ee8d903ebf975d60bec0e08603d9a49fdb..59680263ad4520deccfdb2d5209450df2e4f7bff 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -1,14 +1,14 @@
 package com.destroystokyo.paper.event.executor.asm;
 
-import java.lang.reflect.Method;
-import java.util.concurrent.atomic.AtomicInteger;
-
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.commons.GeneratorAdapter;
 
+import java.lang.reflect.Method;
+import java.util.concurrent.atomic.AtomicInteger;
+
 import static org.objectweb.asm.Opcodes.*;
 
 public class ASMEventExecutorGenerator {
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
index beed9e6e07a9080f1c059e08220839090553d0a4..f79685b48bb581277a6891927988b6f7a4389dc4 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
@@ -1,6 +1,5 @@
 package com.destroystokyo.paper.event.executor.asm;
 
-import com.destroystokyo.paper.utils.UnsafeUtils;
 import org.jetbrains.annotations.NotNull;
 
 public interface ClassDefiner {
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
index ac99477e9f2c08041aeff31abc1d1edee58d0a67..b5da4610e08ee9b07845fd31a25052cef4d56c28 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
@@ -1,13 +1,10 @@
 package com.destroystokyo.paper.event.executor.asm;
 
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-
 import com.google.common.base.Preconditions;
-
 import com.google.common.collect.MapMaker;
 import org.jetbrains.annotations.NotNull;
-import org.objectweb.asm.Type;
+
+import java.util.concurrent.ConcurrentMap;
 
 public class SafeClassDefiner implements ClassDefiner {
     /* default */ static final SafeClassDefiner INSTANCE = new SafeClassDefiner();
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
index 449e8c06f8434b59d49a76481fa60c5c49e80579..7a144854ec8998e758bf2327d30d8165fbf39e0f 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
@@ -1,7 +1,5 @@
 package com.destroystokyo.paper.event.inventory;
 
-import org.bukkit.event.HandlerList;
-import org.bukkit.event.inventory.InventoryEvent;
 import org.bukkit.inventory.GrindstoneInventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
index 045ce9ec3c9134aced5f5235b760ac85599d16c6..d8da8903d28ad715e0768fa5c58906540762ca0e 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
@@ -2,7 +2,6 @@ package com.destroystokyo.paper.event.inventory;
 
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.inventory.InventoryEvent;
-import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
index 2827a100275f8e1316b5d06c14662d41ca1bd5fa..15271e14fae0140d23fed672895555299c88cd17 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
@@ -5,13 +5,13 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import static org.bukkit.Material.*;
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
index f7f171c4ee0b8339b2f8fbe82442d65f17202f28..be9201fd83ab274b34cd933e5158c4de96491675 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
@@ -3,13 +3,11 @@ package com.destroystokyo.paper.event.player;
 import com.destroystokyo.paper.ClientOption;
 import com.destroystokyo.paper.ClientOption.ChatVisibility;
 import com.destroystokyo.paper.SkinParts;
-
-import org.jetbrains.annotations.NotNull;
-
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.inventory.MainHand;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Called when the player changes his client settings
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java
index 12c1c6fe9dc8dc5f5faf6dcf99f6857219ef22b8..aa3576d746f2add8887e3b3aee0e265c232600d3 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerConnectionCloseEvent.java
@@ -2,10 +2,10 @@ package com.destroystokyo.paper.event.player;
 
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
 
 import java.net.InetAddress;
 import java.util.UUID;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * <p>
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
index f0bb4e31cc25eab2359fa9873bbf960346721701..39cb6d136fe920ee9519f81ecf360f618d29fdd2 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
@@ -4,11 +4,11 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
-
-import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 /**
  * This event is fired during a player handshake.
  *
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
index f7beb22d5105157940b39efe594ace9d4cb153f5..d117956ca6026ad676e1aa551b4f10ca83be0b7e 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
@@ -26,7 +26,6 @@ package com.destroystokyo.paper.event.player;
 import org.bukkit.entity.ExperienceOrb;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
index 5d04a22fd6964d8d44a2aa069c9629722893b1f4..5cf47f7ffd039add8bcdce9e08f52b2fc5aafcc6 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
@@ -25,7 +25,6 @@ package com.destroystokyo.paper.event.player;
 
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
index 71f36e9cae209ec6861835a5e76e018de959040a..1829bddee1e7518bde021b527b39c5f3f4b2e002 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
@@ -27,9 +27,9 @@ import com.destroystokyo.paper.profile.PlayerProfile;
 import com.destroystokyo.paper.profile.ProfileProperty;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Set;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Fired once a profiles additional properties (such as textures) has been filled
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
index 8df37c07cd55ddf110d1dd68183d7b697f7a6756..1666c8e7ed11e8a7af02b202cc7482d5c8db0bd0 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
@@ -4,7 +4,6 @@ import com.destroystokyo.paper.profile.PlayerProfile;
 import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
-
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
index 021bc86310a06f84b39459e0eb8927802726399c..b2af8715bd50f196f88f7f75f473996c23df03f2 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
@@ -27,9 +27,9 @@ import com.destroystokyo.paper.profile.PlayerProfile;
 import com.destroystokyo.paper.profile.ProfileProperty;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Collection;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Fired when the server is requesting to fill in properties of an incomplete profile, such as textures.
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
index 4dcf6242c9acc62d030a94f67b78729ed29f8c85..ed30b291cd5c406779e10b28c10d8577b46cd3a1 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
@@ -1,17 +1,15 @@
 package com.destroystokyo.paper.event.profile;
 
-import com.destroystokyo.paper.profile.PlayerProfile;
 import com.destroystokyo.paper.profile.ProfileProperty;
-import com.google.common.collect.ArrayListMultimap;
 import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.HashSet;
 import java.util.Set;
 import java.util.UUID;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Allows a plugin to intercept a Profile Lookup for a Profile by name
diff --git a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
index 619ed37169c126a8c75d02699a04728bac49d10d..94b1dfe3e4813e58a46360f6b5140c1fbbfa8b82 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
@@ -23,7 +23,6 @@
 
 package com.destroystokyo.paper.event.server;
 
-import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.command.Command;
@@ -31,11 +30,11 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.List;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Allows plugins to compute tab completion results asynchronously. If this event provides completions, then the standard synchronous process will not be fired to populate the results. However, the synchronous TabCompleteEvent will fire with the Async results.
diff --git a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
index 0cc5dd57342c12c0561c2b6ea0f803efb236855e..3e9974795f021aea2a61eb7ca911dbeec7c34b4e 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
@@ -1,7 +1,5 @@
 package com.destroystokyo.paper.event.server;
 
-import static java.util.Objects.requireNonNull;
-
 import com.destroystokyo.paper.network.StatusClient;
 import com.destroystokyo.paper.profile.PlayerProfile;
 import org.bukkit.Bukkit;
@@ -9,16 +7,13 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.util.CachedServerIcon;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.UUID;
-
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+
+import static java.util.Objects.requireNonNull;
+
 /**
  * Extended version of {@link ServerListPingEvent} that allows full control
  * of the response sent to the client.
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
index 2f573299a9a817a98372817a1de8bf641aaca956..fd8f760b7ac8feda03ce5ea663b76b6cb2cf93d6 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
@@ -1,11 +1,10 @@
 package com.destroystokyo.paper.event.server;
 
+import com.destroystokyo.paper.exception.ServerException;
 import com.google.common.base.Preconditions;
-import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
-import com.destroystokyo.paper.exception.ServerException;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
index 410b24139535cd5d8439ad581c43c61b5757fbf6..fc3863b6d93577aa001213d4175e39b7929dc7d0 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
@@ -4,7 +4,7 @@ import org.bukkit.event.Event;
 import org.bukkit.event.Listener;
 import org.bukkit.plugin.Plugin;
 
-import static com.google.common.base.Preconditions.*;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
  * Exception thrown when a server event listener throws an exception
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
index e762ed0dbad51625e65fef2e1898679108459a36..5dbd79cd9a7ec76c1daecd2d77ebc9c0dce9cdd8 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
@@ -1,7 +1,7 @@
 package com.destroystokyo.paper.exception;
 
-import org.bukkit.Bukkit;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import org.bukkit.Bukkit;
 
 /**
  * Thrown when the internal server throws a recoverable exception.
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
index 6defac287d0214fdf99418d979144050cc1e53bc..be3f92e3c6bcefe8b78da701b75121275001882e 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
@@ -1,10 +1,8 @@
 package com.destroystokyo.paper.exception;
 
-import com.google.common.base.Preconditions;
-import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 
-import static com.google.common.base.Preconditions.*;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
  * Wrapper exception for all cases to which a plugin can be immediately blamed for
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
index 89e132525cfae0ce979e37b3e2793df781e47227..f58d9065dd7c39a8e1b70b8ddf20df59e8b4d5c2 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
@@ -3,7 +3,7 @@ package com.destroystokyo.paper.exception;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 
-import static com.google.common.base.Preconditions.*;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 /**
  * Thrown when an incoming plugin message channel throws an exception
diff --git a/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java b/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
index 97815eeb231cf0706b34fa47a4f7d1bb786305b4..3856d438db29a3d142cffdb36c61db71117e0c80 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
@@ -2,11 +2,11 @@ package com.destroystokyo.paper.loottable;
 
 import org.bukkit.entity.Player;
 import org.bukkit.loot.Lootable;
-
-import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 /**
  * Represents an Inventory that contains a Loot Table associated to it that will
  * automatically fill on first open.
diff --git a/src/main/java/com/destroystokyo/paper/network/NetworkClient.java b/src/main/java/com/destroystokyo/paper/network/NetworkClient.java
index 7b2af1bd72dfbcf4e962a982940fc49b851aa04f..f5b3732941ab177096c47796576888c39ebecd66 100644
--- a/src/main/java/com/destroystokyo/paper/network/NetworkClient.java
+++ b/src/main/java/com/destroystokyo/paper/network/NetworkClient.java
@@ -1,10 +1,10 @@
 package com.destroystokyo.paper.network;
 
-import java.net.InetSocketAddress;
-
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.net.InetSocketAddress;
+
 /**
  * Represents a client connected to the server.
  */
diff --git a/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
index 2ef9a7bd55e2c9cf8cb20d5f77282676ae11181f..2a0fbc4e293d7e99f66f8df5124f6aef98d54f6e 100644
--- a/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
@@ -1,10 +1,11 @@
 package com.destroystokyo.paper.profile;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Collection;
 import java.util.Set;
 import java.util.UUID;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents a players profile for the game, such as UUID, Name, and textures.
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
index 7b3b6ef533d32169fbeca389bd61cfc6b0e0faee..c50530a03f689be01b6b1482685a09516a4f4cb9 100644
--- a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
@@ -1,11 +1,11 @@
 package com.destroystokyo.paper.profile;
 
 import com.google.common.base.Preconditions;
-
-import java.util.Objects;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Objects;
+
 /**
  * Represents a property on a {@link PlayerProfile}
  */
diff --git a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
index 5bb677ce585b856b3d3e589e29786a29619c56a7..ccac3221fba1bc18a475402beca232bd7b3141f5 100644
--- a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
+++ b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
@@ -1,10 +1,11 @@
 package com.destroystokyo.paper.utils;
 
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.atomic.LongAdder;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.atomic.LongAdder;
+
 public class CachedSizeConcurrentLinkedQueue<E> extends ConcurrentLinkedQueue<E> {
     private final LongAdder cachedSize = new LongAdder();
 
diff --git a/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java b/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
index 76f2cb9cd99cad2a9484eab2becd8c36f1dd91b3..0e883d852d105180cd1bc82e8deceb8ccaadb58e 100644
--- a/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
+++ b/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
@@ -1,11 +1,11 @@
 package com.destroystokyo.paper.utils;
 
 import org.bukkit.plugin.PluginDescriptionFile;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.logging.Level;
 import java.util.logging.LogManager;
 import java.util.logging.Logger;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Prevents plugins (e.g. Essentials) from changing the parent of the plugin logger.
diff --git a/src/main/java/dev/tr7zw/yatopia/events/GameProfileLookupEvent.java b/src/main/java/dev/tr7zw/yatopia/events/GameProfileLookupEvent.java
index ff58b8875a07b34de02b9b479ff3e6daf66d7832..074de9ebca9abd6191bdd27e1e8f44abf2090f13 100644
--- a/src/main/java/dev/tr7zw/yatopia/events/GameProfileLookupEvent.java
+++ b/src/main/java/dev/tr7zw/yatopia/events/GameProfileLookupEvent.java
@@ -1,11 +1,10 @@
 package dev.tr7zw.yatopia.events;
 
-import java.util.UUID;
-
+import com.mojang.authlib.GameProfile;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 
-import com.mojang.authlib.GameProfile;
+import java.util.UUID;
 
 public class GameProfileLookupEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index e7563acf43fdf4f3f3c44b76441757f81e971117..bbc710b093f9536af8f2055fabd4559797ddd1e7 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -1,11 +1,12 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.HashMap;
 import org.apache.commons.lang.Validate;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+
 /**
  * Represents the art on a painting
  */
diff --git a/src/main/java/org/bukkit/BanEntry.java b/src/main/java/org/bukkit/BanEntry.java
index 2cf11ca4f67480b5e03d2dad0d3ee9283cddc48a..30c8b0a0c62f4a68163d905d27c62a15facc9ffb 100644
--- a/src/main/java/org/bukkit/BanEntry.java
+++ b/src/main/java/org/bukkit/BanEntry.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import java.util.Date;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Date;
+
 /**
  * A single entry from a ban list. This may represent either a player ban or
  * an IP ban.
diff --git a/src/main/java/org/bukkit/BanList.java b/src/main/java/org/bukkit/BanList.java
index 96ef22fe879c7be4f67bbb4d60c45ad11764dd5b..f506b644ad1aad53f9b41a642e37dfb5746212aa 100644
--- a/src/main/java/org/bukkit/BanList.java
+++ b/src/main/java/org/bukkit/BanList.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
-import java.util.Date;
-import java.util.Set;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Date;
+import java.util.Set;
+
 /**
  * A ban list, containing bans of some {@link Type}.
  */
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 74bb5aa790d072c130a05d0e59afdb1cbf359440..60b0ab4fdf7d36e8830e1fc7402a0242165bfa3e 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -1,26 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableList;
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.Serializable;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Consumer;
-import java.util.logging.Logger;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.boss.BarColor;
-import org.bukkit.boss.BarFlag;
-import org.bukkit.boss.BarStyle;
-import org.bukkit.boss.BossBar;
-import org.bukkit.boss.KeyedBossBar;
+import org.bukkit.boss.*;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
@@ -31,12 +15,7 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.help.HelpMap;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.ItemFactory;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.Merchant;
-import org.bukkit.inventory.Recipe;
+import org.bukkit.inventory.*;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.loot.LootTable;
 import org.bukkit.map.MapView;
@@ -51,6 +30,13 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.Serializable;
+import java.util.*;
+import java.util.function.Consumer;
+import java.util.logging.Logger;
+
 /**
  * Represents the Bukkit core, for version and Server singleton handling
  */
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 06bdfddb7b1acb7bb7b347ad1aa13bff0c823ab1..b6af03b10bb7eee717703489f2dd62c59db57381 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -1,13 +1,14 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import java.util.regex.Pattern;
 import org.apache.commons.lang.Validate;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+import java.util.regex.Pattern;
+
 /**
  * All supported color values for chat
  */
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 11b691cf59b4a72493c91055fd8c46d7681b4527..4662505ec026bb47cf333152617861303d3fc2b8 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -1,6 +1,5 @@
 package org.bukkit;
 
-import java.util.Collection;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.block.data.BlockData;
@@ -8,6 +7,8 @@ import org.bukkit.entity.Entity;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * Represents a chunk of blocks
  */
diff --git a/src/main/java/org/bukkit/CoalType.java b/src/main/java/org/bukkit/CoalType.java
index c07499dbdd49d70717dbd674d97b6dbcfd7e9d5b..fecdf6763ae1289f84f6fb6bbd5757e39cc8bb25 100644
--- a/src/main/java/org/bukkit/CoalType.java
+++ b/src/main/java/org/bukkit/CoalType.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the two types of coal
  */
diff --git a/src/main/java/org/bukkit/Color.java b/src/main/java/org/bukkit/Color.java
index deae003b7e9a96bbf1c0167d3e1d864e61b07f82..a0c4535901de29653cc10f8ec7b1349160d27256 100644
--- a/src/main/java/org/bukkit/Color.java
+++ b/src/main/java/org/bukkit/Color.java
@@ -1,12 +1,13 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * A container for a color palette. This class is immutable; the set methods
  * return a new color. The color names listed as fields are HTML4 standards,
diff --git a/src/main/java/org/bukkit/CropState.java b/src/main/java/org/bukkit/CropState.java
index fb4832fb796a38c0f5f51cf80a67259924f2c607..26cc005e6c2d26fbdd740baa0c9307df7de9d016 100644
--- a/src/main/java/org/bukkit/CropState.java
+++ b/src/main/java/org/bukkit/CropState.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the different growth states of crops
  */
diff --git a/src/main/java/org/bukkit/Difficulty.java b/src/main/java/org/bukkit/Difficulty.java
index 3f6cbefc2b1414ba2dad709e79288013b3ef73be..b177e2ddd423986c921d5a1b22a75a37f066c970 100644
--- a/src/main/java/org/bukkit/Difficulty.java
+++ b/src/main/java/org/bukkit/Difficulty.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the various difficulty levels that are available.
  */
diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java
index bd213cabddd8752e609544f24cfba95405726155..9bf31a7ffe10e010a8e0ddc6461bd36f32b7a665 100644
--- a/src/main/java/org/bukkit/DyeColor.java
+++ b/src/main/java/org/bukkit/DyeColor.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * All supported color values for dyes and cloth
  */
diff --git a/src/main/java/org/bukkit/Effect.java b/src/main/java/org/bukkit/Effect.java
index d0c812c72967469122f7f276ced31cfb0e9482dc..6cdac6da8803393a1b92f97682f6ea2ba9f17122 100644
--- a/src/main/java/org/bukkit/Effect.java
+++ b/src/main/java/org/bukkit/Effect.java
@@ -1,12 +1,13 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.bukkit.block.BlockFace;
 import org.bukkit.potion.Potion;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * A list of effects that the server is able to send to players.
  */
diff --git a/src/main/java/org/bukkit/EntityEffect.java b/src/main/java/org/bukkit/EntityEffect.java
index 0d8ee0cb1aae826fae0a920cdbf4152550c7375c..52617422c933357f154b9feb15860767cdf46fe7 100644
--- a/src/main/java/org/bukkit/EntityEffect.java
+++ b/src/main/java/org/bukkit/EntityEffect.java
@@ -1,25 +1,6 @@
 package org.bukkit;
 
-import org.bukkit.entity.Ageable;
-import org.bukkit.entity.ArmorStand;
-import org.bukkit.entity.Cat;
-import org.bukkit.entity.Dolphin;
-import org.bukkit.entity.Entity;
-import org.bukkit.entity.Firework;
-import org.bukkit.entity.Fox;
-import org.bukkit.entity.Guardian;
-import org.bukkit.entity.IronGolem;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
-import org.bukkit.entity.Rabbit;
-import org.bukkit.entity.Ravager;
-import org.bukkit.entity.Squid;
-import org.bukkit.entity.Tameable;
-import org.bukkit.entity.TippedArrow;
-import org.bukkit.entity.Villager;
-import org.bukkit.entity.Witch;
-import org.bukkit.entity.Wolf;
-import org.bukkit.entity.ZombieVillager;
+import org.bukkit.entity.*;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
index 0ae437c0c5052780bd0c78cdd542f62d75796527..bd0d18d24b94f7412782749e94f73958396bc363 100644
--- a/src/main/java/org/bukkit/FireworkEffect.java
+++ b/src/main/java/org/bukkit/FireworkEffect.java
@@ -2,13 +2,14 @@ package org.bukkit;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import java.util.List;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+import java.util.Map;
+
 /**
  * Represents a single firework effect.
  */
diff --git a/src/main/java/org/bukkit/GameMode.java b/src/main/java/org/bukkit/GameMode.java
index 938c3217f92e6d3ef9a637269c469f8359af6347..a2cb54fc8a3327fb8806ed35240d8ffb32ab21e6 100644
--- a/src/main/java/org/bukkit/GameMode.java
+++ b/src/main/java/org/bukkit/GameMode.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.bukkit.entity.HumanEntity;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the various type of game modes that {@link HumanEntity}s may
  * have
diff --git a/src/main/java/org/bukkit/GameRule.java b/src/main/java/org/bukkit/GameRule.java
index 720fe9f51753be28633ea380e732f676b3be4315..618b3419a5aa3198cb5f035dbb74a2ac03d393e6 100644
--- a/src/main/java/org/bukkit/GameRule.java
+++ b/src/main/java/org/bukkit/GameRule.java
@@ -1,11 +1,12 @@
 package org.bukkit;
 
 import com.google.common.base.Preconditions;
-import java.util.HashMap;
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * GameRules dictate certain behavior within Minecraft itself
  * <br>
diff --git a/src/main/java/org/bukkit/GrassSpecies.java b/src/main/java/org/bukkit/GrassSpecies.java
index f9c9ae463aacd593e3aa9caf037ea1e23d56c780..280ab1c5c45be7f3094a2d6f4dca20240be4dd7b 100644
--- a/src/main/java/org/bukkit/GrassSpecies.java
+++ b/src/main/java/org/bukkit/GrassSpecies.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the different types of grass.
  */
diff --git a/src/main/java/org/bukkit/Instrument.java b/src/main/java/org/bukkit/Instrument.java
index 92194803bcdfbcfdb99567835906ce9219eabd04..dbd66fe1271e8455334f9b57ca9c14fb193d130b 100644
--- a/src/main/java/org/bukkit/Instrument.java
+++ b/src/main/java/org/bukkit/Instrument.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 public enum Instrument {
 
     /**
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index ec9eb042ee8354d17f8ad4230c4acc5fcb46f894..14f93ff9b7d650fbfbd6a0e697bf526085810817 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -1,25 +1,22 @@
 package org.bukkit;
 
 import com.google.common.base.Preconditions;
-import java.lang.ref.Reference;
-import java.lang.ref.WeakReference;
-import com.google.common.base.Preconditions; // Paper
-import java.util.HashMap;
-import java.util.Map;
 import org.bukkit.block.Block;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.entity.Entity; // Paper
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-// Paper start
+import java.lang.ref.Reference;
+import java.lang.ref.WeakReference;
 import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.function.Predicate;
-import org.bukkit.entity.Entity;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
 // Paper end
 
 /**
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 3a8438fb674006a5cbfd977a1cd016117691f0ee..e9fc4d578f57fd29966632d6a3ae4f69d84774eb 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -1,87 +1,18 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.lang.reflect.Constructor;
-import java.util.Locale;
-import java.util.Map;
-import java.util.function.Consumer;
 import org.apache.commons.lang.Validate;
-import org.bukkit.block.data.Ageable;
-import org.bukkit.block.data.AnaloguePowerable;
-import org.bukkit.block.data.Bisected;
-import org.bukkit.block.data.BlockData;
-import org.bukkit.block.data.Directional;
-import org.bukkit.block.data.Levelled;
-import org.bukkit.block.data.Lightable;
-import org.bukkit.block.data.MultipleFacing;
-import org.bukkit.block.data.Orientable;
-import org.bukkit.block.data.Powerable;
-import org.bukkit.block.data.Rail;
-import org.bukkit.block.data.Rotatable;
-import org.bukkit.block.data.Snowable;
-import org.bukkit.block.data.Waterlogged;
-import org.bukkit.block.data.type.Bamboo;
-import org.bukkit.block.data.type.Bed;
-import org.bukkit.block.data.type.Beehive;
-import org.bukkit.block.data.type.Bell;
-import org.bukkit.block.data.type.BrewingStand;
-import org.bukkit.block.data.type.BubbleColumn;
-import org.bukkit.block.data.type.Cake;
-import org.bukkit.block.data.type.Campfire;
-import org.bukkit.block.data.type.Chest;
-import org.bukkit.block.data.type.Cocoa;
-import org.bukkit.block.data.type.CommandBlock;
-import org.bukkit.block.data.type.Comparator;
-import org.bukkit.block.data.type.CoralWallFan;
-import org.bukkit.block.data.type.DaylightDetector;
-import org.bukkit.block.data.type.Dispenser;
-import org.bukkit.block.data.type.Door;
-import org.bukkit.block.data.type.EndPortalFrame;
-import org.bukkit.block.data.type.EnderChest;
-import org.bukkit.block.data.type.Farmland;
-import org.bukkit.block.data.type.Fence;
-import org.bukkit.block.data.type.Fire;
-import org.bukkit.block.data.type.Furnace;
-import org.bukkit.block.data.type.Gate;
-import org.bukkit.block.data.type.GlassPane;
-import org.bukkit.block.data.type.Grindstone;
-import org.bukkit.block.data.type.Hopper;
-import org.bukkit.block.data.type.Jigsaw;
-import org.bukkit.block.data.type.Jukebox;
-import org.bukkit.block.data.type.Ladder;
-import org.bukkit.block.data.type.Lantern;
-import org.bukkit.block.data.type.Leaves;
-import org.bukkit.block.data.type.Lectern;
-import org.bukkit.block.data.type.NoteBlock;
-import org.bukkit.block.data.type.Observer;
-import org.bukkit.block.data.type.Piston;
-import org.bukkit.block.data.type.PistonHead;
-import org.bukkit.block.data.type.RedstoneRail;
-import org.bukkit.block.data.type.RedstoneWallTorch;
-import org.bukkit.block.data.type.RedstoneWire;
-import org.bukkit.block.data.type.Repeater;
-import org.bukkit.block.data.type.RespawnAnchor;
-import org.bukkit.block.data.type.Sapling;
-import org.bukkit.block.data.type.Scaffolding;
-import org.bukkit.block.data.type.SeaPickle;
-import org.bukkit.block.data.type.Sign;
-import org.bukkit.block.data.type.Slab;
-import org.bukkit.block.data.type.Snow;
-import org.bukkit.block.data.type.Stairs;
-import org.bukkit.block.data.type.StructureBlock;
-import org.bukkit.block.data.type.Switch;
-import org.bukkit.block.data.type.TNT;
-import org.bukkit.block.data.type.TechnicalPiston;
-import org.bukkit.block.data.type.TrapDoor;
-import org.bukkit.block.data.type.Tripwire;
-import org.bukkit.block.data.type.TripwireHook;
-import org.bukkit.block.data.type.TurtleEgg;
-import org.bukkit.block.data.type.Wall;
-import org.bukkit.block.data.type.WallSign;
+import org.bukkit.block.data.*;
+import org.bukkit.block.data.type.*;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.reflect.Constructor;
+import java.util.Locale;
+import java.util.Map;
+import java.util.function.Consumer;
+
 /**
  * An enum of all material IDs accepted by the official server and client
  */
diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java
index 620a962df6d871c7a3b7728030a05ade772135c2..94de79b15353920ecb09b13807201ada70ee96d7 100644
--- a/src/main/java/org/bukkit/NamespacedKey.java
+++ b/src/main/java/org/bukkit/NamespacedKey.java
@@ -1,11 +1,12 @@
 package org.bukkit;
 
 import com.google.common.base.Preconditions;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Locale;
 import java.util.UUID;
 import java.util.regex.Pattern;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a String based key which consists of two components - a namespace
diff --git a/src/main/java/org/bukkit/Note.java b/src/main/java/org/bukkit/Note.java
index b1c86aefb6481695959db81da70ee5452567cbf3..9885fc7dc2baa31f207e4c1681f94a9d383db381 100644
--- a/src/main/java/org/bukkit/Note.java
+++ b/src/main/java/org/bukkit/Note.java
@@ -1,11 +1,12 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * A note class to store a specific note.
  */
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 3afd5f5c0208a4ee93b5dbfc2aab2b9d2e8a7544..067e20e99c69fe743a9eeae78612ebd3e5698280 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -1,6 +1,5 @@
 package org.bukkit;
 
-import java.util.UUID;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.EntityType;
@@ -9,6 +8,8 @@ import org.bukkit.permissions.ServerOperator;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 public interface OfflinePlayer extends ServerOperator, AnimalTamer, ConfigurationSerializable {
 
     /**
diff --git a/src/main/java/org/bukkit/Raid.java b/src/main/java/org/bukkit/Raid.java
index 983a8c20a06d2b509602b27f49c090598b8ecc42..1890f5a0c4462ae6f43d1f4595ff33919b15fda5 100644
--- a/src/main/java/org/bukkit/Raid.java
+++ b/src/main/java/org/bukkit/Raid.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
+import org.bukkit.entity.Raider;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
-import org.bukkit.entity.Raider;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a raid event.
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 91544ade419ddc3c1c4e7393b2d8aa5c64f1b916..495c36aee4c2590c62355d62daa8787ea057d191 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -2,10 +2,6 @@ package org.bukkit;
 
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableMap;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.function.Predicate;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.block.Biome;
@@ -18,6 +14,11 @@ import org.bukkit.loot.LootTables;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.function.Predicate;
+
 /**
  * Represents a registry of Bukkit objects that may be retrieved by
  * {@link NamespacedKey}.
diff --git a/src/main/java/org/bukkit/SandstoneType.java b/src/main/java/org/bukkit/SandstoneType.java
index 6277451c3c6c551078c237cd767b6d70c4f585ea..17e6bf40b639fb4595c4871f4ff8a47582959a5b 100644
--- a/src/main/java/org/bukkit/SandstoneType.java
+++ b/src/main/java/org/bukkit/SandstoneType.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the three different types of Sandstone
  */
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 87174c63178ac2acd6dfd23d499e4c7efccaa981..b87df8dbdbf0a00dbe1de8e2474e6394e544fd2f 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1,26 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableList;
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.Serializable;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Consumer;
-import java.util.logging.Logger;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.boss.BarColor;
-import org.bukkit.boss.BarFlag;
-import org.bukkit.boss.BarStyle;
-import org.bukkit.boss.BossBar;
-import org.bukkit.boss.KeyedBossBar;
+import org.bukkit.boss.*;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
@@ -31,12 +15,7 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.help.HelpMap;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.ItemFactory;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.Merchant;
-import org.bukkit.inventory.Recipe;
+import org.bukkit.inventory.*;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.loot.LootTable;
 import org.bukkit.map.MapView;
@@ -52,6 +31,13 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.Serializable;
+import java.util.*;
+import java.util.function.Consumer;
+import java.util.logging.Logger;
+
 /**
  * Represents a server implementation.
  */
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 5cb41f417eb87d4aecd61de30f2a44cec5a9a4cd..6e6b0c0d895189d54f413318896dc0b6c8325fe4 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
-import java.util.Locale;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Locale;
+
 /**
  * Represents a countable statistic, which is tracked by the server.
  */
diff --git a/src/main/java/org/bukkit/StructureType.java b/src/main/java/org/bukkit/StructureType.java
index 8acb2b9de398ab5f4b18c46e9ab9eb964df8be3f..6b047565135acc4e5d869127079ec5e82b0f1df4 100644
--- a/src/main/java/org/bukkit/StructureType.java
+++ b/src/main/java/org/bukkit/StructureType.java
@@ -2,14 +2,15 @@ package org.bukkit;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableMap;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
 import org.apache.commons.lang.Validate;
 import org.bukkit.map.MapCursor;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+
 /**
  * This class handles the creation and storage of all structure types for
  * Bukkit. Structure Types are the different kinds of structures that can be
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
index 8ad4bd9ac9c19f92822a5562ca909e2fd293ee46..341d912d6bc1b58d5847447d17fa7f8e82ee7db2 100644
--- a/src/main/java/org/bukkit/Tag.java
+++ b/src/main/java/org/bukkit/Tag.java
@@ -1,8 +1,9 @@
 package org.bukkit;
 
-import java.util.Set;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * Represents a tag that may be defined by the server or a resource pack to
  * group like things together.
diff --git a/src/main/java/org/bukkit/TreeSpecies.java b/src/main/java/org/bukkit/TreeSpecies.java
index 2b177f98a74612ddc192745bcbb689ebdb1e104a..1c4ed7e2286c164882cd7598bd6dcbee080c6ad4 100644
--- a/src/main/java/org/bukkit/TreeSpecies.java
+++ b/src/main/java/org/bukkit/TreeSpecies.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the different species of trees regardless of size.
  */
diff --git a/src/main/java/org/bukkit/Warning.java b/src/main/java/org/bukkit/Warning.java
index efb97712cc9dc7c1e12a59f5b94e4f2ad7c6b7d8..62d6a927fdf3dd177ade65b4062a00a8c1d70a35 100644
--- a/src/main/java/org/bukkit/Warning.java
+++ b/src/main/java/org/bukkit/Warning.java
@@ -1,13 +1,14 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import java.util.Map;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * This designates the warning state for a specific item.
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 75c9225bd07b4c4b6dcd702c52294a7637eb6884..ffcd103f689d2632972ae171fe79d8316ce1768c 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1,30 +1,11 @@
 package org.bukkit;
 
-import java.io.File;
-
-import org.bukkit.event.entity.CreatureSpawnEvent;
-import org.bukkit.generator.ChunkGenerator;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-import java.util.function.Predicate;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.boss.DragonBattle;
-import org.bukkit.entity.AbstractArrow;
-import org.bukkit.entity.Arrow;
-import org.bukkit.entity.Entity;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.FallingBlock;
-import org.bukkit.entity.Item;
-import org.bukkit.entity.LightningStrike;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
+import org.bukkit.entity.*;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.generator.BlockPopulator;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.inventory.ItemStack;
@@ -40,6 +21,10 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
+import java.util.*;
+import java.util.function.Predicate;
+
 /**
  * Represents a world, which may contain entities, chunks and blocks
  */
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index 6e6945dd4c770be04ec09da3958fae751717527a..d94b0564b662e6ab5332fd81aeb00672e1718032 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -1,12 +1,13 @@
 package org.bukkit;
 
-import java.util.Random;
 import org.bukkit.command.CommandSender;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Random;
+
 /**
  * Represents various types of options that may be used to create a world.
  */
diff --git a/src/main/java/org/bukkit/WorldType.java b/src/main/java/org/bukkit/WorldType.java
index c48b5579f78760e93dc0ca71223ea5a5ce394873..9f6ac5333a190fcac342fc332dd6592f24205ef0 100644
--- a/src/main/java/org/bukkit/WorldType.java
+++ b/src/main/java/org/bukkit/WorldType.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents various types of worlds that may exist
  */
diff --git a/src/main/java/org/bukkit/advancement/Advancement.java b/src/main/java/org/bukkit/advancement/Advancement.java
index 7c5009974ac8d64d0e738e60cec45acb0d4ca89a..e4665e99b954f6b78374fb543be86d9f5eb64ee7 100644
--- a/src/main/java/org/bukkit/advancement/Advancement.java
+++ b/src/main/java/org/bukkit/advancement/Advancement.java
@@ -1,9 +1,10 @@
 package org.bukkit.advancement;
 
-import java.util.Collection;
 import org.bukkit.Keyed;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * Represents an advancement that may be awarded to a player. This class is not
  * reference safe as the underlying advancement may be reloaded.
diff --git a/src/main/java/org/bukkit/advancement/AdvancementProgress.java b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
index f9bc179da071e7bd57cefc50d6763317fb643b74..00823dc9b8bde870a0447becb8d89d51e6f73547 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementProgress.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementProgress.java
@@ -1,10 +1,11 @@
 package org.bukkit.advancement;
 
-import java.util.Collection;
-import java.util.Date;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.Date;
+
 /**
  * The individual status of an advancement for a player. This class is not
  * reference safe as the underlying advancement may be reloaded.
diff --git a/src/main/java/org/bukkit/attribute/AttributeInstance.java b/src/main/java/org/bukkit/attribute/AttributeInstance.java
index f08ee26cc4d479e1bfc5264b8cbe721315de91f2..18bafb04e6e946c05be27a6f71ed75a4bb80db7c 100644
--- a/src/main/java/org/bukkit/attribute/AttributeInstance.java
+++ b/src/main/java/org/bukkit/attribute/AttributeInstance.java
@@ -1,8 +1,9 @@
 package org.bukkit.attribute;
 
-import java.util.Collection;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * Represents a mutable instance of an attribute and its associated modifiers
  * and values.
diff --git a/src/main/java/org/bukkit/attribute/AttributeModifier.java b/src/main/java/org/bukkit/attribute/AttributeModifier.java
index f0dff145a8c5ae729de5e5f547fff60333c6501e..014e2ebd343130c6c484201c641f65956e210ee6 100644
--- a/src/main/java/org/bukkit/attribute/AttributeModifier.java
+++ b/src/main/java/org/bukkit/attribute/AttributeModifier.java
@@ -1,9 +1,5 @@
 package org.bukkit.attribute;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-import java.util.UUID;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.inventory.EquipmentSlot;
@@ -11,6 +7,11 @@ import org.bukkit.util.NumberConversions;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.UUID;
+
 /**
  * Concrete implementation of an attribute modifier.
  */
diff --git a/src/main/java/org/bukkit/block/Banner.java b/src/main/java/org/bukkit/block/Banner.java
index e6eb3c04b9fa6cd232f95dd5851d365234972efd..9313ea62db43fc3960a1650862349f3cca30d258 100644
--- a/src/main/java/org/bukkit/block/Banner.java
+++ b/src/main/java/org/bukkit/block/Banner.java
@@ -1,10 +1,11 @@
 package org.bukkit.block;
 
-import java.util.List;
 import org.bukkit.DyeColor;
 import org.bukkit.block.banner.Pattern;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Represents a captured state of a banner.
  */
diff --git a/src/main/java/org/bukkit/block/Beacon.java b/src/main/java/org/bukkit/block/Beacon.java
index 6349fa9da3f96df3553fb9552c1cab95338cecb0..e85183e91b4de88d5674bd34f53a58f26e8a2a42 100644
--- a/src/main/java/org/bukkit/block/Beacon.java
+++ b/src/main/java/org/bukkit/block/Beacon.java
@@ -1,6 +1,5 @@
 package org.bukkit.block;
 
-import java.util.Collection;
 import org.bukkit.Nameable;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.potion.PotionEffect;
@@ -8,6 +7,8 @@ import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+
 /**
  * Represents a captured state of a beacon.
  */
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index 52a527bb5f6e5b133d9f75556bf72242928b703b..7a303067958c774b420aa91de186e1a435f8b4ee 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -1,10 +1,11 @@
 package org.bukkit.block;
 
-import java.util.Locale;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Locale;
+
 /**
  * Holds all accepted Biomes in the default server
  */
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 999f2a362c62cf58752d9c3d378aafe6754d2aaf..297e60157ce3eca48716248b11daae7ad85f709a 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -1,12 +1,6 @@
 package org.bukkit.block;
 
-import java.util.Collection;
-
-import org.bukkit.Chunk;
-import org.bukkit.FluidCollisionMode;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.World;
+import org.bukkit.*;
 import org.bukkit.block.data.Bisected;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.entity.Entity;
@@ -19,6 +13,8 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+
 /**
  * Represents a block. This is a live object, and only one Block may exist for
  * any given location in a world. The state of the block may change
diff --git a/src/main/java/org/bukkit/block/Chest.java b/src/main/java/org/bukkit/block/Chest.java
index db6affbc78106b2d93b41953b624a0bca0ca1d72..cb9380acda62e20fba4bbca08126e1d932f0bee3 100644
--- a/src/main/java/org/bukkit/block/Chest.java
+++ b/src/main/java/org/bukkit/block/Chest.java
@@ -1,9 +1,7 @@
 package org.bukkit.block;
 
-import com.destroystokyo.paper.loottable.LootableBlockInventory; // Paper
-import org.bukkit.Nameable; // Paper
+import com.destroystokyo.paper.loottable.LootableBlockInventory;
 import org.bukkit.inventory.Inventory;
-import org.bukkit.loot.Lootable;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/org/bukkit/block/Dispenser.java b/src/main/java/org/bukkit/block/Dispenser.java
index 07af1a3f011d4b96275f919d302ac367198e923e..66f39dd6252ab2d3938ff08caa9f7f90cc8aaf8f 100644
--- a/src/main/java/org/bukkit/block/Dispenser.java
+++ b/src/main/java/org/bukkit/block/Dispenser.java
@@ -2,7 +2,6 @@ package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
 import org.bukkit.Nameable;
-import org.bukkit.loot.Lootable;
 import org.bukkit.projectiles.BlockProjectileSource;
 import org.jetbrains.annotations.Nullable;
 
diff --git a/src/main/java/org/bukkit/block/Dropper.java b/src/main/java/org/bukkit/block/Dropper.java
index c76202321e29ad67597ca3017eb8d9baf6787383..4c1930410a172c649ad7900089264481fc154f28 100644
--- a/src/main/java/org/bukkit/block/Dropper.java
+++ b/src/main/java/org/bukkit/block/Dropper.java
@@ -1,7 +1,6 @@
 package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
-import org.bukkit.loot.Lootable;
 
 /**
  * Represents a captured state of a dropper.
diff --git a/src/main/java/org/bukkit/block/EntityBlockStorage.java b/src/main/java/org/bukkit/block/EntityBlockStorage.java
index f3f8d765d5d487aa14edf0b88c32608fb804c331..46ced8da164ce79336fb91169630d3334883ff7d 100644
--- a/src/main/java/org/bukkit/block/EntityBlockStorage.java
+++ b/src/main/java/org/bukkit/block/EntityBlockStorage.java
@@ -1,9 +1,10 @@
 package org.bukkit.block;
 
-import java.util.List;
 import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Represents a captured state of a block which stores entities.
  *
diff --git a/src/main/java/org/bukkit/block/Hopper.java b/src/main/java/org/bukkit/block/Hopper.java
index 7ade312f180b7e30871d3a3240c76325cc369c26..58b6bed58a623b77a15e739d32b2057d7956a9c9 100644
--- a/src/main/java/org/bukkit/block/Hopper.java
+++ b/src/main/java/org/bukkit/block/Hopper.java
@@ -1,7 +1,6 @@
 package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
-import org.bukkit.loot.Lootable;
 
 /**
  * Represents a captured state of a hopper.
diff --git a/src/main/java/org/bukkit/block/PistonMoveReaction.java b/src/main/java/org/bukkit/block/PistonMoveReaction.java
index b90f5dc345ad2cdd3ae353dc57f42a14c231d18a..02df8868246b1ac883c600a921388284f791f241 100644
--- a/src/main/java/org/bukkit/block/PistonMoveReaction.java
+++ b/src/main/java/org/bukkit/block/PistonMoveReaction.java
@@ -1,8 +1,9 @@
 package org.bukkit.block;
 
+import org.jetbrains.annotations.Nullable;
+
 import java.util.HashMap;
 import java.util.Map;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents how a block or entity will react when interacting with a piston
diff --git a/src/main/java/org/bukkit/block/ShulkerBox.java b/src/main/java/org/bukkit/block/ShulkerBox.java
index 172f383fea619127324fec2b043639fd0683f135..4be2b7719c632c640668f5af951643e223e78e44 100644
--- a/src/main/java/org/bukkit/block/ShulkerBox.java
+++ b/src/main/java/org/bukkit/block/ShulkerBox.java
@@ -2,7 +2,6 @@ package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
 import org.bukkit.DyeColor;
-import org.bukkit.loot.Lootable;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/org/bukkit/block/Skull.java b/src/main/java/org/bukkit/block/Skull.java
index a6914f01e01e9103702185f92b0209b3c84c152a..5d07bf9a002dd8758d0998c899cf9a7e27ed9a92 100644
--- a/src/main/java/org/bukkit/block/Skull.java
+++ b/src/main/java/org/bukkit/block/Skull.java
@@ -1,5 +1,6 @@
 package org.bukkit.block;
 
+import com.destroystokyo.paper.profile.PlayerProfile;
 import org.bukkit.Material;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.SkullType;
@@ -7,7 +8,6 @@ import org.bukkit.block.data.BlockData;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import com.destroystokyo.paper.profile.PlayerProfile; // Paper
 
 /**
  * Represents a captured state of a skull block.
diff --git a/src/main/java/org/bukkit/block/banner/Pattern.java b/src/main/java/org/bukkit/block/banner/Pattern.java
index 5c293ab0b7505267dda019c3e60d3b053c0fdd27..e5327b59cfb7b5ed547e34a8c02d293a9b6fd22d 100644
--- a/src/main/java/org/bukkit/block/banner/Pattern.java
+++ b/src/main/java/org/bukkit/block/banner/Pattern.java
@@ -1,13 +1,14 @@
 package org.bukkit.block.banner;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.Map;
-import java.util.NoSuchElementException;
 import org.bukkit.DyeColor;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+import java.util.NoSuchElementException;
+
 @SerializableAs("Pattern")
 public class Pattern implements ConfigurationSerializable {
 
diff --git a/src/main/java/org/bukkit/block/banner/PatternType.java b/src/main/java/org/bukkit/block/banner/PatternType.java
index e6ce94ed2a4d64204aac60c4b2dc138f258e4720..d53ee8f7f10aef1a1629a2b094c0a5a22e858132 100644
--- a/src/main/java/org/bukkit/block/banner/PatternType.java
+++ b/src/main/java/org/bukkit/block/banner/PatternType.java
@@ -1,11 +1,12 @@
 package org.bukkit.block.banner;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+
 public enum PatternType {
     BASE("b"),
     SQUARE_BOTTOM_LEFT("bl"),
diff --git a/src/main/java/org/bukkit/block/data/Directional.java b/src/main/java/org/bukkit/block/data/Directional.java
index 825ff08ddd1d0b2448a3ccc2e821af4ae6c97048..4cd48c762a10c523564a63d2296baf3f00d56ced 100644
--- a/src/main/java/org/bukkit/block/data/Directional.java
+++ b/src/main/java/org/bukkit/block/data/Directional.java
@@ -1,9 +1,10 @@
 package org.bukkit.block.data;
 
-import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * 'facing' represents the face towards which the block is pointing.
  * <br>
diff --git a/src/main/java/org/bukkit/block/data/MultipleFacing.java b/src/main/java/org/bukkit/block/data/MultipleFacing.java
index e10a52555b21f176bd89c0bbb0a7719ab13b0507..48db270aff771277af95628691cfb2a012627569 100644
--- a/src/main/java/org/bukkit/block/data/MultipleFacing.java
+++ b/src/main/java/org/bukkit/block/data/MultipleFacing.java
@@ -1,9 +1,10 @@
 package org.bukkit.block.data;
 
-import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * This class encompasses the 'north', 'east', 'south', 'west', 'up', 'down'
  * boolean flags which are used to set which faces of the block textures are
diff --git a/src/main/java/org/bukkit/block/data/Orientable.java b/src/main/java/org/bukkit/block/data/Orientable.java
index 5b4561a16583347578f7eb8d5e0d8c24c693bd98..5c7df38a619c90144e9b19a4b887b0442a10eee3 100644
--- a/src/main/java/org/bukkit/block/data/Orientable.java
+++ b/src/main/java/org/bukkit/block/data/Orientable.java
@@ -1,9 +1,10 @@
 package org.bukkit.block.data;
 
-import java.util.Set;
 import org.bukkit.Axis;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * 'axis' represents the axis along whilst this block is oriented.
  * <br>
diff --git a/src/main/java/org/bukkit/block/data/Rail.java b/src/main/java/org/bukkit/block/data/Rail.java
index b89938800152df6d3b83639dfd03058106d8fe41..e8300a7414b61699b458eb410fa3fd4b0d0b9ab7 100644
--- a/src/main/java/org/bukkit/block/data/Rail.java
+++ b/src/main/java/org/bukkit/block/data/Rail.java
@@ -1,8 +1,9 @@
 package org.bukkit.block.data;
 
-import java.util.Set;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * 'shape' represents the current layout of a minecart rail.
  * <br>
diff --git a/src/main/java/org/bukkit/block/data/type/BrewingStand.java b/src/main/java/org/bukkit/block/data/type/BrewingStand.java
index 6a7687d5248eff11fca1e41d1cc6be2ffde1aab0..57e892911d93c288c6f8dd1a0ec0ee0e913e3ede 100644
--- a/src/main/java/org/bukkit/block/data/type/BrewingStand.java
+++ b/src/main/java/org/bukkit/block/data/type/BrewingStand.java
@@ -1,9 +1,10 @@
 package org.bukkit.block.data.type;
 
-import java.util.Set;
 import org.bukkit.block.data.BlockData;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * Interface to the 'has_bottle_0', 'has_bottle_1', 'has_bottle_2' flags on a
  * brewing stand which indicate which bottles are rendered on the outside.
diff --git a/src/main/java/org/bukkit/block/data/type/RedstoneWire.java b/src/main/java/org/bukkit/block/data/type/RedstoneWire.java
index ba8a80ee3ea3975e358b56f38255913fd1342af5..f3e98e4b96758ccf1bef7c18b05809fb15017b4c 100644
--- a/src/main/java/org/bukkit/block/data/type/RedstoneWire.java
+++ b/src/main/java/org/bukkit/block/data/type/RedstoneWire.java
@@ -1,10 +1,11 @@
 package org.bukkit.block.data.type;
 
-import java.util.Set;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.AnaloguePowerable;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * 'north', 'east', 'south', 'west' represent the types of connections this
  * redstone wire has to adjacent blocks.
diff --git a/src/main/java/org/bukkit/block/data/type/TrapDoor.java b/src/main/java/org/bukkit/block/data/type/TrapDoor.java
index 13876b37984dc35bf7424128116a24528c549638..a4f17715bfa495cd0ad88c31dc13bf993323b4a5 100644
--- a/src/main/java/org/bukkit/block/data/type/TrapDoor.java
+++ b/src/main/java/org/bukkit/block/data/type/TrapDoor.java
@@ -1,10 +1,6 @@
 package org.bukkit.block.data.type;
 
-import org.bukkit.block.data.Bisected;
-import org.bukkit.block.data.Directional;
-import org.bukkit.block.data.Openable;
-import org.bukkit.block.data.Powerable;
-import org.bukkit.block.data.Waterlogged;
+import org.bukkit.block.data.*;
 
 public interface TrapDoor extends Bisected, Directional, Openable, Powerable, Waterlogged {
 }
diff --git a/src/main/java/org/bukkit/boss/BossBar.java b/src/main/java/org/bukkit/boss/BossBar.java
index 70274f2e2a1d6f27c4febd9d5d5fa3ee1b49f100..1d3398500bab55fdf04f890cdc3c62d29dd2303b 100644
--- a/src/main/java/org/bukkit/boss/BossBar.java
+++ b/src/main/java/org/bukkit/boss/BossBar.java
@@ -1,10 +1,11 @@
 package org.bukkit.boss;
 
-import java.util.List;
 import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 public interface BossBar {
 
     /**
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index c10fc8d2386301bc2caddcdb1cd18566bcaa8689..7013fdab5474905d59d238f1f16e5a4f49b15d5e 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -1,16 +1,8 @@
 package org.bukkit.command;
 
 import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Set;
 import org.apache.commons.lang.Validate;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.GameRule;
-import org.bukkit.Location;
-import org.bukkit.Server;
+import org.bukkit.*;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.minecart.CommandMinecart;
 import org.bukkit.permissions.Permissible;
@@ -19,6 +11,11 @@ import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
 /**
  * Represents a Command, which executes various tasks upon user input
  */
diff --git a/src/main/java/org/bukkit/command/CommandMap.java b/src/main/java/org/bukkit/command/CommandMap.java
index 864c263bbd4dd6dd7c37a74b39b1a40a884d0731..6150d764d7dd47005242c210cfdb755378091c44 100644
--- a/src/main/java/org/bukkit/command/CommandMap.java
+++ b/src/main/java/org/bukkit/command/CommandMap.java
@@ -1,10 +1,11 @@
 package org.bukkit.command;
 
-import java.util.List;
 import org.bukkit.Location;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 public interface CommandMap {
 
     /**
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index 9d4f553c04784cca63901a56a7aea62a5cae1d72..b21531e3a382c6ba8adabe0a5ec6ed860f5a27ea 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -1,12 +1,12 @@
 package org.bukkit.command;
 
-import java.util.ArrayList;
-import java.util.regex.Matcher; // Paper
-import java.util.regex.Pattern; // Paper
-
 import org.bukkit.Bukkit;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.ArrayList;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
 public class FormattedCommandAlias extends Command {
     private final String[] formatStrings;
 
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index ca1893e9fb41baae0d103f1a925e33f3dfa273be..2e852d6ec00f7a58bf77841bb8ca94deb114f5c2 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -7,9 +7,9 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Set;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * For when all you care about is just messaging
diff --git a/src/main/java/org/bukkit/command/PluginCommand.java b/src/main/java/org/bukkit/command/PluginCommand.java
index 7f153000eee0f563ee4f1e3c218aadb5b6a33a97..81e33a1c7b4ce99596109109ae7670b727365094 100644
--- a/src/main/java/org/bukkit/command/PluginCommand.java
+++ b/src/main/java/org/bukkit/command/PluginCommand.java
@@ -1,11 +1,12 @@
 package org.bukkit.command;
 
-import java.util.List;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents a {@link Command} belonging to a plugin
  */
diff --git a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
index a542c4bb3c973bbe4b976642feccde6a4d90cb7b..2f776eacaaa37a5e052a8dc11f43fa1dd3045dd1 100644
--- a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
+++ b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
@@ -1,12 +1,13 @@
 package org.bukkit.command;
 
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
 
 public class PluginCommandYamlParser {
 
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 460fda05a62b12db2edcfb7ea8b2a5dd8e4b110d..fcbc298043614da5f4bd849e9f65961da276e15e 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -1,30 +1,19 @@
 package org.bukkit.command;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerCommandException;
 import com.destroystokyo.paper.exception.ServerTabCompleteException;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.Server;
-import org.bukkit.command.defaults.BukkitCommand;
-import org.bukkit.command.defaults.HelpCommand;
-import org.bukkit.command.defaults.PluginsCommand;
-import org.bukkit.command.defaults.ReloadCommand;
-import org.bukkit.command.defaults.VersionCommand;
+import org.bukkit.command.defaults.*;
 import org.bukkit.entity.Player;
 import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+
 public class SimpleCommandMap implements CommandMap {
     protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
     private final Server server;
diff --git a/src/main/java/org/bukkit/command/TabCompleter.java b/src/main/java/org/bukkit/command/TabCompleter.java
index e9cf71f5ce9d7fd193c7423300ddbf5c77c9accf..80127fda31e25974c445b5e932130740c1621cad 100644
--- a/src/main/java/org/bukkit/command/TabCompleter.java
+++ b/src/main/java/org/bukkit/command/TabCompleter.java
@@ -1,9 +1,10 @@
 package org.bukkit.command;
 
-import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents a class which can suggest tab completions for commands.
  */
diff --git a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
index cb032d038f52e6b9cf51c203cfc01cc4a7622772..a776bf9e511ec8eca8e59b5966fe7e676fccc5d6 100644
--- a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
@@ -1,9 +1,10 @@
 package org.bukkit.command.defaults;
 
-import java.util.List;
 import org.bukkit.command.Command;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 public abstract class BukkitCommand extends Command {
     protected BukkitCommand(@NotNull String name) {
         super(name);
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index 98027fdd8dbd2c0ed84a065f7b991738ee397a66..e9da1efa1229ef0ffad16478dcb0679731585104 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -1,13 +1,6 @@
 package org.bukkit.command.defaults;
 
 import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
@@ -24,6 +17,8 @@ import org.bukkit.util.ChatPaginator;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+
 public class HelpCommand extends BukkitCommand {
     public HelpCommand() {
         super("help");
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index cbcdca042b54531fdf45e8631c4bbe8c74f68341..423ad250e06acb3a57a8a618e8d52f9a9d92483b 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -1,24 +1,19 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.command.CommandSender;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-// Spigot start
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.ClickEvent;
 import net.md_5.bungee.api.chat.ComponentBuilder;
-import net.md_5.bungee.api.chat.HoverEvent;
 import net.md_5.bungee.api.chat.ComponentBuilder.FormatRetention;
+import net.md_5.bungee.api.chat.HoverEvent;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginDescriptionFile;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.*;
 // Spigot end
 
 public class PluginsCommand extends BukkitCommand {
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index 0c7ba0718de2b93d013968ca0fec34ffd423990f..4557d88d4970c672210062cd0f96e195f93f2219 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -1,14 +1,14 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Arrays;
+import java.util.List;
+
 public class ReloadCommand extends BukkitCommand {
     public ReloadCommand(@NotNull String name) {
         super(name);
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index a47ed6b290c051ff076900028b929745aac0ba55..96f5242c37142eed55fba90f8dc712c92aeaee88 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -1,22 +1,12 @@
 package org.bukkit.command.defaults;
 
-import com.destroystokyo.paper.util.VersionFetcher; // Paper - version supplier
+import com.destroystokyo.paper.util.VersionFetcher;
 import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableList;
 import com.google.common.io.Resources;
 import com.google.gson.Gson;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSyntaxException;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.net.URL;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.locks.ReentrantLock;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -26,6 +16,13 @@ import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.*;
+import java.util.concurrent.locks.ReentrantLock;
+
 public class VersionCommand extends BukkitCommand {
     private VersionFetcher versionFetcher;
     private VersionFetcher getVersionFetcher() { // lazy load because unsafe isn't available at command registration
diff --git a/src/main/java/org/bukkit/configuration/Configuration.java b/src/main/java/org/bukkit/configuration/Configuration.java
index f12a98b1beb20a039f9830a00be89742a307d9ad..8d27175296f3d36f02b2b3d2138cc5f22af7b40c 100644
--- a/src/main/java/org/bukkit/configuration/Configuration.java
+++ b/src/main/java/org/bukkit/configuration/Configuration.java
@@ -1,9 +1,10 @@
 package org.bukkit.configuration;
 
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents a source of configurable options and settings
  */
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationSection.java b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
index 5a6e621d5876ce1ec5c5fb5559cb2bfa01ecba20..05222f3099a050e174a347c63c120b42bb54c87f 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationSection.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
@@ -1,8 +1,5 @@
 package org.bukkit.configuration;
 
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import org.bukkit.Color;
 import org.bukkit.Location;
 import org.bukkit.OfflinePlayer;
@@ -12,6 +9,10 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 /**
  * Represents a section of a {@link Configuration}
  */
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
index 010a97fee25233929e933aafad9a34a15bc4b847..59382f4a57265fc960505635fb09b978d987f853 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
@@ -1,10 +1,11 @@
 package org.bukkit.configuration;
 
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * This is a {@link Configuration} implementation that does not save or load
  * from any source, and stores all values in memory only.
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index f03dec0c9e489bb3deac760fd11970055998cf59..82ed6a1fbf73bf3199ceda47f87aba332a3abca1 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -1,12 +1,5 @@
 package org.bukkit.configuration;
 
-import static org.bukkit.util.NumberConversions.*;
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.Location;
@@ -17,6 +10,10 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+
+import static org.bukkit.util.NumberConversions.*;
+
 /**
  * A type of {@link ConfigurationSection} that is stored in memory.
  */
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
index 581889ffa2afbf17ca2ebe2905f2a041fe760cd8..fad42b6efd5022ca67381be473bfd31060400832 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
@@ -2,16 +2,6 @@ package org.bukkit.configuration.file;
 
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.Reader;
-import java.io.Writer;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.Configuration;
 import org.bukkit.configuration.InvalidConfigurationException;
@@ -19,6 +9,8 @@ import org.bukkit.configuration.MemoryConfiguration;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.*;
+
 /**
  * This is a base class for all File based implementations of {@link
  * Configuration}
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
index be8d35f1560b1e751f3c3102b9ae094ed61fe911..555c6f37d5b9daf0f7231070ee79fcfd36e87bfc 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
@@ -1,11 +1,5 @@
 package org.bukkit.configuration.file;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.Reader;
-import java.util.Map;
-import java.util.logging.Level;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.Configuration;
@@ -18,6 +12,13 @@ import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.error.YAMLException;
 import org.yaml.snakeyaml.representer.Representer;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.Reader;
+import java.util.Map;
+import java.util.logging.Level;
+
 /**
  * An implementation of {@link Configuration} which saves all files in Yaml.
  * Note that this implementation is not synchronized.
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
index c8466a29a22d6f685e856feaa8e1990aa35ae72c..7de54663e6f9dd861ed8aea716f70eae010a4372 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
@@ -1,7 +1,5 @@
 package org.bukkit.configuration.file;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -10,6 +8,9 @@ import org.yaml.snakeyaml.error.YAMLException;
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.Tag;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 public class YamlConstructor extends SafeConstructor {
 
     public YamlConstructor() {
diff --git a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
index f03da36223c7b73678c58f17b49f42f670dd29a3..dc78a24b328b6f409f8d3a34ffc45fb35b74d581 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
@@ -1,7 +1,5 @@
 package org.bukkit.configuration.file;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
@@ -9,6 +7,9 @@ import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.representer.Representer;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 public class YamlRepresenter extends Representer {
 
     public YamlRepresenter() {
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
index 177944d4e8cf37d7f9a8884cafdeefd7c3b3d78b..a666db15e5cbd9c2939d17cbab3f82be7020b7c1 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
@@ -1,8 +1,9 @@
 package org.bukkit.configuration.serialization;
 
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * Represents an object that may be serialized.
  * <p>
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index 8c9b4f6967e4f9264c653be84cb821c1f8bb0753..92775fcf96e409100b674013ebcedd48a32b567f 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -1,13 +1,5 @@
 package org.bukkit.configuration.serialization;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
@@ -23,6 +15,15 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 /**
  * Utility class for storing and retrieving classes for {@link Configuration}.
  */
diff --git a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
index 13839611610258263fd6ea6a62e67fd21f5e4be8..2fa5d2dfef0710add52185889a5c7e984a540cd5 100644
--- a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
@@ -1,10 +1,11 @@
 package org.bukkit.configuration.serialization;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Applies to a {@link ConfigurationSerializable} that will delegate all
diff --git a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
index 725685ed346a6b378869341c474dfcd9e8f296fb..9f4e7950491e5a94ddd8e552c22c7899ecd571ac 100644
--- a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
+++ b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
@@ -1,10 +1,11 @@
 package org.bukkit.configuration.serialization;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents an "alias" that a {@link ConfigurationSerializable} may be
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index bf2407c838bc20197802687c150d513f4e86ed2b..cb77dbd3c48aa33631ec16d82a039d5be019af08 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -1,12 +1,13 @@
 package org.bukkit.conversations;
 
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * The Conversation class is responsible for tracking the current state of a
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
index 0d67fe0c00e886def63edf72c3af3e4e5b7b3ea2..5c634789db28a3a3cbed550563a7173ec7d8ef3c 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
@@ -1,9 +1,10 @@
 package org.bukkit.conversations;
 
-import java.util.EventObject;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.EventObject;
+
 /**
  * ConversationAbandonedEvent contains information about an abandoned
  * conversation.
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
index 451121e7dfdd6f58c0649a509b1770c1d3752480..48585ce53d77775e21df82e5d66fd6ddd1f0d34b 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
@@ -1,8 +1,9 @@
 package org.bukkit.conversations;
 
-import java.util.EventListener;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.EventListener;
+
 /**
  */
 public interface ConversationAbandonedListener extends EventListener {
diff --git a/src/main/java/org/bukkit/conversations/ConversationContext.java b/src/main/java/org/bukkit/conversations/ConversationContext.java
index 5bc0d36fe2a0f0e8f1cd3fb077f6b2285d60cbf4..b192b03be44404eb03b8f6ed4b8cc5f4f65d2562 100644
--- a/src/main/java/org/bukkit/conversations/ConversationContext.java
+++ b/src/main/java/org/bukkit/conversations/ConversationContext.java
@@ -1,10 +1,11 @@
 package org.bukkit.conversations;
 
-import java.util.Map;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * A ConversationContext provides continuity between nodes in the prompt graph
  * by giving the developer access to the subject of the conversation and a
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
index 58009e1e7a9cbbba1b0db43cd81eddc19c710687..c629f10fcb0f9574011ac9cf6c41903d92623467 100644
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java
@@ -1,14 +1,15 @@
 package org.bukkit.conversations;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 /**
  * A ConversationFactory is responsible for creating a {@link Conversation}
  * from a predefined template. A ConversationFactory is typically created when
diff --git a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
index 9bf3336faea731c495bc7f64558654769731d6e1..544bc3768c1436f1a8c8809191ee163273e3f21f 100644
--- a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
+++ b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
@@ -1,10 +1,11 @@
 package org.bukkit.conversations;
 
-import java.util.Arrays;
-import java.util.List;
 import org.apache.commons.lang.StringUtils;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Arrays;
+import java.util.List;
+
 /**
  * FixedSetPrompt is the base class for any prompt that requires a fixed set
  * response from the user.
diff --git a/src/main/java/org/bukkit/conversations/RegexPrompt.java b/src/main/java/org/bukkit/conversations/RegexPrompt.java
index 6b3f1e4591d68fe6698cd960b97b04c82f67366d..3de2a5897481e8429a741d30885e790de0e533f6 100644
--- a/src/main/java/org/bukkit/conversations/RegexPrompt.java
+++ b/src/main/java/org/bukkit/conversations/RegexPrompt.java
@@ -1,8 +1,9 @@
 package org.bukkit.conversations;
 
-import java.util.regex.Pattern;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.regex.Pattern;
+
 /**
  * RegexPrompt is the base class for any prompt that requires an input
  * validated by a regular expression.
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..f61fc5faf2e8a663272c7b5f63cdc3b612dec2ea 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -1,7 +1,5 @@
 package org.bukkit.enchantments;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
@@ -9,6 +7,9 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * The various type of enchantments that may be added to armour or weapons
  */
diff --git a/src/main/java/org/bukkit/entity/AnimalTamer.java b/src/main/java/org/bukkit/entity/AnimalTamer.java
index 2e17b2d4f759531fbe9ee8e9b00c839186af09ca..9f1eed9ba5b1a613681b3887e83ab6785a82c414 100644
--- a/src/main/java/org/bukkit/entity/AnimalTamer.java
+++ b/src/main/java/org/bukkit/entity/AnimalTamer.java
@@ -1,9 +1,10 @@
 package org.bukkit.entity;
 
-import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 public interface AnimalTamer {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Animals.java b/src/main/java/org/bukkit/entity/Animals.java
index 1047481e418f6cde50ff477950b2c65e16e50e32..3d4f8c3d4614f013952797160eb71b37628c792f 100644
--- a/src/main/java/org/bukkit/entity/Animals.java
+++ b/src/main/java/org/bukkit/entity/Animals.java
@@ -1,8 +1,9 @@
 package org.bukkit.entity;
 
-import java.util.UUID;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 /**
  * Represents an Animal.
  */
diff --git a/src/main/java/org/bukkit/entity/AreaEffectCloud.java b/src/main/java/org/bukkit/entity/AreaEffectCloud.java
index bca9d3659f6fceeca4b7fecbc7034d6fdbc4581e..977d9d0e8c9eec14c08bf6d284853ab98d1530f8 100644
--- a/src/main/java/org/bukkit/entity/AreaEffectCloud.java
+++ b/src/main/java/org/bukkit/entity/AreaEffectCloud.java
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.Particle;
 import org.bukkit.potion.PotionData;
@@ -10,6 +9,8 @@ import org.bukkit.projectiles.ProjectileSource;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents an area effect cloud which will imbue a potion effect onto
  * entities which enter it.
diff --git a/src/main/java/org/bukkit/entity/Arrow.java b/src/main/java/org/bukkit/entity/Arrow.java
index ec8443b67014c0129256c9227cc89686422b9217..6ea47e5628eddc1f256aae5fee09064a1f39a073 100644
--- a/src/main/java/org/bukkit/entity/Arrow.java
+++ b/src/main/java/org/bukkit/entity/Arrow.java
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
@@ -8,6 +7,8 @@ import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 public interface Arrow extends AbstractArrow {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
index 2151e3bac040b0dd47c67ffe3a9de6dc45e9d62c..038bcb6dc7cedf134b9b49837ff864814a322748 100644
--- a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
+++ b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
@@ -1,8 +1,9 @@
 package org.bukkit.entity;
 
-import java.util.Set;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * Represents a complex living entity - one that is made up of various smaller
  * parts
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 801815e64bb281dbd480258db24a36892f485990..285d3c40c3a332e665121a5631df3f828b204627 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1,14 +1,6 @@
 package org.bukkit.entity;
 
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-import org.bukkit.Chunk; // Paper
-import org.bukkit.EntityEffect;
-import org.bukkit.Location;
-import org.bukkit.Nameable;
-import org.bukkit.Server;
-import org.bukkit.World;
+import org.bukkit.*;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.command.CommandSender;
@@ -23,6 +15,10 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+
 /**
  * Represents a base entity in the world
  */
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 98ebed7d90e99fa4d333d2c2b51c61418c4e5188..de60a4b51fd68de7fdd3f24f8bd49b94fcb93646 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -1,25 +1,20 @@
 package org.bukkit.entity;
 
 import com.google.common.base.Preconditions;
-import java.util.HashMap;
-import java.util.Map;
 import org.bukkit.Keyed;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.World;
-import org.bukkit.entity.minecart.CommandMinecart;
-import org.bukkit.entity.minecart.ExplosiveMinecart;
-import org.bukkit.entity.minecart.HopperMinecart;
-import org.bukkit.entity.minecart.PoweredMinecart;
-import org.bukkit.entity.minecart.RideableMinecart;
-import org.bukkit.entity.minecart.SpawnerMinecart;
-import org.bukkit.entity.minecart.StorageMinecart;
+import org.bukkit.entity.minecart.*;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+
 public enum EntityType implements Keyed {
 
     // These strings MUST match the strings in nms.EntityTypes and are case sensitive.
diff --git a/src/main/java/org/bukkit/entity/ExperienceOrb.java b/src/main/java/org/bukkit/entity/ExperienceOrb.java
index dec70bbfaf73a9d525b2c45682b804c684e1645b..36f0b5a004b9d22d673632009cbb161e811540a7 100644
--- a/src/main/java/org/bukkit/entity/ExperienceOrb.java
+++ b/src/main/java/org/bukkit/entity/ExperienceOrb.java
@@ -1,7 +1,7 @@
 package org.bukkit.entity;
 
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable; // Paper
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents an Experience Orb.
diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java
index d3998c61af0c5fb1189ae7829e8cdfbef0cd3f97..f1728dbcafd7dcedadad7a44088edf2a1038d6b0 100644
--- a/src/main/java/org/bukkit/entity/HumanEntity.java
+++ b/src/main/java/org/bukkit/entity/HumanEntity.java
@@ -1,21 +1,16 @@
 package org.bukkit.entity;
 
-import java.util.Collection;
-import java.util.Set;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.InventoryView;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.MainHand;
-import org.bukkit.inventory.Merchant;
-import org.bukkit.inventory.PlayerInventory;
+import org.bukkit.inventory.*;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.Set;
+
 /**
  * Represents a human entity, such as an NPC or a player
  */
diff --git a/src/main/java/org/bukkit/entity/Item.java b/src/main/java/org/bukkit/entity/Item.java
index acd80d812fe88dee3978d19b24149e9fe0ac596b..6b8dd87fe4e4535075d81ac1bfc87a4d787a7a56 100644
--- a/src/main/java/org/bukkit/entity/Item.java
+++ b/src/main/java/org/bukkit/entity/Item.java
@@ -2,9 +2,8 @@ package org.bukkit.entity;
 
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
-
-// Paper start
 import org.jetbrains.annotations.Nullable;
+
 import java.util.UUID;
 // Paper end
 
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index a60523cc9c05396ce5c3ebabd231f3ca374c3efe..ba66273873a7692de0316068fe2b8bb0455bcbba 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -1,9 +1,5 @@
 package org.bukkit.entity;
 
-import java.util.Collection;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -21,6 +17,11 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+
 /**
  * Represents a living entity, such as a monster or player
  */
diff --git a/src/main/java/org/bukkit/entity/Phantom.java b/src/main/java/org/bukkit/entity/Phantom.java
index ed4d417c2deefb78807cb61b01df5afcd334d754..e5a5b49564d523a05a02be3e8de558cba81e953c 100644
--- a/src/main/java/org/bukkit/entity/Phantom.java
+++ b/src/main/java/org/bukkit/entity/Phantom.java
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index b584f8b15f7ee36b42bba0e0bae721aae8f6f14b..3ca3fb8b59eaf82851aad998d5b6b2af7e26896a 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1,25 +1,9 @@
 package org.bukkit.entity;
 
-import java.net.InetSocketAddress;
-import com.destroystokyo.paper.ClientOption; // Paper
-import com.destroystokyo.paper.Title; // Paper
-import com.destroystokyo.paper.profile.PlayerProfile; // Paper
-import java.util.Date; // Paper
-import org.bukkit.BanEntry; // Paper
-import org.bukkit.BanList; // Paper
-import org.bukkit.Bukkit; // Paper
-import org.bukkit.DyeColor;
-import org.bukkit.Effect;
-import org.bukkit.GameMode;
-import org.bukkit.Instrument;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.Note;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
-import org.bukkit.Sound;
-import org.bukkit.SoundCategory;
-import org.bukkit.WeatherType;
+import com.destroystokyo.paper.ClientOption;
+import com.destroystokyo.paper.Title;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import org.bukkit.*;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.advancement.AdvancementProgress;
 import org.bukkit.block.data.BlockData;
@@ -33,6 +17,9 @@ import org.bukkit.scoreboard.Scoreboard;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.net.InetSocketAddress;
+import java.util.Date;
+
 /**
  * Represents a player, connected or not
  */
diff --git a/src/main/java/org/bukkit/entity/Skeleton.java b/src/main/java/org/bukkit/entity/Skeleton.java
index 1c367f78eadf24850061a84ce63b950b79d3c435..cb9b5053cb9d351a34f34d7c3c00363c4ea65053 100644
--- a/src/main/java/org/bukkit/entity/Skeleton.java
+++ b/src/main/java/org/bukkit/entity/Skeleton.java
@@ -1,8 +1,8 @@
 package org.bukkit.entity;
 
+import com.destroystokyo.paper.entity.RangedEntity;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
-import com.destroystokyo.paper.entity.RangedEntity;
 
 /**
  * Represents a Skeleton.
diff --git a/src/main/java/org/bukkit/entity/Tameable.java b/src/main/java/org/bukkit/entity/Tameable.java
index 65e68da98ab66ed781bce2f0dbe0913be48d2990..48a5abbc44e31568e614f95dbe1eff8344f46b31 100644
--- a/src/main/java/org/bukkit/entity/Tameable.java
+++ b/src/main/java/org/bukkit/entity/Tameable.java
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public interface Tameable extends Animals {
diff --git a/src/main/java/org/bukkit/entity/ThrownPotion.java b/src/main/java/org/bukkit/entity/ThrownPotion.java
index 10a3c297bd87ad3ab4555054858f47a479e76e1a..b703788a00c80f494812caa363c2174fe9c06e91 100644
--- a/src/main/java/org/bukkit/entity/ThrownPotion.java
+++ b/src/main/java/org/bukkit/entity/ThrownPotion.java
@@ -1,10 +1,11 @@
 package org.bukkit.entity;
 
-import java.util.Collection;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * Represents a thrown potion bottle
  */
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index c8777a476e38ef5e72b6709761990a339eb43d2b..f2ae3c836197d07ef35d5a0a3473a2be297b409d 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -1,13 +1,14 @@
 package org.bukkit.entity;
 
-import java.util.Locale;
-import java.util.Map; // Paper
-import java.util.UUID; // Paper
 import org.bukkit.Keyed;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable; // Paper
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Locale;
+import java.util.Map;
+import java.util.UUID;
 
 /**
  * Represents a villager NPC
diff --git a/src/main/java/org/bukkit/entity/Witch.java b/src/main/java/org/bukkit/entity/Witch.java
index cd8d0a20e52ad35f659175e0d24a1dc0e92023b9..7be855e4206e13e91965fc5acabf8363b602b05b 100644
--- a/src/main/java/org/bukkit/entity/Witch.java
+++ b/src/main/java/org/bukkit/entity/Witch.java
@@ -1,8 +1,6 @@
 package org.bukkit.entity;
 
 import com.destroystokyo.paper.entity.RangedEntity;
-
-// Paper start
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.Nullable;
 // Paper end
diff --git a/src/main/java/org/bukkit/entity/memory/MemoryKey.java b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
index 3aa8a30a5f95d44ad26240778bb2c33005c494e4..5be328b74699a07d5740009b182b160a81243068 100644
--- a/src/main/java/org/bukkit/entity/memory/MemoryKey.java
+++ b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
@@ -1,16 +1,13 @@
 package org.bukkit.entity.memory;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
 import org.bukkit.Keyed;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+
 /**
  * Represents a key used for accessing memory values of a
  * {@link org.bukkit.entity.LivingEntity}.
diff --git a/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java b/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
index db69687a7ad4b18d17ab1677cae5d8dd4dcd3678..4cb69fed09e5641c074087d7841eb8b84b5cda80 100644
--- a/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
@@ -3,7 +3,6 @@ package org.bukkit.entity.minecart;
 import com.destroystokyo.paper.loottable.LootableEntityInventory;
 import org.bukkit.entity.Minecart;
 import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.loot.Lootable;
 
 /**
  * Represents a Minecart with a Hopper inside it
diff --git a/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java b/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
index 238d118f7788b13cd86b7e9ea3a0fc38e2e09715..7416d30e283b03473170a268a01765b135e2ceac 100644
--- a/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
@@ -3,7 +3,6 @@ package org.bukkit.entity.minecart;
 import com.destroystokyo.paper.loottable.LootableEntityInventory;
 import org.bukkit.entity.Minecart;
 import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.loot.Lootable;
 
 /**
  * Represents a minecart with a chest. These types of {@link Minecart
diff --git a/src/main/java/org/bukkit/event/HandlerList.java b/src/main/java/org/bukkit/event/HandlerList.java
index ed78cca71f83b296d082d0af147ca8d622c7606a..e73e8d4c347d63f22211a9eb5105bd1bbdc24fcb 100644
--- a/src/main/java/org/bukkit/event/HandlerList.java
+++ b/src/main/java/org/bukkit/event/HandlerList.java
@@ -1,15 +1,12 @@
 package org.bukkit.event;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.ListIterator;
-import java.util.Map.Entry;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.RegisteredListener;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.*;
+import java.util.Map.Entry;
+
 /**
  * A list of event handlers, stored per-event. Based on lahwran's fevents.
  */
diff --git a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
index a0f6f1af304190b4c5db4b284d460f625eeb7801..4151fb144b14acbe1329d8a2b4b3a3b631c1847d 100644
--- a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.block;
 
-import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Item;
@@ -9,6 +8,8 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Called if a block broken by a player drops an item.
  *
diff --git a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
index 44f7f6939a27b9a0a796d91eac4b7c97ec90a643..857f061a818691626442d2c3a5614360109d16b4 100644
--- a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
@@ -1,11 +1,12 @@
 package org.bukkit.event.block;
 
-import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Called when a block explodes
  */
diff --git a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
index 695309b4b7ef269ba2496408a5f874f61cd6c445..958c13826832bf90adad17faba6a674a83c27ac5 100644
--- a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.block;
 
-import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Player;
@@ -10,6 +9,8 @@ import org.bukkit.event.world.StructureGrowEvent;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Called with the block changes resulting from a player fertilizing a given
  * block with bonemeal. Will be called after the applicable
diff --git a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
index 8460aa4f5e211fb0a6ab11f7487d38dba927e1da..9234b3023513aff076e4387413b26650bcda68d8 100644
--- a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
@@ -1,13 +1,14 @@
 package org.bukkit.event.block;
 
 import com.google.common.collect.ImmutableList;
-import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Fired when a single block placement action of a player triggers the
  * creation of multiple blocks(e.g. placing a bed block). The block returned
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
index 40ddc364971af1f266ee367f4d09d83a8e914e23..6437f76b2524b83341bebf9def6a189916b08398 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
@@ -1,13 +1,14 @@
 package org.bukkit.event.block;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Called when a piston extends
  */
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
index 340fa397e68c024df380a28db21545a0c83d9fa6..44bfdb1db130a3a75317d2f2b053040fed074d43 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.block;
 
-import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Called when a piston retracts
  */
diff --git a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
index 7029cfcd00ed5d9c7f06898ec2b81238ec775a70..260c8f0bfaeb4ff28202a38c035216866666b6e6 100644
--- a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
+++ b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.block;
 
-import java.util.List;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
@@ -8,6 +7,8 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Called when a sponge absorbs water from the world.
  * <br>
diff --git a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
index 251342c3cc6204f47ef1efb5724302a776359f4d..3242454af320225e7f2e2a543ce6785a25f837bd 100644
--- a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
+++ b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
@@ -1,9 +1,8 @@
 package org.bukkit.event.command;
 
 import org.bukkit.command.CommandSender;
-import org.bukkit.event.HandlerList;
 import org.bukkit.event.Event;
-
+import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
diff --git a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
index b898fdefc77e961b03977c1dd70fb8b8bf320871..4b9f97ddd2f6f31afb5f673f04fba60b26869682 100644
--- a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
@@ -1,7 +1,5 @@
 package org.bukkit.event.enchantment;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.block.Block;
 import org.bukkit.enchantments.Enchantment;
@@ -13,6 +11,9 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Called when an ItemStack is successfully enchanted (currently at
  * enchantment table)
diff --git a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
index a37febd0d4dd5b733e9ee72628fdf9395fec4367..8fd408e56fe6ca25e70cd4f96bdbaee98d6d7858 100644
--- a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
+++ b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
 import org.bukkit.entity.AreaEffectCloud;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Called when a lingering potion applies it's effects. Happens
  * once every 5 ticks
diff --git a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
index 397baaefd2fb45ae9d50b7b9bd5276e6ad980f20..0f20ae139997ef6896ce0924463c1cea3c26ddae 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
 import org.bukkit.PortalType;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.LivingEntity;
@@ -9,6 +8,8 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.event.world.PortalCreateEvent;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Thrown when a Living Entity creates a portal in a world.
  *
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
index 461727dc7f06efb3550fc370e0db5bd04ba89711..040375843a670f3ae319025b0089641db1133485 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.entity;
 
 import com.google.common.base.Function;
-import java.util.Map;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Called when an entity is damaged by a block
  */
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index 869bad7405ec7fa67728e90d8b9f2e11b542611f..cd1ae3aef868f8f673b3de88284d494f9e1a419a 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -1,10 +1,11 @@
 package org.bukkit.event.entity;
 
 import com.google.common.base.Function;
-import java.util.Map;
 import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * Called when an entity is damaged by an entity
  */
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index feec8b1e15cd407b7a50cfcfaba11374c0e37e82..e1f6581e45637745b12ce7dbc8f2286735b7ff73 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -3,8 +3,6 @@ package org.bukkit.event.entity;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
 import com.google.common.collect.ImmutableMap;
-import java.util.EnumMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.entity.Entity;
@@ -13,6 +11,9 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.EnumMap;
+import java.util.Map;
+
 /**
  * Stores data for damage events
  */
diff --git a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
index e19a3df9aa2204b44c0b029bda141ae6306f60a1..df7855b073e05cca07739f4cf151eba0159c4e59 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Thrown whenever a LivingEntity dies
  */
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
index 10d0e18dfd423b108fe381e8142867eb10399359..2894f71c2e2e765f5943f179840c8adababf3a20 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
@@ -8,6 +7,8 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Called when an entity explodes
  */
diff --git a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
index 37dbc12eb47060ebf0f6a18960d036bd27ce3740..88b4f684140d0b698e823f77dd95a8f3e085a64e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
@@ -2,7 +2,6 @@ package org.bukkit.event.entity;
 
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Projectile; // Paper
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
index 1370380ae28fced98239798bbf54d2a7ea9274ae..8f5c554b48b991827604de0e1587e6dc58ca3887 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.entity;
 
-import java.util.Collections;
-import java.util.List;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Called when an entity is about to be replaced by another entity.
  */
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
index d3949edfc736b3d67a627ef378748b374769e183..f7829a522e17228431022c2923bdd6c9f3ba2ed3 100644
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
@@ -1,13 +1,10 @@
 package org.bukkit.event.entity;
 
-import java.util.Collections;
-import org.bukkit.entity.Entity;
 import com.destroystokyo.paper.event.entity.EntityZapEvent;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.entity.Pig;
 import org.bukkit.entity.PigZombie;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index 3a743430acb5eecc4d8db068fa62fe6d38a249e5..9a25a58d260b440a4ff07b715b8652aec8a6bb12 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -1,13 +1,13 @@
 package org.bukkit.event.entity;
 
-import java.util.List;
-
 import org.bukkit.GameMode;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Thrown whenever a {@link Player} dies
  */
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
index 90d7e8141a18ec7dd97288e90803e37591a51a4f..f4f4ef18198c1fc40826df8f1327e0c8d6cbc69d 100644
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
@@ -1,8 +1,5 @@
 package org.bukkit.event.entity;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.ThrownPotion;
@@ -10,6 +7,10 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
+
 /**
  * Called when a splash potion hits an area
  */
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
index 856e945c516f2d379e3a88b3ca533fc5ad73bc33..1302313d5b86296996c5dddb8e757186f5d73042 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
@@ -1,9 +1,6 @@
 package org.bukkit.event.inventory;
 
 import com.google.common.collect.ImmutableSet;
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.entity.HumanEntity;
@@ -17,6 +14,10 @@ import org.bukkit.scheduler.BukkitScheduler;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
+
 /**
  * This event is called when the player drags an item in their cursor across
  * the inventory. The ItemStack is distributed across the slots the
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
index 5d3fe64ab9c5d6a9d0525495c52b77cedcb880b0..b4a1f58054ec0801c6a00c5ac8f63127ad3db103 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
@@ -1,7 +1,6 @@
 
 package org.bukkit.event.inventory;
 
-import java.util.List;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
@@ -9,6 +8,8 @@ import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Represents a player related inventory event
  */
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
index f1f6f4ab4f81a3f21e757fef4a30b00e94371f8d..04e9626ef920f90a8e287a36e003bc4c4a6c5ede 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
@@ -1,7 +1,6 @@
 package org.bukkit.event.inventory;
 
 import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
-import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.AnvilInventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
index 0bc0ca4f96c800e9c46c61710f44446691d8b93f..4c8659b479842853739b43d685f5bc82820639c7 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
@@ -1,7 +1,6 @@
 package org.bukkit.event.inventory;
 
 import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
-import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.SmithingInventory;
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
index 9c68c3f2d61500479f48b80264f625aaae2f3204..6aa5ad507159f6ff78a9e9d25e8a547cb9276200 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.player;
 
-import java.util.IllegalFormatException;
-import java.util.Set;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.IllegalFormatException;
+import java.util.Set;
+
 /**
  * This event will sometimes fire synchronously, depending on how it was
  * triggered.
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index e5b811229830e4d55b08ab18bedec1494ff342ac..dd67f4ca29258f7b4ac5ae96af32ca494fc00aff 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -1,14 +1,14 @@
 package org.bukkit.event.player;
 
-import java.net.InetAddress;
-import java.util.UUID;
-
 import com.destroystokyo.paper.profile.PlayerProfile;
 import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.net.InetAddress;
+import java.util.UUID;
+
 /**
  * Stores details for players attempting to log in.
  * <p>
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
index 8ea56aac752544f798728b429e7152afbee497e4..4cc54eeecb1ea4a9915115da35da04a61c9dfea5 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
@@ -1,7 +1,5 @@
 package org.bukkit.event.player;
 
-import java.util.HashSet;
-import java.util.Set;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Warning;
 import org.bukkit.entity.Player;
@@ -9,6 +7,9 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.HashSet;
+import java.util.Set;
+
 /**
  * Holds information for player chat and commands
  *
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
index 0b99c7fb228660878b3f4b8c1beb58d82489701e..e58ea31c1b3633461db50cb96d7b4f6fb0354836 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.player;
 
-import java.util.Collection;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Warning;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * Called when a player attempts to tab-complete a chat message.
  *
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
index a6dae91073ffc054d616d73941ff4d033989f5f3..a794c57b0b6ef35101aa8b7cc75e9f8556bc33b8 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
@@ -1,13 +1,14 @@
 package org.bukkit.event.player;
 
-import java.util.HashSet;
-import java.util.Set;
 import org.apache.commons.lang.Validate;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.HashSet;
+import java.util.Set;
+
 /**
  * This event is called whenever a player runs a command (by placing a slash
  * at the start of their message). It is called early in the command handling
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
index 762825997f1c6249de4ba5a0618d94bd1ec9ef33..2d41822428fd5175a3a6beac46be79ac7e7f30f5 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
@@ -1,10 +1,11 @@
 package org.bukkit.event.player;
 
-import java.util.Collection;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * This event is called when the list of available server commands is sent to
  * the player.
diff --git a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
index 7c340f539c31a431d7d9204a8135e0bfc31863a8..9c38e6af6e647a371dc5c3f8c4ca04c22e591382 100644
--- a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
@@ -1,11 +1,10 @@
 package org.bukkit.event.player;
 
-import org.bukkit.entity.Entity; // Paper
+import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
-
-import org.jetbrains.annotations.Nullable; // Paper
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Called when a players experience changes naturally
diff --git a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
index 0ee86dca0452483bbc08d7b253c952adea29742c..31ebd67a094688878b333df6020c78edfab32278 100644
--- a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.player;
 
-import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -8,6 +7,8 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * This event is called whenever a player harvests a block.
  * <br>
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 084ca8cfcb7381bfa4fa6280748cf9b81210a9c1..51e997476730e45ca5ca6796fb043c73fc0a87bd 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -1,10 +1,11 @@
 package org.bukkit.event.player;
 
-import java.net.InetAddress;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.net.InetAddress;
+
 /**
  * Stores details for players attempting to log in.
  * <br>
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
index fb066251f793ec3b41bfc075b9478901b15ee549..fc7d5786a6e79b0063d9d1bbc77f9d3f7f7261be 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.player;
 
-import java.net.InetAddress;
-import java.util.UUID;
 import org.bukkit.Warning;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.net.InetAddress;
+import java.util.UUID;
+
 /**
  * Stores details for players attempting to log in
  *
diff --git a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
index f0d280b8c1c1db802c420fe77a77f4b9871f281e..74d5739a8db0ff8744bb2c68cc980734b397abd8 100644
--- a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
@@ -1,13 +1,14 @@
 package org.bukkit.event.raid;
 
-import java.util.Collections;
-import java.util.List;
 import org.bukkit.Raid;
 import org.bukkit.World;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collections;
+import java.util.List;
+
 /**
  * This event is called when a {@link Raid} was complete with a clear result.
  */
diff --git a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
index cd58dd7de781823804701fc023706e805c0142a8..e9ae947f6a01a874e3ef2b2a56b4726bf64edccb 100644
--- a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
@@ -1,7 +1,5 @@
 package org.bukkit.event.raid;
 
-import java.util.Collections;
-import java.util.List;
 import org.bukkit.Raid;
 import org.bukkit.World;
 import org.bukkit.entity.Raider;
@@ -9,6 +7,9 @@ import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Called when a raid wave spawns.
  */
diff --git a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
index 03bfca9d368bbe4b7c1353d52c883e756bf69bda..8887b2b2fdb64eb99ed3b147ee77d52141ab107b 100644
--- a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
+++ b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.server;
 
-import java.util.Set;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.AsyncPlayerChatEvent;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * Event triggered for server broadcast messages such as from
  * {@link org.bukkit.Server#broadcast(String, String)}.
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
index 7a2a58bac8e721c3f0c64f69f77be07a51f76d58..f3e4b9cf12bc805d86e96c60c7301b31eac0e130 100644
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
@@ -1,7 +1,5 @@
 package org.bukkit.event.server;
 
-import java.net.InetAddress;
-import java.util.Iterator;
 import org.apache.commons.lang.Validate;
 import org.bukkit.UndefinedNullability;
 import org.bukkit.entity.Player;
@@ -9,6 +7,9 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.util.CachedServerIcon;
 import org.jetbrains.annotations.NotNull;
 
+import java.net.InetAddress;
+import java.util.Iterator;
+
 /**
  * Called when a server list ping is coming in. Displayed players can be
  * checked and removed by {@link #iterator() iterating} over this event.
diff --git a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
index f96c4ba53ab41ea66d4f9a4d54eeabb63f992b58..0823f1c044205e3670d79d60758b1187ee290f69 100644
--- a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
@@ -1,7 +1,5 @@
 package org.bukkit.event.server;
 
-import java.util.ArrayList;
-import java.util.List;
 import org.apache.commons.lang.Validate;
 import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
@@ -11,6 +9,9 @@ import org.bukkit.event.player.PlayerCommandSendEvent;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Called when a {@link CommandSender} of any description (ie: player or
  * console) attempts to tab complete.
diff --git a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
index e051dc8b94893a0aa729996695aae91de57f3acd..bb3e634dfc02b48a8e33b72058fda0822a4bf884 100644
--- a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
+++ b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
@@ -1,7 +1,5 @@
 package org.bukkit.event.world;
 
-import java.util.Collection;
-import java.util.List;
 import org.bukkit.World;
 import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
@@ -14,6 +12,9 @@ import org.bukkit.loot.LootTable;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.List;
+
 /**
  * Called when a {@link LootTable} is generated in the world for an
  * {@link InventoryHolder}.
diff --git a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
index 579f017474ff22f0991ca884c35cdde7e14a94dc..85f395ed5b5bf479936feac1b27e790a78571142 100644
--- a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
+++ b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.world;
 
-import java.util.List;
 import org.bukkit.World;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Entity;
@@ -9,6 +8,8 @@ import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Called when a portal is created
  */
diff --git a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
index 7af8d6e51c824cf0592b722b834f1d4986e3cc08..67b78850d0cb8923cccf3d9f22e08406272e861d 100644
--- a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
+++ b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.world;
 
-import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -10,6 +9,8 @@ import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Event that is called when an organic structure attempts to grow (Sapling {@literal ->}
  * Tree), (Mushroom {@literal ->} Huge Mushroom), naturally or using bonemeal.
diff --git a/src/main/java/org/bukkit/generator/BlockPopulator.java b/src/main/java/org/bukkit/generator/BlockPopulator.java
index e5e3a6a548630ce79fb90d96a40f66af3d5508ee..0b868107d7960c0d9dfd3e280c22e0d4e9de30ba 100644
--- a/src/main/java/org/bukkit/generator/BlockPopulator.java
+++ b/src/main/java/org/bukkit/generator/BlockPopulator.java
@@ -1,10 +1,11 @@
 package org.bukkit.generator;
 
-import java.util.Random;
 import org.bukkit.Chunk;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Random;
+
 /**
  * A block populator is responsible for generating a small area of blocks.
  * <p>
diff --git a/src/main/java/org/bukkit/generator/ChunkGenerator.java b/src/main/java/org/bukkit/generator/ChunkGenerator.java
index 5ba77d40a38e5e592ee265e4fbd510043a0b4345..80963c51573ab92a3301e94fdb8082490a75deb8 100644
--- a/src/main/java/org/bukkit/generator/ChunkGenerator.java
+++ b/src/main/java/org/bukkit/generator/ChunkGenerator.java
@@ -1,8 +1,5 @@
 package org.bukkit.generator;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -14,6 +11,10 @@ import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
 /**
  * A chunk generator is responsible for the initial shaping of an entire
  * chunk. For example, the nether chunk generator should shape netherrack and
diff --git a/src/main/java/org/bukkit/help/HelpMap.java b/src/main/java/org/bukkit/help/HelpMap.java
index 48997b5c8ef15f11328868e35b487d2b64975ab0..7a8795f80de93a0f3c5d78cd874de10a4d71fcd6 100644
--- a/src/main/java/org/bukkit/help/HelpMap.java
+++ b/src/main/java/org/bukkit/help/HelpMap.java
@@ -1,10 +1,11 @@
 package org.bukkit.help;
 
-import java.util.Collection;
-import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.List;
+
 /**
  * The HelpMap tracks all help topics registered in a Bukkit server. When the
  * server starts up or is reloaded, help is processed and topics are added in
diff --git a/src/main/java/org/bukkit/help/HelpTopicComparator.java b/src/main/java/org/bukkit/help/HelpTopicComparator.java
index 75bb69283f509e8f4fec772714a509a51be9de19..45f14e04142d63e1b3ef2be6e20dd9c815e5b84e 100644
--- a/src/main/java/org/bukkit/help/HelpTopicComparator.java
+++ b/src/main/java/org/bukkit/help/HelpTopicComparator.java
@@ -1,8 +1,9 @@
 package org.bukkit.help;
 
-import java.util.Comparator;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Comparator;
+
 /**
  * Used to impose a custom total ordering on help topics.
  * <p>
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
index 88a812d66b7eea7389103b9c2776a8adcfc141c7..f24d7235561c0f917f596b699ebdb6a46eb3fd71 100644
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java
@@ -1,6 +1,5 @@
 package org.bukkit.help;
 
-import java.util.Collection;
 import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
@@ -9,6 +8,8 @@ import org.bukkit.util.ChatPaginator;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+
 /**
  * This help topic generates a list of other help topics. This class is useful
  * for adding your own index help topics. To enforce a particular order, use a
diff --git a/src/main/java/org/bukkit/inventory/CookingRecipe.java b/src/main/java/org/bukkit/inventory/CookingRecipe.java
index 6f251252aa96f202139103c657a81c71a0ffbfaf..62ae78a7ddaf6ee70fde222621d3f13559de6595 100644
--- a/src/main/java/org/bukkit/inventory/CookingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/CookingRecipe.java
@@ -1,12 +1,13 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import java.util.Collections;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collections;
+
 /**
  * Represents a cooking recipe.
  * @param <T> type of recipe
diff --git a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
index 1d442dc16cbb0fed21714d47007f3f11e30c57d4..860363507f4c5f7ffb5e8b65a4f6cec1cdfbc0b6 100644
--- a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
+++ b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
@@ -1,11 +1,12 @@
 package org.bukkit.inventory;
 
-import java.util.Collections;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collections;
+
 /**
  * Represents a furnace recipe.
  */
diff --git a/src/main/java/org/bukkit/inventory/GrindstoneInventory.java b/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
index 1c750108f55a0a31ad23433b333e0ea486a63ff2..d09a45c9730990084f9f96a837b8a7db968be20e 100644
--- a/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
+++ b/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
@@ -1,6 +1,6 @@
 package org.bukkit.inventory;
 
-import org.jetbrains.annotations.Nullable; // Paper
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Interface to the inventory of a Grindstone.
diff --git a/src/main/java/org/bukkit/inventory/HorseInventory.java b/src/main/java/org/bukkit/inventory/HorseInventory.java
index 53498debe4cfb80592ef3025270bc8e5df4a5fec..e14c1277c3051acd1aa47658f58e3ef3e4a3662f 100644
--- a/src/main/java/org/bukkit/inventory/HorseInventory.java
+++ b/src/main/java/org/bukkit/inventory/HorseInventory.java
@@ -1,7 +1,5 @@
 package org.bukkit.inventory;
 
-import org.jetbrains.annotations.Nullable;
-
 /**
  * An interface to the inventory of a Horse.
  */
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
index 753c052291afb0455df8298ea3a8209778ba400f..3a0643b918a3c7d303f71c495bed8c1e9575e23f 100644
--- a/src/main/java/org/bukkit/inventory/Inventory.java
+++ b/src/main/java/org/bukkit/inventory/Inventory.java
@@ -1,8 +1,5 @@
 package org.bukkit.inventory;
 
-import java.util.HashMap;
-import java.util.List;
-import java.util.ListIterator;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.entity.HumanEntity;
@@ -11,6 +8,10 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.List;
+import java.util.ListIterator;
+
 /**
  * Interface to the various inventories. Behavior relating to {@link
  * Material#AIR} is unspecified.
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index b93df6bea4af1b2d4123be031adecf030bcc3893..428ceabb5355794317c855e962d7988c8b837c7f 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1,10 +1,6 @@
 package org.bukkit.inventory;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.LinkedHashMap;
-import java.util.List; // Paper
-import java.util.Map;
-import java.util.Set; // Paper
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
@@ -18,6 +14,11 @@ import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 /**
  * Represents a stack of items.
  * <p>
diff --git a/src/main/java/org/bukkit/inventory/Merchant.java b/src/main/java/org/bukkit/inventory/Merchant.java
index 9861bcedde6e63009d0775c57c63893aaf7870fa..e879a5278e6c25edf0668e347d6b07f5aeea45e1 100644
--- a/src/main/java/org/bukkit/inventory/Merchant.java
+++ b/src/main/java/org/bukkit/inventory/Merchant.java
@@ -1,10 +1,11 @@
 package org.bukkit.inventory;
 
-import java.util.List;
 import org.bukkit.entity.HumanEntity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents a merchant. A merchant is a special type of inventory which can
  * facilitate custom trades between items.
diff --git a/src/main/java/org/bukkit/inventory/MerchantRecipe.java b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
index 1fb4a1c53791776f9c5a952a592f15fc35cb2703..149e63b3a6ec6c71554850b28a787b83bb729e25 100644
--- a/src/main/java/org/bukkit/inventory/MerchantRecipe.java
+++ b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
@@ -1,9 +1,10 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayList;
 import java.util.List;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a merchant's trade.
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index 3d325cab6b106ce8617e321d7a733eca91ba93e5..92255656afc140220522261f82ed4b954d542dd8 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -1,16 +1,13 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Objects;
-import java.util.function.Predicate;
 import org.bukkit.Material;
 import org.bukkit.Tag;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.*;
+import java.util.function.Predicate;
+
 /**
  * Represents a potential item match within a recipe. All choices within a
  * recipe must be satisfied for it to be craftable.
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 222a12baa8e93ad686ab59426653f066d5876e38..62d20e28aa26f9d7dedac126f8c2e4e22845c080 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -1,9 +1,6 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
@@ -11,6 +8,10 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Represents a shaped (ie normal) crafting recipe.
  */
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index ddcf84e6609abe8379cca2ff99983ce3efbab805..9d71e03be3342a3204725ed4aff56a2847373335 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -1,10 +1,6 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
@@ -12,6 +8,11 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
 /**
  * Represents a shapeless recipe, where the arrangement of the ingredients on
  * the crafting grid does not matter.
diff --git a/src/main/java/org/bukkit/inventory/StonecutterInventory.java b/src/main/java/org/bukkit/inventory/StonecutterInventory.java
index e7a8e7188bf8b9840de56dc80c2b79d64a9389cb..160b44f36f5b0f985e4c1aa31e53b8ce6d9614bd 100644
--- a/src/main/java/org/bukkit/inventory/StonecutterInventory.java
+++ b/src/main/java/org/bukkit/inventory/StonecutterInventory.java
@@ -1,6 +1,6 @@
 package org.bukkit.inventory;
 
-import org.jetbrains.annotations.Nullable; // Paper
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Interface to the inventory of a Stonecutter.
diff --git a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
index d8ef781d6b025790ce9d2a9782e6ef2a47cc8e62..9c59aec2525e1a71def39fd3dc71d40dc0b55dcb 100644
--- a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
@@ -1,12 +1,13 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import java.util.Collections;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collections;
+
 /**
  * Represents a Stonecutting recipe.
  */
diff --git a/src/main/java/org/bukkit/inventory/meta/BannerMeta.java b/src/main/java/org/bukkit/inventory/meta/BannerMeta.java
index 4739d2ecc26e7e4adc1b297013da98e12fe58783..c8c8f4405bf892a61ebd8cdc28ae91d588ef8f76 100644
--- a/src/main/java/org/bukkit/inventory/meta/BannerMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BannerMeta.java
@@ -1,11 +1,12 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import org.bukkit.DyeColor;
 import org.bukkit.block.banner.Pattern;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 public interface BannerMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 94852d50e88d0594b84b581cd627174043629995..4ad51d1cf1ad4ea1ea703dbb0fc7c8dd020e074d 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -1,11 +1,12 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Material;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents a book ({@link Material#WRITABLE_BOOK} or {@link
  * Material#WRITTEN_BOOK}) that can have a title, an author, and pages.
diff --git a/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java b/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
index 35c6594fd1040a1af1029e7260e5e3a9307b107d..6dcdb271166d3a3ff601f93b156e78ab8c72955b 100644
--- a/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/CrossbowMeta.java
@@ -1,10 +1,11 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 public interface CrossbowMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java b/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
index aae2ed2ec4498101ce78b7f96fed1b8c341ffc4f..1b786f24140a5767228c9bef228a864c5c9f6fc5 100644
--- a/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/EnchantmentStorageMeta.java
@@ -1,10 +1,11 @@
 package org.bukkit.inventory.meta;
 
-import java.util.Map;
 import org.bukkit.Material;
 import org.bukkit.enchantments.Enchantment;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * EnchantmentMeta is specific to items that can <i>store</i> enchantments, as
  * opposed to being enchanted. {@link Material#ENCHANTED_BOOK} is an example
diff --git a/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java b/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
index fe23948170ccb101d58730d0066233d334022331..ded985ec52eb8045a896aef57b4b65236a78bc91 100644
--- a/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/FireworkMeta.java
@@ -1,10 +1,11 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import org.bukkit.FireworkEffect;
 import org.bukkit.Material;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Represents a {@link Material#FIREWORK_ROCKET} and its effects.
  */
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 5db838cab09888c3b3537e122e0e381a78e1dbb7..1e3ff677d26b9ecec398266ee82ef5a91699e291 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -1,10 +1,6 @@
 package org.bukkit.inventory.meta;
 
 import com.google.common.collect.Multimap;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -16,6 +12,11 @@ import org.bukkit.persistence.PersistentDataHolder;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 /**
  * This type represents the storage mechanism for auxiliary item data.
  * <p>
diff --git a/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java b/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
index 736c60c71d112e8c017473a93091b4e5336a996f..594cefd3ee790c550b98bfaaf67dc0fcb915bc03 100644
--- a/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/KnowledgeBookMeta.java
@@ -1,9 +1,10 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 public interface KnowledgeBookMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
index 1056849dc3a0dc91c5485a0c55ef96ad3aa187c4..ec61fba71c0028708b01177b6ce819703edf49e0 100644
--- a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
@@ -1,6 +1,5 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
@@ -8,6 +7,8 @@ import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents a potion or item that can have custom effects.
  */
diff --git a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
index c2f4282c188e7d8041459cb3acaad674443ba147..68fcc6086406577738d2c3195850cf832b180cc8 100644
--- a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
@@ -1,10 +1,11 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Represents a suspicious stew that can have custom effects.
  */
diff --git a/src/main/java/org/bukkit/loot/LootTable.java b/src/main/java/org/bukkit/loot/LootTable.java
index 73aa119b6e2d0d02c9c60ec5157573ceaabf4e3b..b391b55de8ab54b8d13a430038731a3fa4c0f65c 100644
--- a/src/main/java/org/bukkit/loot/LootTable.java
+++ b/src/main/java/org/bukkit/loot/LootTable.java
@@ -1,12 +1,13 @@
 package org.bukkit.loot;
 
-import java.util.Collection;
-import java.util.Random;
 import org.bukkit.Keyed;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+import java.util.Random;
+
 /**
  * LootTables are technical files that represent what items should be in
  * naturally generated containers, what items should be dropped when killing a
diff --git a/src/main/java/org/bukkit/map/MapCanvas.java b/src/main/java/org/bukkit/map/MapCanvas.java
index cc1714019d7a6c230948dc62dae5ba19b95f2fe7..5f039d15daa27513ac4f400de6776bdfed9b5737 100644
--- a/src/main/java/org/bukkit/map/MapCanvas.java
+++ b/src/main/java/org/bukkit/map/MapCanvas.java
@@ -1,8 +1,9 @@
 package org.bukkit.map;
 
-import java.awt.Image;
 import org.jetbrains.annotations.NotNull;
 
+import java.awt.*;
+
 /**
  * Represents a canvas for drawing to a map. Each canvas is associated with a
  * specific {@link MapRenderer} and represents that renderer's layer on the
diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java
index 4dba721aefe4fc6699b3b4bfa7ecb0b19c2a2a1a..be0683ba61d4839500956d89236f9ec9c91b9ffa 100644
--- a/src/main/java/org/bukkit/map/MapCursorCollection.java
+++ b/src/main/java/org/bukkit/map/MapCursorCollection.java
@@ -1,10 +1,11 @@
 package org.bukkit.map;
 
-import java.util.ArrayList;
-import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Represents all the map cursors on a {@link MapCanvas}. Like MapCanvas, a
  * MapCursorCollection is linked to a specific {@link MapRenderer}.
diff --git a/src/main/java/org/bukkit/map/MapFont.java b/src/main/java/org/bukkit/map/MapFont.java
index 2d599c8f3ef1df4c1bde87e502f794984b9401bc..1092c58315e52683b79c43ee01541c4ea22d7904 100644
--- a/src/main/java/org/bukkit/map/MapFont.java
+++ b/src/main/java/org/bukkit/map/MapFont.java
@@ -1,10 +1,11 @@
 package org.bukkit.map;
 
-import java.util.HashMap;
 import org.bukkit.ChatColor;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+
 /**
  * Represents a bitmap font drawable to a map.
  */
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
index 95fe3f4d081053a6cf484e4ef07b474f2dc2ab02..36d9b177623a2ec0588ff0637e1d9f7e3f2dc7be 100644
--- a/src/main/java/org/bukkit/map/MapPalette.java
+++ b/src/main/java/org/bukkit/map/MapPalette.java
@@ -1,12 +1,11 @@
 package org.bukkit.map;
 
-import java.awt.Color;
-import java.awt.Graphics2D;
-import java.awt.Image;
-import java.awt.image.BufferedImage;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.awt.*;
+import java.awt.image.BufferedImage;
+
 /**
  * Represents the palette that map items use.
  * <p>
diff --git a/src/main/java/org/bukkit/map/MapView.java b/src/main/java/org/bukkit/map/MapView.java
index 9b8b68b66dc15b06800251702c2722623c8462a0..5873ced977965613df67621d25a46b38a30f03a9 100644
--- a/src/main/java/org/bukkit/map/MapView.java
+++ b/src/main/java/org/bukkit/map/MapView.java
@@ -1,11 +1,12 @@
 package org.bukkit.map;
 
-import java.util.List;
 import org.bukkit.World;
 import org.bukkit.inventory.meta.MapMeta;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents a map item.
  */
diff --git a/src/main/java/org/bukkit/material/MonsterEggs.java b/src/main/java/org/bukkit/material/MonsterEggs.java
index 2fac218f1e237d4b867c1e6215fe40151dcceaf0..b424b622602e0a7a32ee8006570c85017b301594 100644
--- a/src/main/java/org/bukkit/material/MonsterEggs.java
+++ b/src/main/java/org/bukkit/material/MonsterEggs.java
@@ -1,8 +1,9 @@
 package org.bukkit.material;
 
+import org.bukkit.Material;
+
 import java.util.ArrayList;
 import java.util.List;
-import org.bukkit.Material;
 
 /**
  * Represents the different types of monster eggs
diff --git a/src/main/java/org/bukkit/material/Mushroom.java b/src/main/java/org/bukkit/material/Mushroom.java
index 543b76c8a659a488c3e87d7b59b2f14cf7d651f1..2b45156ee38abd9ec5a350fa59dfbef61bf07d90 100644
--- a/src/main/java/org/bukkit/material/Mushroom.java
+++ b/src/main/java/org/bukkit/material/Mushroom.java
@@ -1,12 +1,13 @@
 package org.bukkit.material;
 
-import java.util.EnumSet;
-import java.util.Set;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 import org.bukkit.material.types.MushroomBlockTexture;
 
+import java.util.EnumSet;
+import java.util.Set;
+
 /**
  * Represents a huge mushroom block with certain combinations of faces set to
  * cap, pores or stem.
diff --git a/src/main/java/org/bukkit/material/SmoothBrick.java b/src/main/java/org/bukkit/material/SmoothBrick.java
index e4812b7cef9847745d147aad87181c4eb903f5df..6ab768762c77bb0c40cf9df94a7b4203dda5dde5 100644
--- a/src/main/java/org/bukkit/material/SmoothBrick.java
+++ b/src/main/java/org/bukkit/material/SmoothBrick.java
@@ -1,8 +1,9 @@
 package org.bukkit.material;
 
+import org.bukkit.Material;
+
 import java.util.ArrayList;
 import java.util.List;
-import org.bukkit.Material;
 
 /**
  * Represents the different types of smooth bricks.
diff --git a/src/main/java/org/bukkit/material/Step.java b/src/main/java/org/bukkit/material/Step.java
index 9f502e7ee05d0512e190a1722cc112ece068c4e2..2b20e77dfded15b0b68159b6941ccfbcd3a814a3 100644
--- a/src/main/java/org/bukkit/material/Step.java
+++ b/src/main/java/org/bukkit/material/Step.java
@@ -1,8 +1,9 @@
 package org.bukkit.material;
 
+import org.bukkit.Material;
+
 import java.util.ArrayList;
 import java.util.List;
-import org.bukkit.Material;
 
 /**
  * Represents the different types of steps.
diff --git a/src/main/java/org/bukkit/material/TexturedMaterial.java b/src/main/java/org/bukkit/material/TexturedMaterial.java
index 6e0a834794453eff7b3efc93e90c9bf49ef7c688..7b30258c8eb102dcaa396d6eec75607bc9077eb1 100644
--- a/src/main/java/org/bukkit/material/TexturedMaterial.java
+++ b/src/main/java/org/bukkit/material/TexturedMaterial.java
@@ -1,8 +1,9 @@
 package org.bukkit.material;
 
-import java.util.List;
 import org.bukkit.Material;
 
+import java.util.List;
+
 /**
  * Represents textured materials like steps and smooth bricks
  *
diff --git a/src/main/java/org/bukkit/material/Vine.java b/src/main/java/org/bukkit/material/Vine.java
index 07a4f3b1511e274affe751aad2b9020b49df815f..f6e660aa788558920ba29dd8d39449481fb2e77e 100644
--- a/src/main/java/org/bukkit/material/Vine.java
+++ b/src/main/java/org/bukkit/material/Vine.java
@@ -1,10 +1,11 @@
 package org.bukkit.material;
 
-import java.util.Arrays;
-import java.util.EnumSet;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 
+import java.util.Arrays;
+import java.util.EnumSet;
+
 /**
  * Represents a vine
  *
diff --git a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
index 0ea9c6b2420a0f990bd1fdf50fc015e37a7060d8..24c2073dda1cf9423cf008aca0c4d815b2fc36a4 100644
--- a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
+++ b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
@@ -1,10 +1,11 @@
 package org.bukkit.material.types;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.bukkit.block.BlockFace;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the different textured blocks of mushroom.
  */
diff --git a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
index 86e0e3767e6e711bd58660a102e98c917a585b1b..de4b317e76f7c949e29952ba979aaab778f04792 100644
--- a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
@@ -1,12 +1,13 @@
 package org.bukkit.metadata;
 
-import java.lang.ref.SoftReference;
-import java.util.concurrent.Callable;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.ref.SoftReference;
+import java.util.concurrent.Callable;
+
 /**
  * The LazyMetadataValue class implements a type of metadata that is not
  * computed until another plugin asks for it.
diff --git a/src/main/java/org/bukkit/metadata/MetadataStore.java b/src/main/java/org/bukkit/metadata/MetadataStore.java
index 29f86fa938c2758cbdf8dec22519a18c3e119818..1ebba41f4a10faf4bd1120f71455400904698456 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStore.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStore.java
@@ -1,9 +1,10 @@
 package org.bukkit.metadata;
 
-import java.util.List;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 public interface MetadataStore<T> {
     /**
      * Adds a metadata value to an object.
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
index abbe545af572687a0399c2387434863cd2b70f68..9a40bea9e4b0a6123e33a4bc49774c841c28a5b5 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
@@ -1,17 +1,11 @@
 package org.bukkit.metadata;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator; // Paper
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.*;
+
 public abstract class MetadataStoreBase<T> {
     private Map<String, Map<Plugin, MetadataValue>> metadataMap = new java.util.concurrent.ConcurrentHashMap<String, Map<Plugin, MetadataValue>>(); // Paper
 
diff --git a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
index b90d09f57bdab627abdf8a54438b1b531f2c6827..d14dec86eff1a1a8778befa7457c5a3653f2f557 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
@@ -1,12 +1,13 @@
 package org.bukkit.metadata;
 
-import java.lang.ref.WeakReference;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.NumberConversions;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.ref.WeakReference;
+
 /**
  * Optional base class for facilitating MetadataValue implementations.
  * <p>
diff --git a/src/main/java/org/bukkit/metadata/Metadatable.java b/src/main/java/org/bukkit/metadata/Metadatable.java
index b35f41a15fc729d62474a0b38d59ca7895951f2c..891e516083cc7261d238144662dd6cdc3f1db863 100644
--- a/src/main/java/org/bukkit/metadata/Metadatable.java
+++ b/src/main/java/org/bukkit/metadata/Metadatable.java
@@ -1,9 +1,10 @@
 package org.bukkit.metadata;
 
-import java.util.List;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * This interface is implemented by all objects that can provide metadata
  * about themselves.
diff --git a/src/main/java/org/bukkit/permissions/Permissible.java b/src/main/java/org/bukkit/permissions/Permissible.java
index 228421154913116069c20323afb519bdde2134df..2fe3d7e9971d882764e2918ff1c1a593f40a3321 100644
--- a/src/main/java/org/bukkit/permissions/Permissible.java
+++ b/src/main/java/org/bukkit/permissions/Permissible.java
@@ -1,10 +1,11 @@
 package org.bukkit.permissions;
 
-import java.util.Set;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Set;
+
 /**
  * Represents an object that may be assigned permissions
  */
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
index c94e4cdb5785d5dfcb704c4adabda0b19a20ec7d..945573f6a7a82f849f15a525761f0a7ec867c400 100644
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java
@@ -1,17 +1,13 @@
 package org.bukkit.permissions;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.logging.Level;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+import java.util.logging.Level;
+
 /**
  * Base Permissible for use in any Permissible object via proxy or extension
  */
diff --git a/src/main/java/org/bukkit/permissions/Permission.java b/src/main/java/org/bukkit/permissions/Permission.java
index 91d45b965724bc3ecf9697b88bafa88c010e9ada..71e5f3e3b2b70f83a8707bba28847436c5cf1948 100644
--- a/src/main/java/org/bukkit/permissions/Permission.java
+++ b/src/main/java/org/bukkit/permissions/Permission.java
@@ -1,17 +1,14 @@
 package org.bukkit.permissions;
 
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.logging.Level;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.PluginManager;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+import java.util.logging.Level;
+
 /**
  * Represents a unique permission that may be attached to a {@link
  * Permissible}
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachment.java b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
index cd8ac371a16173e2415c2628a96c1dc3c6ca895d..8ab583927799da4c2603ac827fe52495f2dbdfa8 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachment.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
@@ -1,11 +1,12 @@
 package org.bukkit.permissions;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 /**
  * Holds information about a permission attachment on a {@link Permissible}
  * object
diff --git a/src/main/java/org/bukkit/permissions/PermissionDefault.java b/src/main/java/org/bukkit/permissions/PermissionDefault.java
index 449df7c798084669c1f39cbeb5c72c4b17a67162..3380f2f20f21cc0f34c3c661fe902ce05cd59d54 100644
--- a/src/main/java/org/bukkit/permissions/PermissionDefault.java
+++ b/src/main/java/org/bukkit/permissions/PermissionDefault.java
@@ -1,10 +1,11 @@
 package org.bukkit.permissions;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Represents the possible default values for permissions
  */
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index bf2a957be52d86d07d7d303c86bd3da5fe0a16c0..ebf6252749d7e3e4e36537f0650a6181769bc728 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -1,10 +1,11 @@
 package org.bukkit.persistence;
 
-import java.util.Set;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Set;
+
 /**
  * This interface represents a map like object, capable of storing custom tags
  * in it.
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
index 9026e108ccd3a88aee1267ee275137befa646455..a879801e435e6fc0f78c5ae440d1342298fea729 100644
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java
@@ -1,22 +1,20 @@
 package org.bukkit.plugin;
 
+import com.destroystokyo.paper.event.executor.MethodHandleEventExecutor;
+import com.destroystokyo.paper.event.executor.StaticMethodHandleEventExecutor;
+import com.destroystokyo.paper.event.executor.asm.ASMEventExecutorGenerator;
+import com.destroystokyo.paper.event.executor.asm.ClassDefiner;
+import com.google.common.base.Preconditions;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
 import org.jetbrains.annotations.NotNull;
 
-// Paper start
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.function.Function;
-
-import com.destroystokyo.paper.event.executor.MethodHandleEventExecutor;
-import com.destroystokyo.paper.event.executor.StaticMethodHandleEventExecutor;
-import com.destroystokyo.paper.event.executor.asm.ASMEventExecutorGenerator;
-import com.destroystokyo.paper.event.executor.asm.ClassDefiner;
-import com.google.common.base.Preconditions;
 // Paper end
 
 /**
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 79890c68f1ad31f951dfdbd9a16dac500ec58c40..9bb6821f881f1c43a03410d4e92afeb308e3f962 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -1,8 +1,5 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.io.InputStream;
-import java.util.logging.Logger;
 import org.bukkit.Server;
 import org.bukkit.command.TabExecutor;
 import org.bukkit.configuration.file.FileConfiguration;
@@ -10,6 +7,10 @@ import org.bukkit.generator.ChunkGenerator;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
+import java.io.InputStream;
+import java.util.logging.Logger;
+
 /**
  * Represents a Plugin
  * <p>
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index f78a7df6e2edbbbaeb0edf4330125b2c2fa39a57..9d7ba043bf971e78f30ba751ea036ea54b54fe7d 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -3,20 +3,7 @@ package org.bukkit.plugin;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import java.io.InputStream;
-import java.io.Reader;
-import java.io.Writer;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.regex.Pattern;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandExecutor;
-import org.bukkit.command.CommandSender;
-import org.bukkit.command.PluginCommand;
-import org.bukkit.command.TabCompleter;
+import org.bukkit.command.*;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
@@ -29,6 +16,12 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.Tag;
 
+import java.io.InputStream;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.*;
+import java.util.regex.Pattern;
+
 /**
  * This type is the runtime-container for the information in the plugin.yml.
  * All plugins must have a respective plugin.yml. For plugins written in java
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index 6ab9cd8213cbe35943748dcf42948d5fc048c84c..65ffd55db5aaa8bb337d9b892d4c222e915291fa 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -1,12 +1,13 @@
 package org.bukkit.plugin;
 
+import org.bukkit.event.Event;
+import org.bukkit.event.Listener;
+import org.jetbrains.annotations.NotNull;
+
 import java.io.File;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
-import org.bukkit.event.Event;
-import org.bukkit.event.Listener;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Represents a plugin loader, which handles direct access to specific types
diff --git a/src/main/java/org/bukkit/plugin/PluginLogger.java b/src/main/java/org/bukkit/plugin/PluginLogger.java
index 0182370014e0dc8b74759933ab984d16678f6ec3..533f0b6f8145884de006ea2525dbc9a288d3ce22 100644
--- a/src/main/java/org/bukkit/plugin/PluginLogger.java
+++ b/src/main/java/org/bukkit/plugin/PluginLogger.java
@@ -1,9 +1,10 @@
 package org.bukkit.plugin;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * The PluginLogger class is a modified {@link Logger} that prepends all
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 86cc5025ad98f7a752c51713b7cd6a39d5136ecc..7a02175fd4f28a4d45607308218bf2fce09c659e 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -1,7 +1,5 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.util.Set;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
@@ -11,6 +9,9 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
+import java.util.Set;
+
 /**
  * Handles all plugin management from the Server
  */
diff --git a/src/main/java/org/bukkit/plugin/RegisteredListener.java b/src/main/java/org/bukkit/plugin/RegisteredListener.java
index 419aec56b0e3fa8bcec2ea7f340caa3456b57d00..a3b3a056b9659cc06aea7859f2fe017e25648cdb 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredListener.java
@@ -1,10 +1,6 @@
 package org.bukkit.plugin;
 
-import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
-import org.bukkit.event.EventPriority;
-import org.bukkit.event.Listener;
+import org.bukkit.event.*;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/org/bukkit/plugin/ServicesManager.java b/src/main/java/org/bukkit/plugin/ServicesManager.java
index 9e2f00572af099d3556f210819a65ee9fa2bc0d5..185b644b122b7696d7d7bc9662758fae8d879724 100644
--- a/src/main/java/org/bukkit/plugin/ServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/ServicesManager.java
@@ -1,10 +1,11 @@
 package org.bukkit.plugin;
 
-import java.util.Collection;
-import java.util.List;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+import java.util.List;
+
 /**
  * Manages services and service providers. Services are an interface
  * specifying a list of methods that a provider must implement. Providers are
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 26685f59b235ea5b4c4fb7ae21acb5149edaa2b3..f6de2ae1eac3466ab0c6d2a02164bb757ebd95eb 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -1,32 +1,13 @@
 package org.bukkit.plugin;
 
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerEventException;
+import com.destroystokyo.paper.exception.ServerPluginEnableDisableException;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.graph.GraphBuilder;
 import com.google.common.graph.Graphs;
 import com.google.common.graph.MutableGraph;
-import java.io.File;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.WeakHashMap;
-import java.util.logging.Level;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import com.destroystokyo.paper.event.server.ServerExceptionEvent;
-import com.destroystokyo.paper.exception.ServerEventException;
-import com.destroystokyo.paper.exception.ServerPluginEnableDisableException;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.World;
@@ -44,6 +25,14 @@ import org.bukkit.util.FileUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.util.*;
+import java.util.logging.Level;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
 /**
  * Handles all plugin management from the Server
  */
diff --git a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
index f3dd8490230b85be7e03f7c0f0c20b476e1574fd..aaa95ca8b99d62b3dfb7b689e09d077b75aa90b5 100644
--- a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
@@ -2,20 +2,14 @@ package org.bukkit.plugin;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.NoSuchElementException;
-import java.util.Set;
 import org.bukkit.Bukkit;
 import org.bukkit.event.server.ServiceRegisterEvent;
 import org.bukkit.event.server.ServiceUnregisterEvent;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.*;
+
 /**
  * A simple services manager.
  */
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 04fa3991f6ce4e9dad804f28fc6c947695857089..eb0ed9763a48e73fa0c36790660a79092687ff82 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -1,18 +1,6 @@
 package org.bukkit.plugin.java;
 
 import com.google.common.base.Charsets;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.Reader;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
@@ -24,10 +12,16 @@ import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.PluginLogger;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.*;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 /**
  * Represents a Java plugin
  */
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 384edf9890dfbd1cddfdcac4db1ebe9a4d761f78..adc3f55122feaa2b1af786d34ded7a2900d03438 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -1,23 +1,5 @@
 package org.bukkit.plugin.java;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
-import java.util.logging.Level;
-import java.util.regex.Pattern;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Server;
 import org.bukkit.Warning;
@@ -25,26 +7,28 @@ import org.bukkit.Warning.WarningState;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.server.PluginDisableEvent;
 import org.bukkit.event.server.PluginEnableEvent;
-import org.bukkit.plugin.AuthorNagException;
-import org.bukkit.plugin.EventExecutor;
-import org.bukkit.plugin.InvalidDescriptionException;
-import org.bukkit.plugin.InvalidPluginException;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginDescriptionFile;
-import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.RegisteredListener;
-import org.bukkit.plugin.TimedRegisteredListener;
-import org.bukkit.plugin.UnknownDependencyException;
+import org.bukkit.plugin.*;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.spigotmc.CustomTimingsHandler; // Spigot
 import org.yaml.snakeyaml.error.YAMLException;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Method;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
 /**
  * Represents a Java plugin loader, allowing plugins in the form of .jar
  */
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 62f7a6817da079513f471e36cd79739d36a36d86..571e68010c3e76dd7ea777fd55ad5ce36af96262 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -1,6 +1,13 @@
 package org.bukkit.plugin.java;
 
 import com.google.common.io.ByteStreams;
+import org.apache.commons.lang.Validate;
+import org.bukkit.plugin.InvalidPluginException;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.SimplePluginManager;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -18,12 +25,6 @@ import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
 import java.util.logging.Level;
-import org.apache.commons.lang.Validate;
-import org.bukkit.plugin.InvalidPluginException;
-import org.bukkit.plugin.PluginDescriptionFile;
-import org.bukkit.plugin.SimplePluginManager;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
diff --git a/src/main/java/org/bukkit/plugin/messaging/Messenger.java b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
index 682c77188436d696d4dafbc70cf131d5c921e94d..1493bc1bec3269e9521438f8d0840ef2c056e674 100644
--- a/src/main/java/org/bukkit/plugin/messaging/Messenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
@@ -1,11 +1,12 @@
 package org.bukkit.plugin.messaging;
 
-import java.util.Set;
 import org.bukkit.NamespacedKey;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * A class responsible for managing the registrations of plugin channels and
  * their listeners.
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
index b84b37fe27d84574dc5897285f1d9a1437bd322c..0fec28682598d14ff7b0948b1a3733f6e23ae539 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
@@ -1,9 +1,10 @@
 package org.bukkit.plugin.messaging;
 
-import java.util.Set;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * Represents a possible recipient for a Plugin Message.
  */
diff --git a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
index 6fda7f3aa68e76af64362e9afed70fc6a5e92986..0635fb216d510a15b8e61c38a5108741ab342ecc 100644
--- a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
@@ -2,16 +2,13 @@ package org.bukkit.plugin.messaging;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-import java.util.logging.Level;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.*;
+import java.util.logging.Level;
+
 /**
  * Standard implementation to {@link Messenger}
  */
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index ac02ae4fc179483b4ac3d1adc41684a8426197eb..b1397a08d281ed8fb0b22e87520988e8f069ba45 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -1,6 +1,5 @@
 package org.bukkit.potion;
 
-import java.util.Collection;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.entity.LivingEntity;
@@ -8,6 +7,8 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * Potion Adapter for pre-1.9 data values
  * see @PotionMeta for 1.9+
diff --git a/src/main/java/org/bukkit/potion/PotionBrewer.java b/src/main/java/org/bukkit/potion/PotionBrewer.java
index d21f407cc16cfd709c1cabf408e8d8d16aba7e1a..254bd6f3e8d13932076421ad918702841d1cc839 100644
--- a/src/main/java/org/bukkit/potion/PotionBrewer.java
+++ b/src/main/java/org/bukkit/potion/PotionBrewer.java
@@ -1,8 +1,9 @@
 package org.bukkit.potion;
 
-import java.util.Collection;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 /**
  * Represents a brewer that can create {@link PotionEffect}s.
  */
diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
index 74767751199bce03d63f2a9524712656193f850c..76376bc21ce7f13cb09ef94afabb672731742b83 100644
--- a/src/main/java/org/bukkit/potion/PotionEffect.java
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java
@@ -1,8 +1,6 @@
 package org.bukkit.potion;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.Map;
-import java.util.NoSuchElementException;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
@@ -12,6 +10,9 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+import java.util.NoSuchElementException;
+
 /**
  * Represents a potion effect, that can be added to a {@link LivingEntity}. A
  * potion effect has a duration that it will last for, an amplifier that will
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
index b5790aaac67f5b73f941147008d21a92d716b254..0e9e16ee08deb20da11dfe1d00bc69093a8ee04d 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -1,13 +1,14 @@
 package org.bukkit.potion;
 
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Represents a type of potion and its effect on an entity.
  */
diff --git a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
index ac140fc2c638e22e06b2920db3e376ab9e8c3733..91d757a1ce940cb244f496e69d11fe96de6e3284 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
@@ -1,11 +1,12 @@
 package org.bukkit.scheduler;
 
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 import java.util.function.Consumer;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
 
 public interface BukkitScheduler {
 
diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
index 4bfaaea78c9b6aa5d392629aa943d26dbe6a7d4a..3f1fcf3a1295b2cac0dbd2a42eaa0c69853e2095 100644
--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java
+++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java
@@ -1,10 +1,11 @@
 package org.bukkit.scoreboard;
 
-import java.util.Set;
 import org.bukkit.OfflinePlayer;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Set;
+
 /**
  * A scoreboard
  */
diff --git a/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java b/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java
index 3c0740797a2ad3b165c8a69596d275dbc710feca..255977c2fb13fe6e67ae516e452beb2448c72f09 100644
--- a/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java
+++ b/src/main/java/org/bukkit/scoreboard/ScoreboardManager.java
@@ -1,8 +1,9 @@
 package org.bukkit.scoreboard;
 
-import java.lang.ref.WeakReference;
 import org.jetbrains.annotations.NotNull;
 
+import java.lang.ref.WeakReference;
+
 /**
  * Manager of Scoreboards
  */
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index da01d2926cc8a2485a3349ac1ebb32cad20e287c..bea978aeb553566f25a94d7c3f718109d960af89 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -1,12 +1,13 @@
 package org.bukkit.scoreboard;
 
-import java.util.Set;
 import org.bukkit.ChatColor;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Set;
+
 /**
  * A team on a scoreboard that has a common display theme and other
  * properties. This team is only relevant to the display of the associated
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
index 8a377e1413a0034da8e8f03e25d1e3d6e2cf6f92..4df279970524faf2201098bffdb3b009883f2608 100644
--- a/src/main/java/org/bukkit/util/BlockIterator.java
+++ b/src/main/java/org/bukkit/util/BlockIterator.java
@@ -1,8 +1,5 @@
 package org.bukkit.util;
 
-import static org.bukkit.util.NumberConversions.*;
-import java.util.Iterator;
-import java.util.NoSuchElementException;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.Block;
@@ -10,6 +7,12 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.entity.LivingEntity;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
+import static org.bukkit.util.NumberConversions.floor;
+import static org.bukkit.util.NumberConversions.round;
+
 /**
  * This class performs ray tracing and iterates along blocks on a line
  */
diff --git a/src/main/java/org/bukkit/util/BlockVector.java b/src/main/java/org/bukkit/util/BlockVector.java
index eddc7248903fe3672010c04c0684f9ae3e8559e4..eb3c87dad970ce6e161199419fde6a1fbfc53ad3 100644
--- a/src/main/java/org/bukkit/util/BlockVector.java
+++ b/src/main/java/org/bukkit/util/BlockVector.java
@@ -1,9 +1,10 @@
 package org.bukkit.util;
 
-import java.util.Map;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * A vector with a hash function that floors the X, Y, Z components, a la
  * BlockVector in WorldEdit. BlockVectors can be used in hash sets and
diff --git a/src/main/java/org/bukkit/util/BoundingBox.java b/src/main/java/org/bukkit/util/BoundingBox.java
index 01f80020b12c7b4637e5c22f7277a0268fe40cd2..be64e9e6f54e6497c9b6fd5397bc1962be7f3f3d 100644
--- a/src/main/java/org/bukkit/util/BoundingBox.java
+++ b/src/main/java/org/bukkit/util/BoundingBox.java
@@ -1,8 +1,5 @@
 package org.bukkit.util;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Objects;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
@@ -12,6 +9,10 @@ import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Objects;
+
 /**
  * A mutable axis aligned bounding box (AABB).
  * <p>
diff --git a/src/main/java/org/bukkit/util/ChatPaginator.java b/src/main/java/org/bukkit/util/ChatPaginator.java
index 1f510211813836c7a891b14fb8262b75d1d1fce7..04358f17e9b2d28c3f6ddfd6a664110ae74755bf 100644
--- a/src/main/java/org/bukkit/util/ChatPaginator.java
+++ b/src/main/java/org/bukkit/util/ChatPaginator.java
@@ -1,12 +1,13 @@
 package org.bukkit.util;
 
-import java.util.Arrays;
-import java.util.LinkedList;
-import java.util.List;
 import org.bukkit.ChatColor;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+
 /**
  * The ChatPaginator takes a raw string of arbitrary length and breaks it down
  * into an array of strings appropriate for displaying on the Minecraft player
diff --git a/src/main/java/org/bukkit/util/FileUtil.java b/src/main/java/org/bukkit/util/FileUtil.java
index 6e2352a3084daf05c16cc5ca86b4fa9e8b1c1e4d..3ea60d7f544a4d741f68189faa8614c56dd18ddd 100644
--- a/src/main/java/org/bukkit/util/FileUtil.java
+++ b/src/main/java/org/bukkit/util/FileUtil.java
@@ -1,11 +1,12 @@
 package org.bukkit.util;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.nio.channels.FileChannel;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Class containing file utilities
diff --git a/src/main/java/org/bukkit/util/RayTraceResult.java b/src/main/java/org/bukkit/util/RayTraceResult.java
index 19c52a2a62068f5f4af4184e24defa0f7c1005a7..29869f846337a6833b033b7d2ccd4ff368c334e9 100644
--- a/src/main/java/org/bukkit/util/RayTraceResult.java
+++ b/src/main/java/org/bukkit/util/RayTraceResult.java
@@ -1,6 +1,5 @@
 package org.bukkit.util;
 
-import java.util.Objects;
 import org.apache.commons.lang.Validate;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -8,6 +7,8 @@ import org.bukkit.entity.Entity;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Objects;
+
 /**
  * The hit result of a ray trace.
  * <p>
diff --git a/src/main/java/org/bukkit/util/StringUtil.java b/src/main/java/org/bukkit/util/StringUtil.java
index 458d5ebdf6c42d695985202dd6d7df626fcc5972..ff80e69f202941015c6b2bed93e54c2fbc7f8178 100644
--- a/src/main/java/org/bukkit/util/StringUtil.java
+++ b/src/main/java/org/bukkit/util/StringUtil.java
@@ -1,9 +1,10 @@
 package org.bukkit.util;
 
-import java.util.Collection;
 import org.apache.commons.lang.Validate;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collection;
+
 public class StringUtil {
 
     /**
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index bdfb9623b74ea73a3d343b20fc1369cc797880c5..e77873a189b5228614807ddaadd04ee1f7a5b626 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -2,15 +2,16 @@ package org.bukkit.util;
 
 import com.google.common.base.Preconditions;
 import com.google.common.primitives.Doubles;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Random;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Random;
+
 /**
  * Represents a mutable vector. Because the components of Vectors are mutable,
  * storing Vectors long term may be dangerous if passing code modifies the
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
index 0f8eb97bd5e2f8b0f0cc03f7c4342aae06c4520c..e5d45a99bc999a8ce9e493364a40358d666c09eb 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
@@ -1,10 +1,11 @@
 package org.bukkit.util.io;
 
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.configuration.serialization.ConfigurationSerialization;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.ObjectInputStream;
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.configuration.serialization.ConfigurationSerialization;
 
 /**
  * This class is designed to be used in conjunction with the {@link
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
index dd1b9ee5f57773f07924aa311823fd8d63195cb2..4527d83b7a857e2a4e306eb911eb0d1e1f1ce4fb 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
@@ -1,10 +1,11 @@
 package org.bukkit.util.io;
 
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+
 import java.io.IOException;
 import java.io.ObjectOutputStream;
 import java.io.OutputStream;
 import java.io.Serializable;
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
 
 /**
  * This class is designed to be used in conjunction with the {@link
diff --git a/src/main/java/org/bukkit/util/io/Wrapper.java b/src/main/java/org/bukkit/util/io/Wrapper.java
index c3496dc8ba124cfdd23f0fe14d17f8f7cea7c955..a6a39398a21ee65b2e1f688b2c43ef5d27c5cd8f 100644
--- a/src/main/java/org/bukkit/util/io/Wrapper.java
+++ b/src/main/java/org/bukkit/util/io/Wrapper.java
@@ -1,12 +1,13 @@
 package org.bukkit.util.io;
 
 import com.google.common.collect.ImmutableMap;
-import java.io.Serializable;
-import java.util.Map;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.jetbrains.annotations.NotNull;
 
+import java.io.Serializable;
+import java.util.Map;
+
 final class Wrapper<T extends Map<String, ?> & Serializable> implements Serializable {
     private static final long serialVersionUID = -986209235411767547L;
 
diff --git a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
index 520b65f9e6774f2fb8307311e5144128353cf777..971a806792c4ec356ebbd1248bb099c785e2d504 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
@@ -1,9 +1,10 @@
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Random;
+
 /**
  * Generates noise using the "classic" perlin generator
  *
diff --git a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
index af7e01188ee767858ba760089b2aceab0bc9626a..6114a1aca8d9ccbd43820a4799a8cbfb513aae82 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
@@ -1,9 +1,10 @@
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Random;
+
 /**
  * Creates perlin noise through unbiased octaves
  */
diff --git a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
index 775d8f40322e9ed6702eb23bf50f35442d673c30..51c24a6cca9d4164ff3d3cabc45b73dc7104275d 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
@@ -1,10 +1,11 @@
 // CHECKSTYLE:OFF
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Random;
+
 /**
  * Generates simplex-based noise.
  * <p>
diff --git a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
index 6cc15431e1b288df1830adac936a7648c6834b3e..d1f8a764520586ad0f20d1a812ec8b6d68e56faf 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
@@ -1,9 +1,10 @@
 package org.bukkit.util.noise;
 
-import java.util.Random;
 import org.bukkit.World;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Random;
+
 /**
  * Creates simplex noise through unbiased octaves
  */
diff --git a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
index 8e481e3815f5645ee92f0d229e5ff25c8fc9a6c2..268deda1fe314474f8d3e9a53163cfb5675a17a8 100644
--- a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
@@ -1,12 +1,13 @@
 package org.bukkit.util.permissions;
 
-import java.util.Map;
 import org.bukkit.Bukkit;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 public final class DefaultPermissions {
     private static final String ROOT = "craftbukkit";
     private static final String LEGACY_PREFIX = "craft";
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index 3cbe5c2bb55dead7968a6f165ef267e3e2931061..8c58a8ce9f9cfc8f94ca315962a9a09cab95b9d4 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -23,18 +23,13 @@
  */
 package org.spigotmc;
 
-import java.io.PrintStream;
-import java.util.Queue;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import org.bukkit.Bukkit;
-import org.bukkit.World;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-import org.bukkit.plugin.AuthorNagException;
-import org.bukkit.plugin.Plugin;
 import co.aikar.timings.Timing;
 import co.aikar.timings.Timings;
 import co.aikar.timings.TimingsManager;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.AuthorNagException;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
index 2e9249a6d48edfe2339cbb4c8cc799cf551381fd..5db12e167056627dda88c6a1599040b0d11b1191 100644
--- a/src/test/java/org/bukkit/ArtTest.java
+++ b/src/test/java/org/bukkit/ArtTest.java
@@ -1,9 +1,11 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 public class ArtTest {
 
     @Test(expected = IllegalArgumentException.class)
diff --git a/src/test/java/org/bukkit/BukkitMirrorTest.java b/src/test/java/org/bukkit/BukkitMirrorTest.java
index 2dfada66067d79b84cd490eadbe0178e8cd8c260..383fb750ade53ff959a38125981e5d48f0304e96 100644
--- a/src/test/java/org/bukkit/BukkitMirrorTest.java
+++ b/src/test/java/org/bukkit/BukkitMirrorTest.java
@@ -1,13 +1,7 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -15,6 +9,14 @@ import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class BukkitMirrorTest {
 
diff --git a/src/test/java/org/bukkit/ChatColorTest.java b/src/test/java/org/bukkit/ChatColorTest.java
index 2a8c8c729850c65dcc5f681267ee7e543b927d7e..a39d52e724879a97ca09ebe215897f3ece302552 100644
--- a/src/test/java/org/bukkit/ChatColorTest.java
+++ b/src/test/java/org/bukkit/ChatColorTest.java
@@ -1,9 +1,11 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.nullValue;
+import static org.junit.Assert.assertThat;
+
 public class ChatColorTest {
 
     @Test
diff --git a/src/test/java/org/bukkit/ChatPaginatorTest.java b/src/test/java/org/bukkit/ChatPaginatorTest.java
index d38e64f0995bb4fb142c4a3317d6e3bca2b3bb75..f74a9326d6545e34786f278609707a8568462be0 100644
--- a/src/test/java/org/bukkit/ChatPaginatorTest.java
+++ b/src/test/java/org/bukkit/ChatPaginatorTest.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.bukkit.util.ChatPaginator;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class ChatPaginatorTest {
     @Test
     public void testWordWrap1() {
diff --git a/src/test/java/org/bukkit/CoalTypeTest.java b/src/test/java/org/bukkit/CoalTypeTest.java
index b90f10c4ef89a4c155e6f9a6a3b674d149ac7296..5d29b36f2ecdd1e7e9b0dd65e66806ec91c1d4e3 100644
--- a/src/test/java/org/bukkit/CoalTypeTest.java
+++ b/src/test/java/org/bukkit/CoalTypeTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class CoalTypeTest {
     @Test
     public void getByData() {
diff --git a/src/test/java/org/bukkit/ColorTest.java b/src/test/java/org/bukkit/ColorTest.java
index 70183fdb7f06e6ec3a64d93737f26bcbeb485e84..dfbc9c8d194f556b4ab9a8fd4cf154242a195f72 100644
--- a/src/test/java/org/bukkit/ColorTest.java
+++ b/src/test/java/org/bukkit/ColorTest.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.junit.Test;
 
+import static org.hamcrest.Matchers.*;
+import static org.junit.Assert.assertThat;
+
 @SuppressWarnings("javadoc")
 public class ColorTest {
     static class TestColor {
diff --git a/src/test/java/org/bukkit/CropStateTest.java b/src/test/java/org/bukkit/CropStateTest.java
index 5cd9d6d2d768f72034cac722e11f8835be426b5e..e348647097dc6686044d9c8299955731ee69564c 100644
--- a/src/test/java/org/bukkit/CropStateTest.java
+++ b/src/test/java/org/bukkit/CropStateTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class CropStateTest {
     @Test
     public void getByData() {
diff --git a/src/test/java/org/bukkit/DifficultyTest.java b/src/test/java/org/bukkit/DifficultyTest.java
index d7fe8d39a466a41c92cd928dd78e9d7a4281f825..fb90006ad3b41df0debbaf8e9e381e020115a578 100644
--- a/src/test/java/org/bukkit/DifficultyTest.java
+++ b/src/test/java/org/bukkit/DifficultyTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class DifficultyTest {
     @Test
     public void getByValue() {
diff --git a/src/test/java/org/bukkit/DyeColorTest.java b/src/test/java/org/bukkit/DyeColorTest.java
index e56d9439a2c4aa029263d68cb435bec63ce87574..9e2e2f1a5861fc6d8bad1d5ede248725dcd553ed 100644
--- a/src/test/java/org/bukkit/DyeColorTest.java
+++ b/src/test/java/org/bukkit/DyeColorTest.java
@@ -1,9 +1,5 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
 import org.bukkit.material.Colorable;
 import org.bukkit.material.Dye;
 import org.bukkit.material.Wool;
@@ -13,6 +9,12 @@ import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class DyeColorTest {
 
diff --git a/src/test/java/org/bukkit/EffectTest.java b/src/test/java/org/bukkit/EffectTest.java
index 54e621e86e8fe3414099494d419929b282b33489..8ee419916fcb4f00da484e34bcfb4f7db6202363 100644
--- a/src/test/java/org/bukkit/EffectTest.java
+++ b/src/test/java/org/bukkit/EffectTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class EffectTest {
     @Test
     public void getById() {
diff --git a/src/test/java/org/bukkit/GameModeTest.java b/src/test/java/org/bukkit/GameModeTest.java
index 1c53e8ed8ba2a7fe9a51771b80bd6d0cb358adda..14d1789ff8d5abbd0948c348b5bf9ed409c0eeec 100644
--- a/src/test/java/org/bukkit/GameModeTest.java
+++ b/src/test/java/org/bukkit/GameModeTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class GameModeTest {
     @Test
     public void getByValue() {
diff --git a/src/test/java/org/bukkit/GrassSpeciesTest.java b/src/test/java/org/bukkit/GrassSpeciesTest.java
index 39f1b899ea9c5389b42dda058949fcae1e2bbe84..b14074b3de7a5ba6feb84311f2673033b51ebc48 100644
--- a/src/test/java/org/bukkit/GrassSpeciesTest.java
+++ b/src/test/java/org/bukkit/GrassSpeciesTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class GrassSpeciesTest {
     @Test
     public void getByData() {
diff --git a/src/test/java/org/bukkit/InstrumentTest.java b/src/test/java/org/bukkit/InstrumentTest.java
index f6d261ae50aa264d4ad35b8e465aba778dcabda4..7131d538c854c21586f4ba472ea0227b928f40fc 100644
--- a/src/test/java/org/bukkit/InstrumentTest.java
+++ b/src/test/java/org/bukkit/InstrumentTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class InstrumentTest {
     @Test
     public void getByType() {
diff --git a/src/test/java/org/bukkit/LocationTest.java b/src/test/java/org/bukkit/LocationTest.java
index 887305c05c3e53079347502c187984ca3e42a1f8..a5b56467755d87c270a7f84fc2326e7a92343bc1 100644
--- a/src/test/java/org/bukkit/LocationTest.java
+++ b/src/test/java/org/bukkit/LocationTest.java
@@ -1,10 +1,6 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.ImmutableList;
-import java.util.List;
-import java.util.Random;
 import org.bukkit.util.Vector;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -12,6 +8,13 @@ import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+import java.util.List;
+import java.util.Random;
+
+import static org.hamcrest.Matchers.closeTo;
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class LocationTest {
     private static final double delta = 1.0 / 1000000;
diff --git a/src/test/java/org/bukkit/MaterialTest.java b/src/test/java/org/bukkit/MaterialTest.java
index 6b0eaaadf9772a4850cb70cea2bfe72a81a47a04..fbf4fc6d53c3f30cecb725de10cc4cfd69e6c849 100644
--- a/src/test/java/org/bukkit/MaterialTest.java
+++ b/src/test/java/org/bukkit/MaterialTest.java
@@ -1,10 +1,12 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import org.bukkit.material.MaterialData;
 import org.junit.Test;
 
+import static org.hamcrest.Matchers.*;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
+
 public class MaterialTest {
     @Test
     public void getByName() {
diff --git a/src/test/java/org/bukkit/NoteTest.java b/src/test/java/org/bukkit/NoteTest.java
index 0db4bfa43ae7d941c4be35ff89bdc6ce8471602b..c8e5cca912e1e6393cc00c1eb7334385c4e0ddf1 100644
--- a/src/test/java/org/bukkit/NoteTest.java
+++ b/src/test/java/org/bukkit/NoteTest.java
@@ -1,11 +1,14 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.Lists;
-import java.util.Collection;
 import org.junit.Test;
 
+import java.util.Collection;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.nullValue;
+import static org.junit.Assert.*;
+
 public class NoteTest {
     @Test
     public void getToneByData() {
diff --git a/src/test/java/org/bukkit/TestServer.java b/src/test/java/org/bukkit/TestServer.java
index 5f9d348241210689eaf41a39ace5948e7a237b12..d33d974923ef176bd8246ca8a11e80ae5846b8e1 100644
--- a/src/test/java/org/bukkit/TestServer.java
+++ b/src/test/java/org/bukkit/TestServer.java
@@ -1,14 +1,15 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
+import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.plugin.PluginManager;
+import org.bukkit.plugin.SimplePluginManager;
+
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.Map;
 import java.util.logging.Logger;
-import org.bukkit.command.SimpleCommandMap;
-import org.bukkit.plugin.PluginManager;
-import org.bukkit.plugin.SimplePluginManager;
 
 public final class TestServer implements InvocationHandler {
     private static interface MethodHandler {
diff --git a/src/test/java/org/bukkit/TestWorld.java b/src/test/java/org/bukkit/TestWorld.java
index beb15c7c813d8d9b6ff6f88a2826c06533ccd725..50d35e37a632ea3c377680ececdfd1317e017f67 100644
--- a/src/test/java/org/bukkit/TestWorld.java
+++ b/src/test/java/org/bukkit/TestWorld.java
@@ -1,6 +1,7 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
+
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
diff --git a/src/test/java/org/bukkit/TreeSpeciesTest.java b/src/test/java/org/bukkit/TreeSpeciesTest.java
index 51e956cc5ea6f856664c0b85daaf6070073d1ec8..3ec69a706bd489131c30c11fa921fb11aa6c2cc0 100644
--- a/src/test/java/org/bukkit/TreeSpeciesTest.java
+++ b/src/test/java/org/bukkit/TreeSpeciesTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class TreeSpeciesTest {
     @Test
     public void getByData() {
diff --git a/src/test/java/org/bukkit/WorldTypeTest.java b/src/test/java/org/bukkit/WorldTypeTest.java
index 3c5f7b8a7062629b3c1ebab365986e42f5284ba5..d22c5ed2ac27be6bc159c793e201c805f7f6b3be 100644
--- a/src/test/java/org/bukkit/WorldTypeTest.java
+++ b/src/test/java/org/bukkit/WorldTypeTest.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class WorldTypeTest {
     @Test
     public void getByName() {
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
index 4356b907116e3eec848135b3d8a9ba939ecea1ff..158ed98ea76579d4efb15c7a502961b96bbcc7d9 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
@@ -1,16 +1,14 @@
 package org.bukkit.configuration;
 
-import static org.junit.Assert.*;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
 import org.junit.Test;
 
+import java.util.*;
+
+import static org.junit.Assert.*;
+
 public abstract class ConfigurationSectionTest {
     public abstract ConfigurationSection getConfigurationSection();
 
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationTest.java b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
index 94eb854e94d005b2429183a9dced69e85053bf28..e98fd66ef85dd057fafee8d4978cd2a62bd5cbd3 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
@@ -1,15 +1,12 @@
 package org.bukkit.configuration;
 
-import static org.junit.Assert.*;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Set;
 import org.bukkit.util.Vector;
 import org.junit.Test;
 
+import java.util.*;
+
+import static org.junit.Assert.*;
+
 public abstract class ConfigurationTest {
     public abstract Configuration getConfig();
 
diff --git a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
index a996753b9385f06049fb8ab2786db5fd681f88f0..03c4f3096986e659d045ea66c4c8a818347926c5 100644
--- a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
@@ -1,15 +1,17 @@
 package org.bukkit.configuration.file;
 
-import static org.junit.Assert.*;
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
-import java.util.Map;
 import org.bukkit.configuration.MemoryConfigurationTest;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.util.Map;
+
+import static org.junit.Assert.*;
+
 public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     @Rule
     public TemporaryFolder testFolder = new TemporaryFolder();
diff --git a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
index 06ac381b5cf7284cac71e0f8148bf2fe1841428b..1a7601cf2a5efb626c20c4a54a8e9b838df5d4a6 100644
--- a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
@@ -1,8 +1,9 @@
 package org.bukkit.configuration.file;
 
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class YamlConfigurationTest extends FileConfigurationTest {
 
     @Override
diff --git a/src/test/java/org/bukkit/conversations/ConversationContextTest.java b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
index 3780a47c1f48d47b39a0e8a36c64044b366f8cc0..6920a1464e8bef1cde045389e1845ba23782286b 100644
--- a/src/test/java/org/bukkit/conversations/ConversationContextTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
@@ -1,9 +1,11 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
+import org.junit.Test;
+
 import java.util.HashMap;
 import java.util.Map;
-import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
 
 /**
  */
diff --git a/src/test/java/org/bukkit/conversations/ConversationTest.java b/src/test/java/org/bukkit/conversations/ConversationTest.java
index c448dc724d65f4b6a4cf52a6213f712b4c06d82e..00a73cd55a166207665384f7915c448f78feaabc 100644
--- a/src/test/java/org/bukkit/conversations/ConversationTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationTest.java
@@ -1,9 +1,10 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 /**
  */
 public class ConversationTest {
diff --git a/src/test/java/org/bukkit/conversations/FakeConversable.java b/src/test/java/org/bukkit/conversations/FakeConversable.java
index 1e6b48c7724254571189cdfa367d741796630942..53c55051717e23bb985bddc6fc4df9c3e7cbf730 100644
--- a/src/test/java/org/bukkit/conversations/FakeConversable.java
+++ b/src/test/java/org/bukkit/conversations/FakeConversable.java
@@ -1,12 +1,13 @@
 package org.bukkit.conversations;
 
-import java.util.Set;
 import org.bukkit.Server;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 
+import java.util.Set;
+
 /**
  */
 public class FakeConversable implements Conversable {
diff --git a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
index 6093e9865b004c8fa4aed0bd0c291a4c77ca8b84..d2ab96681a5e704fe721ee6fde3acb931218e134 100644
--- a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
+++ b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
@@ -1,8 +1,9 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 /**
  */
 public class ValidatingPromptTest {
diff --git a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
index b955f6a7adc65a5d1557df3d15fdeb1916ad3cad..4ce86dc9c8f37ba46e7be966d754592f07448cdf 100644
--- a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
+++ b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
@@ -1,11 +1,12 @@
 package org.bukkit.entity.memory;
 
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.NamespacedKey;
 import org.junit.Assert;
 import org.junit.Test;
 
+import java.util.Arrays;
+import java.util.List;
+
 public class MemoryKeyTest {
 
     @Test
diff --git a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
index dd5fb243b7af23115908a534bec13e8f455f64b2..66008139243be58101354e2194f6d876de97213f 100644
--- a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
+++ b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
@@ -1,12 +1,13 @@
 package org.bukkit.event;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.ImmutableList;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.plugin.messaging.TestPlayer;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
 public class PlayerChatTabCompleteEventTest {
 
     @Test
diff --git a/src/test/java/org/bukkit/materials/MaterialDataTest.java b/src/test/java/org/bukkit/materials/MaterialDataTest.java
index a935ae4a25b7955416652bf8c4690a804f12e903..496dee3ef9c0932b17c1a222bdfde3c85a7d8a91 100644
--- a/src/test/java/org/bukkit/materials/MaterialDataTest.java
+++ b/src/test/java/org/bukkit/materials/MaterialDataTest.java
@@ -1,27 +1,17 @@
 package org.bukkit.materials;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import org.bukkit.CropState;
 import org.bukkit.Material;
 import org.bukkit.NetherWartsState;
 import org.bukkit.TreeSpecies;
 import org.bukkit.block.BlockFace;
-import org.bukkit.material.Comparator;
-import org.bukkit.material.Crops;
-import org.bukkit.material.Diode;
-import org.bukkit.material.Door;
-import org.bukkit.material.Hopper;
-import org.bukkit.material.Leaves;
-import org.bukkit.material.Mushroom;
-import org.bukkit.material.NetherWarts;
-import org.bukkit.material.Sapling;
-import org.bukkit.material.Tree;
-import org.bukkit.material.Wood;
-import org.bukkit.material.WoodenStep;
+import org.bukkit.material.*;
 import org.bukkit.material.types.MushroomBlockTexture;
 import org.junit.Test;
 
+import static org.hamcrest.Matchers.equalTo;
+import static org.junit.Assert.assertThat;
+
 public class MaterialDataTest {
 
     @Test
diff --git a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
index e8cea99fd0eb966e60b0a8e1ebceca6dce6ff50a..bd93263180a57e64ede728cc8de74b0046879a53 100644
--- a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
@@ -1,10 +1,12 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
+
 public class FixedMetadataValueTest {
     private Plugin plugin = new TestPlugin("X");
     private FixedMetadataValue subject;
diff --git a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
index bc8a18eea6c0c61ad07bdc44b2a7c38f84117da6..113369efb6157fec390f81228f893d80eba05031 100644
--- a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
@@ -1,10 +1,12 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
-import java.util.concurrent.Callable;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
+import java.util.concurrent.Callable;
+
+import static org.junit.Assert.assertEquals;
+
 public class LazyMetadataValueTest {
     private LazyMetadataValue subject;
     private TestPlugin plugin = new TestPlugin("x");
diff --git a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
index a9c10a2fd9fb37f2f7223fed138b2e2bfdaaef12..a595cc8d674edf74982b7361b9d1a989e673511c 100644
--- a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
@@ -15,11 +15,12 @@
 
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 /**
  */
 public class MetadataConversionTest {
diff --git a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
index 12373ff16ca71bc437929ea5c4486c2c6bd93d09..3a721ab124218407b7032da554f75e7b62ff09b2 100644
--- a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
@@ -1,12 +1,14 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
-import java.util.List;
-import java.util.concurrent.Callable;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
+import java.util.List;
+import java.util.concurrent.Callable;
+
+import static org.junit.Assert.*;
+
 public class MetadataStoreTest {
     private Plugin pluginX = new TestPlugin("x");
     private Plugin pluginY = new TestPlugin("y");
diff --git a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
index c1e78568a86525e922a49a802aa5da85b4b6ae4a..63a01e8a111c283c437fe8ea28d4e7360efc6da1 100644
--- a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
@@ -1,10 +1,11 @@
 package org.bukkit.metadata;
 
-import static org.junit.Assert.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class MetadataValueAdapterTest {
     private TestPlugin plugin = new TestPlugin("x");
 
diff --git a/src/test/java/org/bukkit/plugin/PluginManagerTest.java b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
index 1941c9f49e9514c1236c5f4ea9f7af47f7be85c5..5be4f5ab1bec14529bf0d290398b1b5f32d545c1 100644
--- a/src/test/java/org/bukkit/plugin/PluginManagerTest.java
+++ b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
@@ -1,7 +1,5 @@
 package org.bukkit.plugin;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import org.bukkit.TestServer;
 import org.bukkit.event.Event;
 import org.bukkit.event.TestEvent;
@@ -9,6 +7,9 @@ import org.bukkit.permissions.Permission;
 import org.junit.After;
 import org.junit.Test;
 
+import static org.hamcrest.Matchers.*;
+import static org.junit.Assert.assertThat;
+
 public class PluginManagerTest {
     private class MutableObject {
         volatile Object value = null;
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index 6d450897187e810070f633e832034763a102a0b0..d870ca7fc1f2e11eac04c8b2c54710d0b8360c10 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -1,14 +1,15 @@
 package org.bukkit.plugin;
 
-import java.io.File;
-import java.io.InputStream;
-import java.util.List;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.ChunkGenerator;
 
+import java.io.File;
+import java.io.InputStream;
+import java.util.List;
+
 public class TestPlugin extends PluginBase {
     private boolean enabled = true;
 
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
index 351fc4a9f45745984d1d4811ba836959a3f3eadb..42c6ddb84048a18067a601fc20c31b0b0cf3ab53 100644
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
@@ -1,7 +1,5 @@
 package org.bukkit.plugin;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import org.bukkit.event.Event;
 import org.bukkit.event.EventException;
 import org.bukkit.event.EventPriority;
@@ -12,6 +10,9 @@ import org.bukkit.event.player.PlayerInteractEvent;
 import org.bukkit.event.player.PlayerMoveEvent;
 import org.junit.Test;
 
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 public class TimedRegisteredListenerTest {
 
     @Test
diff --git a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
index 7e2335ed8acc692af1e70eddcf97ee7a56e30f68..72bccc0fae5fe2d7537d34cba8b92f44a7185470 100644
--- a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
+++ b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
@@ -1,13 +1,16 @@
 package org.bukkit.plugin.messaging;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import java.util.Collection;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Assert;
 import org.junit.Test;
 
+import java.util.Collection;
+
+import static org.hamcrest.CoreMatchers.hasItems;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.*;
+
 public class StandardMessengerTest {
     public StandardMessenger getMessenger() {
         return new StandardMessenger();
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java b/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
index 7a5b6108d56b8350d1aa419caf25fe6c653066b4..123ead4807487c220ad4df8991b58ba3bbe70375 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
@@ -1,8 +1,10 @@
 package org.bukkit.plugin.messaging;
 
-import static org.junit.Assert.*;
 import org.bukkit.entity.Player;
 
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+
 public class TestMessageListener implements PluginMessageListener {
     private final String channel;
     private final byte[] message;
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
index 1b7642dc1c55c6bf87018b67d8c368478c0b9ca1..7c3c2d1063ba66f89992f29a6520578c673de434 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
@@ -1,11 +1,12 @@
 package org.bukkit.plugin.messaging;
 
+import org.bukkit.entity.Player;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.HashMap;
-import org.bukkit.entity.Player;
 
 
 public final class TestPlayer implements InvocationHandler {
diff --git a/src/test/java/org/bukkit/util/BoundingBoxTest.java b/src/test/java/org/bukkit/util/BoundingBoxTest.java
index 2d50a9ed66d40c9c538f5e767d9e128394f5dc3b..8f6899db65914ef71c89a850c3446376e76b1023 100644
--- a/src/test/java/org/bukkit/util/BoundingBoxTest.java
+++ b/src/test/java/org/bukkit/util/BoundingBoxTest.java
@@ -1,12 +1,14 @@
 package org.bukkit.util;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.Map;
 import org.bukkit.Location;
 import org.bukkit.block.BlockFace;
 import org.junit.Test;
 
+import java.util.Map;
+
+import static org.hamcrest.Matchers.*;
+import static org.junit.Assert.assertThat;
+
 public class BoundingBoxTest {
 
     private static final double delta = 1.0 / 1000000;
diff --git a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
index 229c67c769f50ba68b4d9681f984b4bc668619c2..2e6af3a7389a51dce97ed57bb86661fb8907ae10 100644
--- a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
@@ -1,15 +1,17 @@
 package org.bukkit.util;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.ImmutableList;
-import java.util.List;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+import java.util.List;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class StringUtilStartsWithTest {
 
diff --git a/src/test/java/org/bukkit/util/StringUtilTest.java b/src/test/java/org/bukkit/util/StringUtilTest.java
index 6476dd2d1b6d37c3390400d8dea94016b309d69f..e269e7615cf88930f84fb73fe461f1bbe2387203 100644
--- a/src/test/java/org/bukkit/util/StringUtilTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilTest.java
@@ -1,12 +1,15 @@
 package org.bukkit.util;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.ImmutableList;
+import org.junit.Test;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import org.junit.Test;
+
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.sameInstance;
+import static org.junit.Assert.assertThat;
 
 public class StringUtilTest {
 
diff --git a/src/test/java/org/bukkit/util/VectorTest.java b/src/test/java/org/bukkit/util/VectorTest.java
index 9b846deba8eb3ff43c444da70a9d7ca3d1b43b0a..1bdc75e6c07142ea8e862ffbaeac05baadf678fd 100644
--- a/src/test/java/org/bukkit/util/VectorTest.java
+++ b/src/test/java/org/bukkit/util/VectorTest.java
@@ -1,9 +1,10 @@
 package org.bukkit.util;
 
-import static org.junit.Assert.*;
 import org.bukkit.block.BlockFace;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 public class VectorTest {
 
     @Test
diff --git a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
index d3edb72ff83d68b86390b0e9f7e40035482f353a..2f42b8bf14c6ed01a430096e36fc3fcc0026fc2a 100644
--- a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
+++ b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
@@ -1,14 +1,6 @@
 package org.bukkit.util.io;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.ImmutableList;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
 import org.bukkit.FireworkEffect.Type;
@@ -22,6 +14,12 @@ import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 
+import java.io.*;
+import java.util.List;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class BukkitObjectStreamTest {
 
